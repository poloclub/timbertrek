{"version":3,"file":"2067.8afdd5e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/history.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/foreign.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A console history manager object.\n */\nexport class ConsoleHistory {\n    /**\n     * Construct a new console history object.\n     */\n    constructor(options) {\n        this._cursor = 0;\n        this._hasSession = false;\n        this._history = [];\n        this._placeholder = '';\n        this._setByHistory = false;\n        this._isDisposed = false;\n        this._editor = null;\n        this._filtered = [];\n        this.sessionContext = options.sessionContext;\n        void this._handleKernel();\n        this.sessionContext.kernelChanged.connect(this._handleKernel, this);\n    }\n    /**\n     * The current editor used by the history manager.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(value) {\n        if (this._editor === value) {\n            return;\n        }\n        const prev = this._editor;\n        if (prev) {\n            prev.edgeRequested.disconnect(this.onEdgeRequest, this);\n            prev.model.value.changed.disconnect(this.onTextChange, this);\n        }\n        this._editor = value;\n        if (value) {\n            value.edgeRequested.connect(this.onEdgeRequest, this);\n            value.model.value.changed.connect(this.onTextChange, this);\n        }\n    }\n    /**\n     * The placeholder text that a history session began with.\n     */\n    get placeholder() {\n        return this._placeholder;\n    }\n    /**\n     * Get whether the console history manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the console history manager.\n     */\n    dispose() {\n        this._isDisposed = true;\n        this._history.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Get the previous item in the console history.\n     *\n     * @param placeholder - The placeholder string that gets temporarily added\n     * to the history only for the duration of one history session. If multiple\n     * placeholders are sent within a session, only the first one is accepted.\n     *\n     * @returns A Promise for console command text or `undefined` if unavailable.\n     */\n    back(placeholder) {\n        if (!this._hasSession) {\n            this._hasSession = true;\n            this._placeholder = placeholder;\n            // Filter the history with the placeholder string.\n            this.setFilter(placeholder);\n            this._cursor = this._filtered.length - 1;\n        }\n        --this._cursor;\n        this._cursor = Math.max(0, this._cursor);\n        const content = this._filtered[this._cursor];\n        return Promise.resolve(content);\n    }\n    /**\n     * Get the next item in the console history.\n     *\n     * @param placeholder - The placeholder string that gets temporarily added\n     * to the history only for the duration of one history session. If multiple\n     * placeholders are sent within a session, only the first one is accepted.\n     *\n     * @returns A Promise for console command text or `undefined` if unavailable.\n     */\n    forward(placeholder) {\n        if (!this._hasSession) {\n            this._hasSession = true;\n            this._placeholder = placeholder;\n            // Filter the history with the placeholder string.\n            this.setFilter(placeholder);\n            this._cursor = this._filtered.length;\n        }\n        ++this._cursor;\n        this._cursor = Math.min(this._filtered.length - 1, this._cursor);\n        const content = this._filtered[this._cursor];\n        return Promise.resolve(content);\n    }\n    /**\n     * Add a new item to the bottom of history.\n     *\n     * @param item The item being added to the bottom of history.\n     *\n     * #### Notes\n     * If the item being added is undefined or empty, it is ignored. If the item\n     * being added is the same as the last item in history, it is ignored as well\n     * so that the console's history will consist of no contiguous repetitions.\n     */\n    push(item) {\n        if (item && item !== this._history[this._history.length - 1]) {\n            this._history.push(item);\n        }\n        this.reset();\n    }\n    /**\n     * Reset the history navigation state, i.e., start a new history session.\n     */\n    reset() {\n        this._cursor = this._history.length;\n        this._hasSession = false;\n        this._placeholder = '';\n    }\n    /**\n     * Populate the history collection on history reply from a kernel.\n     *\n     * @param value The kernel message history reply.\n     *\n     * #### Notes\n     * History entries have the shape:\n     * [session: number, line: number, input: string]\n     * Contiguous duplicates are stripped out of the API response.\n     */\n    onHistory(value) {\n        this._history.length = 0;\n        let last = '';\n        let current = '';\n        if (value.content.status === 'ok') {\n            for (let i = 0; i < value.content.history.length; i++) {\n                current = value.content.history[i][2];\n                if (current !== last) {\n                    this._history.push((last = current));\n                }\n            }\n        }\n        // Reset the history navigation cursor back to the bottom.\n        this._cursor = this._history.length;\n    }\n    /**\n     * Handle a text change signal from the editor.\n     */\n    onTextChange() {\n        if (this._setByHistory) {\n            this._setByHistory = false;\n            return;\n        }\n        this.reset();\n    }\n    /**\n     * Handle an edge requested signal.\n     */\n    onEdgeRequest(editor, location) {\n        const model = editor.model;\n        const source = model.value.text;\n        if (location === 'top' || location === 'topLine') {\n            void this.back(source).then(value => {\n                if (this.isDisposed || !value) {\n                    return;\n                }\n                if (model.value.text === value) {\n                    return;\n                }\n                this._setByHistory = true;\n                model.value.text = value;\n                let columnPos = 0;\n                columnPos = value.indexOf('\\n');\n                if (columnPos < 0) {\n                    columnPos = value.length;\n                }\n                editor.setCursorPosition({ line: 0, column: columnPos });\n            });\n        }\n        else {\n            void this.forward(source).then(value => {\n                if (this.isDisposed) {\n                    return;\n                }\n                const text = value || this.placeholder;\n                if (model.value.text === text) {\n                    return;\n                }\n                this._setByHistory = true;\n                model.value.text = text;\n                const pos = editor.getPositionAt(text.length);\n                if (pos) {\n                    editor.setCursorPosition(pos);\n                }\n            });\n        }\n    }\n    /**\n     * Handle the current kernel changing.\n     */\n    async _handleKernel() {\n        var _a;\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            this._history.length = 0;\n            return;\n        }\n        return kernel.requestHistory(Private.initialRequest).then(v => {\n            this.onHistory(v);\n        });\n    }\n    /**\n     * Set the filter data.\n     *\n     * @param filterStr - The string to use when filtering the data.\n     */\n    setFilter(filterStr = '') {\n        // Apply the new filter and remove contiguous duplicates.\n        this._filtered.length = 0;\n        let last = '';\n        let current = '';\n        for (let i = 0; i < this._history.length; i++) {\n            current = this._history[i];\n            if (current !== last &&\n                filterStr === current.slice(0, filterStr.length)) {\n                this._filtered.push((last = current));\n            }\n        }\n        this._filtered.push(filterStr);\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    Private.initialRequest = {\n        output: false,\n        raw: true,\n        hist_access_type: 'tail',\n        n: 500\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=history.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nconst FOREIGN_CELL_CLASS = 'jp-CodeConsole-foreignCell';\n/**\n * A handler for capturing API messages from other sessions that should be\n * rendered in a given parent.\n */\nexport class ForeignHandler {\n    /**\n     * Construct a new foreign message handler.\n     */\n    constructor(options) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this.sessionContext = options.sessionContext;\n        this.sessionContext.iopubMessage.connect(this.onIOPubMessage, this);\n        this._parent = options.parent;\n    }\n    /**\n     * Set whether the handler is able to inject foreign cells into a console.\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n    }\n    /**\n     * The foreign handler's parent receiver.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Test whether the handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the resources held by the handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Handler IOPub messages.\n     *\n     * @returns `true` if the message resulted in a new cell injection or a\n     * previously injected cell being updated and `false` for all other messages.\n     */\n    onIOPubMessage(sender, msg) {\n        var _a;\n        // Only process messages if foreign cell injection is enabled.\n        if (!this._enabled) {\n            return false;\n        }\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            return false;\n        }\n        // Check whether this message came from an external session.\n        const parent = this._parent;\n        const session = msg.parent_header.session;\n        if (session === kernel.clientId) {\n            return false;\n        }\n        const msgType = msg.header.msg_type;\n        const parentHeader = msg.parent_header;\n        const parentMsgId = parentHeader.msg_id;\n        let cell;\n        switch (msgType) {\n            case 'execute_input': {\n                const inputMsg = msg;\n                cell = this._newCell(parentMsgId);\n                const model = cell.model;\n                model.executionCount = inputMsg.content.execution_count;\n                model.value.text = inputMsg.content.code;\n                model.trusted = true;\n                parent.update();\n                return true;\n            }\n            case 'execute_result':\n            case 'display_data':\n            case 'stream':\n            case 'error': {\n                cell = this._parent.getCell(parentMsgId);\n                if (!cell) {\n                    return false;\n                }\n                const output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                cell.model.outputs.add(output);\n                parent.update();\n                return true;\n            }\n            case 'clear_output': {\n                const wait = msg.content.wait;\n                cell = this._parent.getCell(parentMsgId);\n                if (cell) {\n                    cell.model.outputs.clear(wait);\n                }\n                return true;\n            }\n            default:\n                return false;\n        }\n    }\n    /**\n     * Create a new code cell for an input originated from a foreign session.\n     */\n    _newCell(parentMsgId) {\n        const cell = this.parent.createCodeCell();\n        cell.addClass(FOREIGN_CELL_CLASS);\n        this._parent.addCell(cell, parentMsgId);\n        return cell;\n    }\n}\n//# sourceMappingURL=foreign.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Cell, CellDragUtils, CodeCell, CodeCellModel, isCodeCellModel, RawCell, RawCellModel } from '@jupyterlab/cells';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { each } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { ConsoleHistory } from './history';\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n/**\n * The data attribute added to a widget can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The class name added to console widgets.\n */\nconst CONSOLE_CLASS = 'jp-CodeConsole';\n/**\n * The class added to console cells\n */\nconst CONSOLE_CELL_CLASS = 'jp-Console-cell';\n/**\n * The class name added to the console banner.\n */\nconst BANNER_CLASS = 'jp-CodeConsole-banner';\n/**\n * The class name of the active prompt cell.\n */\nconst PROMPT_CLASS = 'jp-CodeConsole-promptCell';\n/**\n * The class name of the panel that holds cell content.\n */\nconst CONTENT_CLASS = 'jp-CodeConsole-content';\n/**\n * The class name of the panel that holds prompts.\n */\nconst INPUT_CLASS = 'jp-CodeConsole-input';\n/**\n * The timeout in ms for execution requests to the kernel.\n */\nconst EXECUTION_TIMEOUT = 250;\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * A widget containing a Jupyter console.\n *\n * #### Notes\n * The CodeConsole class is intended to be used within a ConsolePanel\n * instance. Under most circumstances, it is not instantiated by user code.\n */\nexport class CodeConsole extends Widget {\n    /**\n     * Construct a console widget.\n     */\n    constructor(options) {\n        super();\n        this._banner = null;\n        this._executed = new Signal(this);\n        this._mimetype = 'text/x-ipython';\n        this._msgIds = new Map();\n        this._msgIdCells = new Map();\n        this._promptCellCreated = new Signal(this);\n        this._dragData = null;\n        this._drag = null;\n        this._focusedCell = null;\n        this.addClass(CONSOLE_CLASS);\n        this.node.dataset[KERNEL_USER] = 'true';\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.node.tabIndex = -1; // Allow the widget to take focus.\n        // Create the panels that hold the content and input.\n        const layout = (this.layout = new PanelLayout());\n        this._cells = new ObservableList();\n        this._content = new Panel();\n        this._input = new Panel();\n        this.contentFactory =\n            options.contentFactory || CodeConsole.defaultContentFactory;\n        this.modelFactory = options.modelFactory || CodeConsole.defaultModelFactory;\n        this.rendermime = options.rendermime;\n        this.sessionContext = options.sessionContext;\n        this._mimeTypeService = options.mimeTypeService;\n        // Add top-level CSS classes.\n        this._content.addClass(CONTENT_CLASS);\n        this._input.addClass(INPUT_CLASS);\n        // Insert the content and input panes into the widget.\n        layout.addWidget(this._content);\n        layout.addWidget(this._input);\n        this._history = new ConsoleHistory({\n            sessionContext: this.sessionContext\n        });\n        void this._onKernelChanged();\n        this.sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n        this.sessionContext.statusChanged.connect(this._onKernelStatusChanged, this);\n    }\n    /**\n     * A signal emitted when the console finished executing its prompt cell.\n     */\n    get executed() {\n        return this._executed;\n    }\n    /**\n     * A signal emitted when a new prompt cell is created.\n     */\n    get promptCellCreated() {\n        return this._promptCellCreated;\n    }\n    /**\n     * The list of content cells in the console.\n     *\n     * #### Notes\n     * This list does not include the current banner or the prompt for a console.\n     * It may include previous banners as raw cells.\n     */\n    get cells() {\n        return this._cells;\n    }\n    /*\n     * The console input prompt cell.\n     */\n    get promptCell() {\n        const inputLayout = this._input.layout;\n        return inputLayout.widgets[0] || null;\n    }\n    /**\n     * Add a new cell to the content panel.\n     *\n     * @param cell - The code cell widget being added to the content panel.\n     *\n     * @param msgId - The optional execution message id for the cell.\n     *\n     * #### Notes\n     * This method is meant for use by outside classes that want to add cells to a\n     * console. It is distinct from the `inject` method in that it requires\n     * rendered code cell widgets and does not execute them (though it can store\n     * the execution message id).\n     */\n    addCell(cell, msgId) {\n        cell.addClass(CONSOLE_CELL_CLASS);\n        this._content.addWidget(cell);\n        this._cells.push(cell);\n        if (msgId) {\n            this._msgIds.set(msgId, cell);\n            this._msgIdCells.set(cell, msgId);\n        }\n        cell.disposed.connect(this._onCellDisposed, this);\n        this.update();\n    }\n    /**\n     * Add a banner cell.\n     */\n    addBanner() {\n        if (this._banner) {\n            // An old banner just becomes a normal cell now.\n            const cell = this._banner;\n            this._cells.push(this._banner);\n            cell.disposed.connect(this._onCellDisposed, this);\n        }\n        // Create the banner.\n        const model = this.modelFactory.createRawCell({});\n        model.value.text = '...';\n        const banner = (this._banner = new RawCell({\n            model,\n            contentFactory: this.contentFactory,\n            placeholder: false\n        })).initializeState();\n        banner.addClass(BANNER_CLASS);\n        banner.readOnly = true;\n        this._content.addWidget(banner);\n    }\n    /**\n     * Clear the code cells.\n     */\n    clear() {\n        // Dispose all the content cells\n        const cells = this._cells;\n        while (cells.length > 0) {\n            cells.get(0).dispose();\n        }\n    }\n    /**\n     * Create a new cell with the built-in factory.\n     */\n    createCodeCell() {\n        const factory = this.contentFactory;\n        const options = this._createCodeCellOptions();\n        const cell = factory.createCodeCell(options);\n        cell.readOnly = true;\n        cell.model.mimeType = this._mimetype;\n        return cell;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._cells.clear();\n        this._msgIdCells = null;\n        this._msgIds = null;\n        this._history.dispose();\n        super.dispose();\n    }\n    /**\n     * Execute the current prompt.\n     *\n     * @param force - Whether to force execution without checking code\n     * completeness.\n     *\n     * @param timeout - The length of time, in milliseconds, that the execution\n     * should wait for the API to determine whether code being submitted is\n     * incomplete before attempting submission anyway. The default value is `250`.\n     */\n    async execute(force = false, timeout = EXECUTION_TIMEOUT) {\n        var _a, _b;\n        if (((_b = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.status) === 'dead') {\n            return;\n        }\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            throw new Error('Cannot execute without a prompt cell');\n        }\n        promptCell.model.trusted = true;\n        if (force) {\n            // Create a new prompt cell before kernel execution to allow typeahead.\n            this.newPromptCell();\n            await this._execute(promptCell);\n            return;\n        }\n        // Check whether we should execute.\n        const shouldExecute = await this._shouldExecute(timeout);\n        if (this.isDisposed) {\n            return;\n        }\n        if (shouldExecute) {\n            // Create a new prompt cell before kernel execution to allow typeahead.\n            this.newPromptCell();\n            this.promptCell.editor.focus();\n            await this._execute(promptCell);\n        }\n        else {\n            // add a newline if we shouldn't execute\n            promptCell.editor.newIndentedLine();\n        }\n    }\n    /**\n     * Get a cell given a message id.\n     *\n     * @param msgId - The message id.\n     */\n    getCell(msgId) {\n        return this._msgIds.get(msgId);\n    }\n    /**\n     * Inject arbitrary code for the console to execute immediately.\n     *\n     * @param code - The code contents of the cell being injected.\n     *\n     * @returns A promise that indicates when the injected cell's execution ends.\n     */\n    inject(code, metadata = {}) {\n        const cell = this.createCodeCell();\n        cell.model.value.text = code;\n        for (const key of Object.keys(metadata)) {\n            cell.model.metadata.set(key, metadata[key]);\n        }\n        this.addCell(cell);\n        return this._execute(cell);\n    }\n    /**\n     * Insert a line break in the prompt cell.\n     */\n    insertLinebreak() {\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return;\n        }\n        promptCell.editor.newIndentedLine();\n    }\n    /**\n     * Replaces the selected text in the prompt cell.\n     *\n     * @param text - The text to replace the selection.\n     */\n    replaceSelection(text) {\n        var _a, _b;\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return;\n        }\n        (_b = (_a = promptCell.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n    }\n    /**\n     * Serialize the output.\n     *\n     * #### Notes\n     * This only serializes the code cells and the prompt cell if it exists, and\n     * skips any old banner cells.\n     */\n    serialize() {\n        const cells = [];\n        each(this._cells, cell => {\n            const model = cell.model;\n            if (isCodeCellModel(model)) {\n                cells.push(model.toJSON());\n            }\n        });\n        if (this.promptCell) {\n            cells.push(this.promptCell.model.toJSON());\n        }\n        return cells;\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2) ||\n            // Shift right-click gives the browser default behavior.\n            (shiftKey && button === 2)) {\n            return;\n        }\n        let target = event.target;\n        const cellFilter = (node) => node.classList.contains(CONSOLE_CELL_CLASS);\n        let cellIndex = CellDragUtils.findCell(target, this._cells, cellFilter);\n        if (cellIndex === -1) {\n            // `event.target` sometimes gives an orphaned node in\n            // Firefox 57, which can have `null` anywhere in its parent line. If we fail\n            // to find a cell using `event.target`, try again using a target\n            // reconstructed from the position of the click event.\n            target = document.elementFromPoint(event.clientX, event.clientY);\n            cellIndex = CellDragUtils.findCell(target, this._cells, cellFilter);\n        }\n        if (cellIndex === -1) {\n            return;\n        }\n        const cell = this._cells.get(cellIndex);\n        const targetArea = CellDragUtils.detectTargetArea(cell, event.target);\n        if (targetArea === 'prompt') {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: cellIndex\n            };\n            this._focusedCell = cell;\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousemove` event of widget\n     */\n    _evtMouseMove(event) {\n        const data = this._dragData;\n        if (data &&\n            CellDragUtils.shouldStartDrag(data.pressX, data.pressY, event.clientX, event.clientY)) {\n            void this._startDrag(data.index, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Start a drag event\n     */\n    _startDrag(index, clientX, clientY) {\n        const cellModel = this._focusedCell.model;\n        const selected = [cellModel.toJSON()];\n        const dragImage = CellDragUtils.createCellDragImage(this._focusedCell, selected);\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            proposedAction: 'copy',\n            supportedActions: 'copy',\n            source: this\n        });\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n        const textContent = cellModel.value.text;\n        this._drag.mimeData.setData('text/plain', textContent);\n        this._focusedCell = null;\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        return this._drag.start(clientX, clientY).then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            this._dragData = null;\n        });\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event -The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after_attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.node;\n        node.addEventListener('keydown', this, true);\n        node.addEventListener('click', this);\n        node.addEventListener('mousedown', this);\n        // Create a prompt if necessary.\n        if (!this.promptCell) {\n            this.newPromptCell();\n        }\n        else {\n            this.promptCell.editor.focus();\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('keydown', this, true);\n        node.removeEventListener('click', this);\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        const editor = this.promptCell && this.promptCell.editor;\n        if (editor) {\n            editor.focus();\n        }\n        this.update();\n    }\n    /**\n     * Make a new prompt cell.\n     */\n    newPromptCell() {\n        let promptCell = this.promptCell;\n        const input = this._input;\n        // Make the last prompt read-only, clear its signals, and move to content.\n        if (promptCell) {\n            promptCell.readOnly = true;\n            promptCell.removeClass(PROMPT_CLASS);\n            Signal.clearData(promptCell.editor);\n            const child = input.widgets[0];\n            child.parent = null;\n            this.addCell(promptCell);\n        }\n        // Create the new prompt cell.\n        const factory = this.contentFactory;\n        const options = this._createCodeCellOptions();\n        promptCell = factory.createCodeCell(options);\n        promptCell.model.mimeType = this._mimetype;\n        promptCell.addClass(PROMPT_CLASS);\n        // Add the prompt cell to the DOM, making `this.promptCell` valid again.\n        this._input.addWidget(promptCell);\n        // Suppress the default \"Enter\" key handling.\n        const editor = promptCell.editor;\n        editor.addKeydownHandler(this._onEditorKeydown);\n        this._history.editor = editor;\n        this._promptCellCreated.emit(promptCell);\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        Private.scrollToBottom(this._content.node);\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    _evtKeyDown(event) {\n        const editor = this.promptCell && this.promptCell.editor;\n        if (!editor) {\n            return;\n        }\n        if (event.keyCode === 13 && !editor.hasFocus()) {\n            event.preventDefault();\n            editor.focus();\n        }\n        else if (event.keyCode === 27 && editor.hasFocus()) {\n            // Set to command mode\n            event.preventDefault();\n            event.stopPropagation();\n            this.node.focus();\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseUp(event) {\n        if (this.promptCell &&\n            this.promptCell.node.contains(event.target)) {\n            this.promptCell.editor.focus();\n        }\n    }\n    /**\n     * Execute the code in the current prompt cell.\n     */\n    _execute(cell) {\n        const source = cell.model.value.text;\n        this._history.push(source);\n        // If the source of the console is just \"clear\", clear the console as we\n        // do in IPython or QtConsole.\n        if (source === 'clear' || source === '%clear') {\n            this.clear();\n            return Promise.resolve(void 0);\n        }\n        cell.model.contentChanged.connect(this.update, this);\n        const onSuccess = (value) => {\n            if (this.isDisposed) {\n                return;\n            }\n            if (value && value.content.status === 'ok') {\n                const content = value.content;\n                // Use deprecated payloads for backwards compatibility.\n                if (content.payload && content.payload.length) {\n                    const setNextInput = content.payload.filter(i => {\n                        return i.source === 'set_next_input';\n                    })[0];\n                    if (setNextInput) {\n                        const text = setNextInput.text;\n                        // Ignore the `replace` value and always set the next cell.\n                        cell.model.value.text = text;\n                    }\n                }\n            }\n            else if (value && value.content.status === 'error') {\n                each(this._cells, (cell) => {\n                    if (cell.model.executionCount === null) {\n                        cell.setPrompt('');\n                    }\n                });\n            }\n            cell.model.contentChanged.disconnect(this.update, this);\n            this.update();\n            this._executed.emit(new Date());\n        };\n        const onFailure = () => {\n            if (this.isDisposed) {\n                return;\n            }\n            cell.model.contentChanged.disconnect(this.update, this);\n            this.update();\n        };\n        return CodeCell.execute(cell, this.sessionContext).then(onSuccess, onFailure);\n    }\n    /**\n     * Update the console based on the kernel info.\n     */\n    _handleInfo(info) {\n        if (info.status !== 'ok') {\n            this._banner.model.value.text = 'Error in getting kernel banner';\n            return;\n        }\n        this._banner.model.value.text = info.banner;\n        const lang = info.language_info;\n        this._mimetype = this._mimeTypeService.getMimeTypeByLanguage(lang);\n        if (this.promptCell) {\n            this.promptCell.model.mimeType = this._mimetype;\n        }\n    }\n    /**\n     * Create the options used to initialize a code cell widget.\n     */\n    _createCodeCellOptions() {\n        const contentFactory = this.contentFactory;\n        const modelFactory = this.modelFactory;\n        const model = modelFactory.createCodeCell({});\n        const rendermime = this.rendermime;\n        return { model, rendermime, contentFactory, placeholder: false };\n    }\n    /**\n     * Handle cell disposed signals.\n     */\n    _onCellDisposed(sender, args) {\n        if (!this.isDisposed) {\n            this._cells.removeValue(sender);\n            const msgId = this._msgIdCells.get(sender);\n            if (msgId) {\n                this._msgIdCells.delete(sender);\n                this._msgIds.delete(msgId);\n            }\n        }\n    }\n    /**\n     * Test whether we should execute the prompt cell.\n     */\n    _shouldExecute(timeout) {\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return Promise.resolve(false);\n        }\n        const model = promptCell.model;\n        const code = model.value.text;\n        return new Promise((resolve, reject) => {\n            var _a;\n            const timer = setTimeout(() => {\n                resolve(true);\n            }, timeout);\n            const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (!kernel) {\n                resolve(false);\n                return;\n            }\n            kernel\n                .requestIsComplete({ code })\n                .then(isComplete => {\n                clearTimeout(timer);\n                if (this.isDisposed) {\n                    resolve(false);\n                }\n                if (isComplete.content.status !== 'incomplete') {\n                    resolve(true);\n                    return;\n                }\n                resolve(false);\n            })\n                .catch(() => {\n                resolve(true);\n            });\n        });\n    }\n    /**\n     * Handle a keydown event on an editor.\n     */\n    _onEditorKeydown(editor, event) {\n        // Suppress \"Enter\" events.\n        return event.keyCode === 13;\n    }\n    /**\n     * Handle a change to the kernel.\n     */\n    async _onKernelChanged() {\n        var _a;\n        this.clear();\n        if (this._banner) {\n            this._banner.dispose();\n            this._banner = null;\n        }\n        this.addBanner();\n        if ((_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) {\n            this._handleInfo(await this.sessionContext.session.kernel.info);\n        }\n    }\n    /**\n     * Handle a change to the kernel status.\n     */\n    async _onKernelStatusChanged() {\n        var _a;\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if ((kernel === null || kernel === void 0 ? void 0 : kernel.status) === 'restarting') {\n            this.addBanner();\n            this._handleInfo(await (kernel === null || kernel === void 0 ? void 0 : kernel.info));\n        }\n    }\n}\n/**\n * A namespace for CodeConsole statics.\n */\n(function (CodeConsole) {\n    /**\n     * Default implementation of `IContentFactory`.\n     */\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create a new code cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createCodeCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new CodeCell(options).initializeState();\n        }\n        /**\n         * Create a new raw cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createRawCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new RawCell(options).initializeState();\n        }\n    }\n    CodeConsole.ContentFactory = ContentFactory;\n    /**\n     * A default content factory for the code console.\n     */\n    CodeConsole.defaultContentFactory = new ContentFactory();\n    /**\n     * The default implementation of an `IModelFactory`.\n     */\n    class ModelFactory {\n        /**\n         * Create a new cell model factory.\n         */\n        constructor(options = {}) {\n            this.codeCellContentFactory =\n                options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n        }\n        /**\n         * Create a new code cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new code cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         *   If the contentFactory is not provided, the instance\n         *   `codeCellContentFactory` will be used.\n         */\n        createCodeCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this.codeCellContentFactory;\n            }\n            return new CodeCellModel(options);\n        }\n        /**\n         * Create a new raw cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new raw cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createRawCell(options) {\n            return new RawCellModel(options);\n        }\n    }\n    CodeConsole.ModelFactory = ModelFactory;\n    /**\n     * The default `ModelFactory` instance.\n     */\n    CodeConsole.defaultModelFactory = new ModelFactory({});\n})(CodeConsole || (CodeConsole = {}));\n/**\n * A namespace for console widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Jump to the bottom of a node.\n     *\n     * @param node - The scrollable element.\n     */\n    function scrollToBottom(node) {\n        node.scrollTop = node.scrollHeight - node.clientHeight;\n    }\n    Private.scrollToBottom = scrollToBottom;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { MainAreaWidget, SessionContext, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { PathExt, Time, URLExt } from '@jupyterlab/coreutils';\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { consoleIcon } from '@jupyterlab/ui-components';\nimport { Token, UUID } from '@lumino/coreutils';\nimport { Panel } from '@lumino/widgets';\nimport { CodeConsole } from './widget';\n/**\n * The class name added to console panels.\n */\nconst PANEL_CLASS = 'jp-ConsolePanel';\n/**\n * A panel which contains a console and the ability to add other children.\n */\nexport class ConsolePanel extends MainAreaWidget {\n    /**\n     * Construct a console panel.\n     */\n    constructor(options) {\n        super({ content: new Panel() });\n        this._executed = null;\n        this._connected = null;\n        this.addClass(PANEL_CLASS);\n        let { rendermime, mimeTypeService, path, basePath, name, manager, modelFactory, sessionContext, translator } = options;\n        this.translator = translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || ConsolePanel.defaultContentFactory);\n        const count = Private.count++;\n        if (!path) {\n            path = URLExt.join(basePath || '', `console-${count}-${UUID.uuid4()}`);\n        }\n        sessionContext = this._sessionContext =\n            sessionContext ||\n                new SessionContext({\n                    sessionManager: manager.sessions,\n                    specsManager: manager.kernelspecs,\n                    path,\n                    name: name || trans.__('Console %1', count),\n                    type: 'console',\n                    kernelPreference: options.kernelPreference,\n                    setBusy: options.setBusy\n                });\n        const resolver = new RenderMimeRegistry.UrlResolver({\n            session: sessionContext,\n            contents: manager.contents\n        });\n        rendermime = rendermime.clone({ resolver });\n        this.console = contentFactory.createConsole({\n            rendermime,\n            sessionContext: sessionContext,\n            mimeTypeService,\n            contentFactory,\n            modelFactory\n        });\n        this.content.addWidget(this.console);\n        void sessionContext.initialize().then(async (value) => {\n            if (value) {\n                await sessionContextDialogs.selectKernel(sessionContext);\n            }\n            this._connected = new Date();\n            this._updateTitlePanel();\n        });\n        this.console.executed.connect(this._onExecuted, this);\n        this._updateTitlePanel();\n        sessionContext.kernelChanged.connect(this._updateTitlePanel, this);\n        sessionContext.propertyChanged.connect(this._updateTitlePanel, this);\n        this.title.icon = consoleIcon;\n        this.title.closable = true;\n        this.id = `console-${count}`;\n    }\n    /**\n     * The session used by the panel.\n     */\n    get sessionContext() {\n        return this._sessionContext;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this.sessionContext.dispose();\n        this.console.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        const prompt = this.console.promptCell;\n        if (prompt) {\n            prompt.editor.focus();\n        }\n    }\n    /**\n     * Handle `'close-request'` messages.\n     */\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n    /**\n     * Handle a console execution.\n     */\n    _onExecuted(sender, args) {\n        this._executed = args;\n        this._updateTitlePanel();\n    }\n    /**\n     * Update the console panel title.\n     */\n    _updateTitlePanel() {\n        Private.updateTitle(this, this._connected, this._executed, this.translator);\n    }\n}\n/**\n * A namespace for ConsolePanel statics.\n */\n(function (ConsolePanel) {\n    /**\n     * Default implementation of `IContentFactory`.\n     */\n    class ContentFactory extends CodeConsole.ContentFactory {\n        /**\n         * Create a new console panel.\n         */\n        createConsole(options) {\n            return new CodeConsole(options);\n        }\n    }\n    ConsolePanel.ContentFactory = ContentFactory;\n    /**\n     * A default code console content factory.\n     */\n    ConsolePanel.defaultContentFactory = new ContentFactory();\n    /* tslint:disable */\n    /**\n     * The console renderer token.\n     */\n    ConsolePanel.IContentFactory = new Token('@jupyterlab/console:IContentFactory');\n    /* tslint:enable */\n})(ConsolePanel || (ConsolePanel = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The counter for new consoles.\n     */\n    Private.count = 1;\n    /**\n     * Update the title of a console panel.\n     */\n    function updateTitle(panel, connected, executed, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const sessionContext = panel.console.sessionContext.session;\n        if (sessionContext) {\n            // FIXME:\n            let caption = trans.__('Name: %1\\n', sessionContext.name) +\n                trans.__('Directory: %1\\n', PathExt.dirname(sessionContext.path)) +\n                trans.__('Kernel: %1', panel.console.sessionContext.kernelDisplayName);\n            if (connected) {\n                caption += trans.__('\\nConnected: %1', Time.format(connected.toISOString()));\n            }\n            if (executed) {\n                caption += trans.__('\\nLast Execution: %1');\n            }\n            panel.title.label = sessionContext.name;\n            panel.title.caption = caption;\n        }\n        else {\n            panel.title.label = trans.__('Console');\n            panel.title.caption = '';\n        }\n    }\n    Private.updateTitle = updateTitle;\n})(Private || (Private = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The console tracker token.\n */\nexport const IConsoleTracker = new Token('@jupyterlab/console:IConsoleTracker');\n//# sourceMappingURL=tokens.js.map"],"names":["Private","ForeignHandler","constructor","options","this","_enabled","_isDisposed","sessionContext","iopubMessage","connect","onIOPubMessage","_parent","parent","enabled","value","isDisposed","dispose","Signal","sender","msg","_a","kernel","session","parent_header","clientId","msgType","header","msg_type","parentMsgId","msg_id","cell","inputMsg","_newCell","model","executionCount","content","execution_count","text","code","trusted","update","getCell","output","Object","assign","output_type","outputs","add","wait","clear","createCodeCell","addClass","addCell","ConsoleHistory","_cursor","_hasSession","_history","_placeholder","_setByHistory","_editor","_filtered","_handleKernel","kernelChanged","editor","prev","edgeRequested","disconnect","onEdgeRequest","changed","onTextChange","placeholder","length","back","setFilter","Math","max","Promise","resolve","forward","min","push","item","reset","onHistory","last","current","status","i","history","location","source","then","columnPos","indexOf","setCursorPosition","line","column","pos","getPositionAt","async","requestHistory","initialRequest","v","filterStr","slice","raw","hist_access_type","n","CONSOLE_CELL_CLASS","PROMPT_CLASS","CodeConsole","Widget","super","_banner","_executed","_mimetype","_msgIds","Map","_msgIdCells","_promptCellCreated","_dragData","_drag","_focusedCell","node","dataset","tabIndex","layout","PanelLayout","_cells","ObservableList","_content","Panel","_input","contentFactory","defaultContentFactory","modelFactory","defaultModelFactory","rendermime","_mimeTypeService","mimeTypeService","addWidget","_onKernelChanged","statusChanged","_onKernelStatusChanged","executed","promptCellCreated","cells","promptCell","widgets","msgId","set","disposed","_onCellDisposed","addBanner","createRawCell","banner","RawCell","initializeState","readOnly","get","factory","_createCodeCellOptions","mimeType","force","timeout","_b","Error","newPromptCell","_execute","shouldExecute","_shouldExecute","focus","newIndentedLine","inject","metadata","key","keys","insertLinebreak","replaceSelection","call","serialize","each","isCodeCellModel","toJSON","_evtMouseDown","event","button","shiftKey","target","cellFilter","classList","contains","cellIndex","CellDragUtils","document","elementFromPoint","clientX","clientY","pressX","pressY","index","addEventListener","preventDefault","_evtMouseMove","data","_startDrag","cellModel","selected","dragImage","Drag","mimeData","MimeData","proposedAction","supportedActions","setData","textContent","removeEventListener","start","handleEvent","type","_evtKeyDown","_evtMouseUp","onAfterAttach","onBeforeDetach","onActivateRequest","input","removeClass","addKeydownHandler","_onEditorKeydown","emit","onUpdateRequest","scrollToBottom","keyCode","hasFocus","stopPropagation","contentChanged","CodeCell","payload","setNextInput","filter","setPrompt","Date","_handleInfo","info","lang","language_info","getMimeTypeByLanguage","args","removeValue","delete","reject","timer","setTimeout","requestIsComplete","isComplete","clearTimeout","catch","ContentFactory","Cell","ModelFactory","codeCellContentFactory","CodeCellModel","RawCellModel","scrollTop","scrollHeight","clientHeight","ConsolePanel","MainAreaWidget","_connected","path","basePath","name","manager","translator","nullTranslator","trans","load","count","URLExt","UUID","_sessionContext","SessionContext","sessionManager","sessions","specsManager","kernelspecs","__","kernelPreference","setBusy","resolver","RenderMimeRegistry","contents","clone","console","createConsole","initialize","sessionContextDialogs","_updateTitlePanel","_onExecuted","propertyChanged","title","icon","consoleIcon","closable","id","prompt","onCloseRequest","updateTitle","IContentFactory","Token","panel","connected","caption","PathExt","kernelDisplayName","Time","toISOString","label","IConsoleTracker"],"sourceRoot":""}