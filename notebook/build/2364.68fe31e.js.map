{"version":3,"file":"2364.68fe31e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, Dialog, ICommandPalette, InputDialog, ISessionContextDialogs, IToolbarWidgetRegistry, MainAreaWidget, sessionContextDialogs, showDialog, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ToolbarItems as DocToolbarItems } from '@jupyterlab/docmanager-extension';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CommandEditStatus, ExecutionIndicator, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTools, NotebookTracker, NotebookTrustStatus, NotebookWidgetFactory, StaticNotebook, ToolbarItems } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { addAboveIcon, addBelowIcon, buildIcon, copyIcon, cutIcon, duplicateIcon, moveDownIcon, moveUpIcon, notebookIcon, pasteIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.duplicateBelow = 'notebook:duplicate-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.toggleRenderSideBySideCurrentNotebook = 'notebook:toggle-render-side-by-side-current';\n    CommandIDs.setSideBySideRatio = 'notebook:set-side-by-side-ratio';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n    CommandIDs.autoClosingBrackets = 'notebook:toggle-autoclosing-brackets';\n    CommandIDs.toggleCollapseCmd = 'Collapsible_Headings:Toggle_Collapse';\n    CommandIDs.collapseAllCmd = 'Collapsible_Headings:Collapse_All';\n    CommandIDs.expandAllCmd = 'Collapsible_Headings:Expand_All';\n    CommandIDs.copyToClipboard = 'notebook:copy-to-clipboard';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The excluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * Setting Id storing the customized toolbar definition.\n */\nconst PANEL_SETTINGS = '@jupyterlab/notebook-extension:panel';\n/**\n * The id to use on the style tag for the side by side margins.\n */\nconst SIDE_BY_SIDE_STYLE_ID = 'jp-NotebookExtension-sideBySideMargins';\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin that provides a execution indicator item to the status bar.\n */\nexport const executionIndicator = {\n    id: '@jupyterlab/notebook-extension:execution-indicator',\n    autoStart: true,\n    requires: [INotebookTracker, ILabShell, ITranslator],\n    optional: [IStatusBar, ISettingRegistry],\n    activate: (app, notebookTracker, labShell, translator, statusBar, settingRegistry) => {\n        let statusbarItem;\n        let labShellCurrentChanged;\n        let statusBarDisposable;\n        const updateSettings = (settings) => {\n            var _a, _b;\n            let { showOnToolBar, showProgress } = settings;\n            if (!showOnToolBar) {\n                // Status bar mode, only one `ExecutionIndicator` is needed.\n                if (!statusBar) {\n                    // Automatically disable if statusbar missing\n                    return;\n                }\n                if (!(statusbarItem === null || statusbarItem === void 0 ? void 0 : statusbarItem.model)) {\n                    statusbarItem = new ExecutionIndicator(translator);\n                    labShellCurrentChanged = (_, change) => {\n                        const { newValue } = change;\n                        if (newValue && notebookTracker.has(newValue)) {\n                            const panel = newValue;\n                            statusbarItem.model.attachNotebook({\n                                content: panel.content,\n                                context: panel.sessionContext\n                            });\n                        }\n                    };\n                    statusBarDisposable = statusBar.registerStatusItem('@jupyterlab/notebook-extension:execution-indicator', {\n                        item: statusbarItem,\n                        align: 'left',\n                        rank: 3,\n                        isActive: () => {\n                            const current = labShell.currentWidget;\n                            return !!current && notebookTracker.has(current);\n                        }\n                    });\n                    statusbarItem.model.attachNotebook({\n                        content: (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content,\n                        context: (_b = notebookTracker.currentWidget) === null || _b === void 0 ? void 0 : _b.sessionContext\n                    });\n                    labShell.currentChanged.connect(labShellCurrentChanged);\n                    statusbarItem.disposed.connect(() => {\n                        labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    });\n                }\n                statusbarItem.model.displayOption = {\n                    showOnToolBar,\n                    showProgress\n                };\n            }\n            else {\n                //Remove old indicator widget on status bar\n                if (statusBarDisposable) {\n                    labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    statusBarDisposable.dispose();\n                }\n            }\n        };\n        if (settingRegistry) {\n            // Indicator is default in tool bar, user needs to specify its\n            // position in settings in order to have indicator on status bar.\n            const loadSettings = settingRegistry.load(trackerPlugin.id);\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(ExecutionIndicator.getSettingValue(settings));\n                settings.changed.connect(sender => updateSettings(ExecutionIndicator.getSettingValue(sender)));\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Save and Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const { context } = current;\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        window.open(url, '_blank', 'noopener');\n                    });\n                }\n                return new Promise(resolve => {\n                    window.open(url, '_blank', 'noopener');\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        let exportTo;\n        if (mainMenu) {\n            exportTo = (_a = mainMenu.fileMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-file-notebookexport';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n        }\n        void services.nbconvert.getExportFormats().then(response => {\n            if (response) {\n                const formatLabels = Private.getFormatLabels(translator);\n                // Convert export list to palette and menu items.\n                const formatList = Object.keys(response);\n                formatList.forEach(function (key) {\n                    const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                    let args = {\n                        format: key,\n                        label: labelStr,\n                        isPalette: false\n                    };\n                    if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                        if (exportTo) {\n                            exportTo.addItem({\n                                command: CommandIDs.exportToFormat,\n                                args: args\n                            });\n                        }\n                        if (palette) {\n                            args = {\n                                format: key,\n                                label: labelStr,\n                                isPalette: true\n                            };\n                            const category = trans.__('Notebook Operations');\n                            palette.addItem({\n                                command: CommandIDs.exportToFormat,\n                                category,\n                                args\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        IToolbarWidgetRegistry,\n        ITranslator\n    ],\n    optional: [ISettingRegistry],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * A plugin to copy CodeCell outputs.\n */\nconst copyOutputPlugin = {\n    id: '@jupyterlab/notebook-extensions:copy-output',\n    activate: activateCopyOutput,\n    requires: [ITranslator, INotebookTracker],\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    executionIndicator,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin,\n    copyOutputPlugin\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, toolbarRegistry, translator, settingRegistry) {\n    const preferKernelOption = PageConfig.getOption('notebookStartsKernel');\n    // If the option is not set, assume `true`\n    const preferKernelValue = preferKernelOption === '' || preferKernelOption.toLowerCase() === 'true';\n    const { commands } = app;\n    let toolbarFactory;\n    // Register notebook toolbar widgets\n    toolbarRegistry.registerFactory(FACTORY, 'save', panel => DocToolbarItems.createSaveButton(commands, panel.context.fileChanged));\n    toolbarRegistry.registerFactory(FACTORY, 'cellType', panel => ToolbarItems.createCellTypeItem(panel, translator));\n    toolbarRegistry.registerFactory(FACTORY, 'kernelName', panel => Toolbar.createKernelNameItem(panel.sessionContext, sessionContextDialogs, translator));\n    toolbarRegistry.registerFactory(FACTORY, 'executionProgress', panel => {\n        return ExecutionIndicator.createExecutionIndicatorItem(panel, translator, settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load(trackerPlugin.id));\n    });\n    if (settingRegistry) {\n        // Create the factory\n        toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, PANEL_SETTINGS, translator);\n    }\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: preferKernelValue,\n        canStartKernel: true,\n        rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        toolbarFactory,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the output copying extension\n */\nfunction activateCopyOutput(app, translator, tracker) {\n    const trans = translator.load('jupyterlab');\n    /**\n     * Copy the contents of an HTMLElement to the system clipboard\n     */\n    function copyElement(e) {\n        const sel = window.getSelection();\n        if (sel == null) {\n            return;\n        }\n        // Save the current selection.\n        const savedRanges = [];\n        for (let i = 0; i < sel.rangeCount; ++i) {\n            savedRanges[i] = sel.getRangeAt(i).cloneRange();\n        }\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand('copy');\n        // Restore the saved selection.\n        sel.removeAllRanges();\n        savedRanges.forEach(r => sel.addRange(r));\n    }\n    app.commands.addCommand(CommandIDs.copyToClipboard, {\n        label: trans.__('Copy Output to Clipboard'),\n        execute: args => {\n            var _a;\n            const cell = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n            if (cell == null) {\n                return;\n            }\n            const output = cell.outputArea.outputTracker.currentWidget;\n            if (output == null) {\n                return;\n            }\n            const outputAreaAreas = output.node.getElementsByClassName('jp-OutputArea-output');\n            if (outputAreaAreas.length > 0) {\n                const area = outputAreaAreas[0];\n                copyElement(area);\n            }\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyToClipboard,\n        selector: '.jp-OutputArea-child',\n        rank: 0\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    const setSideBySideOutputRatio = (sideBySideOutputRatio) => document.documentElement.style.setProperty('--jp-side-by-side-output-size', `${sideBySideOutputRatio}fr`);\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    fetchSettings\n        .then(settings => {\n        updateConfig(settings);\n        settings.changed.connect(() => {\n            updateConfig(settings);\n        });\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: args => {\n                var _a;\n                const codeConfig = settings.get('codeCellConfig')\n                    .composite;\n                const markdownConfig = settings.get('markdownCellConfig')\n                    .composite;\n                const rawConfig = settings.get('rawCellConfig')\n                    .composite;\n                const anyToggled = codeConfig.autoClosingBrackets ||\n                    markdownConfig.autoClosingBrackets ||\n                    rawConfig.autoClosingBrackets;\n                const toggled = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !anyToggled);\n                [\n                    codeConfig.autoClosingBrackets,\n                    markdownConfig.autoClosingBrackets,\n                    rawConfig.autoClosingBrackets\n                ] = [toggled, toggled, toggled];\n                void settings.set('codeCellConfig', codeConfig);\n                void settings.set('markdownCellConfig', markdownConfig);\n                void settings.set('rawCellConfig', rawConfig);\n            },\n            label: trans.__('Auto Close Brackets for All Notebook Cell Types'),\n            isToggled: () => ['codeCellConfig', 'markdownCellConfig', 'rawCellConfig'].some(x => settings.get(x).composite.autoClosingBrackets)\n        });\n        commands.addCommand(CommandIDs.setSideBySideRatio, {\n            label: trans.__('Set side-by-side ratio'),\n            execute: args => {\n                InputDialog.getNumber({\n                    title: trans.__('Width of the output in side-by-side mode'),\n                    value: settings.get('sideBySideOutputRatio').composite\n                })\n                    .then(result => {\n                    setSideBySideOutputRatio(result.value);\n                    if (result.value) {\n                        void settings.set('sideBySideOutputRatio', result.value);\n                    }\n                })\n                    .catch(console.error);\n            }\n        });\n    })\n        .catch((reason) => {\n        console.warn(reason.message);\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    const modelFactory = new NotebookModelFactory({\n        disableDocumentWideUndoRedo: factory.notebookConfig.disableDocumentWideUndoRedo\n    });\n    registry.addModelFactory(modelFactory);\n    addCommands(app, tracker, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            numberCellsToRenderDirectly: settings.get('numberCellsToRenderDirectly')\n                .composite,\n            remainingTimeBeforeRescheduling: settings.get('remainingTimeBeforeRescheduling').composite,\n            renderCellOnIdle: settings.get('renderCellOnIdle').composite,\n            observedTopMargin: settings.get('observedTopMargin').composite,\n            observedBottomMargin: settings.get('observedBottomMargin')\n                .composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite,\n            showEditorForReadOnlyMarkdown: settings.get('showEditorForReadOnlyMarkdown').composite,\n            disableDocumentWideUndoRedo: settings.get('experimentalDisableDocumentWideUndoRedo').composite,\n            renderingLayout: settings.get('renderingLayout').composite,\n            sideBySideLeftMarginOverride: settings.get('sideBySideLeftMarginOverride')\n                .composite,\n            sideBySideRightMarginOverride: settings.get('sideBySideRightMarginOverride').composite,\n            sideBySideOutputRatio: settings.get('sideBySideOutputRatio')\n                .composite\n        };\n        setSideBySideOutputRatio(factory.notebookConfig.sideBySideOutputRatio);\n        const sideBySideMarginStyle = `.jp-mod-sideBySide.jp-Notebook .jp-Notebook-cell { \n      margin-left: ${factory.notebookConfig.sideBySideLeftMarginOverride} !important;\n      margin-right: ${factory.notebookConfig.sideBySideRightMarginOverride} !important;`;\n        const sideBySideMarginTag = document.getElementById(SIDE_BY_SIDE_STYLE_ID);\n        if (sideBySideMarginTag) {\n            sideBySideMarginTag.innerText = sideBySideMarginStyle;\n        }\n        else {\n            document.head.insertAdjacentHTML('beforeend', `<style id=\"${SIDE_BY_SIDE_STYLE_ID}\">${sideBySideMarginStyle}}</style>`);\n        }\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        modelFactory.disableDocumentWideUndoRedo = settings.get('experimentalDisableDocumentWideUndoRedo').composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, translator, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            if (model != undefined) {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY,\n                    kernel: { name: kernelName }\n                });\n            }\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette'] || args['isContextMenu']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    return tracker;\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    const refreshCellCollapsed = (notebook) => {\n        var _a, _b;\n        for (const cell of notebook.widgets) {\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n            }\n            if (cell.model.id === ((_b = (_a = notebook.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.id)) {\n                NotebookActions.expandParent(cell, notebook);\n            }\n        }\n    };\n    const isEnabledAndHeadingSelected = () => {\n        return Private.isEnabledAndHeadingSelected(shell, tracker);\n    };\n    // Set up signal handler to keep the collapse state consistent\n    tracker.currentChanged.connect((sender, panel) => {\n        var _a, _b;\n        if (!((_b = (_a = panel === null || panel === void 0 ? void 0 : panel.content) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells)) {\n            return;\n        }\n        panel.content.model.cells.changed.connect((list, args) => {\n            // Might be overkill to refresh this every time, but\n            // it helps to keep the collapse state consistent.\n            refreshCellCollapsed(panel.content);\n        });\n        panel.content.activeCellChanged.connect((notebook, cell) => {\n            NotebookActions.expandParent(cell, notebook);\n        });\n    });\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        caption: trans.__('Cut the selected cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? cutIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        caption: trans.__('Copy the selected cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? copyIcon : ''),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        caption: trans.__('Paste cells from the clipboard'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        icon: args => (args.toolbar ? pasteIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.duplicateBelow, {\n        label: trans.__('Duplicate Cells Below'),\n        caption: trans.__('Copy the selected cells and paste them below the selection'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                NotebookActions.duplicate(current.content, 'belowSelected');\n            }\n        },\n        icon: args => (args.toolbar ? duplicateIcon : ''),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addAboveIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        caption: trans.__('Insert a cell below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addBelowIcon : undefined),\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled,\n        icon: args => (args.toolbar ? moveUpIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled,\n        icon: args => (args.toolbar ? moveDownIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleRenderSideBySideCurrentNotebook, {\n        label: trans.__('Render Side-by-Side'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                if (current.content.renderingLayout === 'side-by-side') {\n                    return NotebookActions.renderDefault(current.content);\n                }\n                return NotebookActions.renderSideBySide(current.content);\n            }\n        },\n        isEnabled,\n        isToggled: args => {\n            const current = getCurrent(tracker, shell, Object.assign(Object.assign({}, args), { activate: false }));\n            if (current) {\n                return current.content.renderingLayout === 'side-by-side';\n            }\n            else {\n                return false;\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleCollapseCmd, {\n        label: 'Toggle Collapse Notebook Heading',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleCurrentHeadingCollapse(current.content);\n            }\n        },\n        isEnabled: isEnabledAndHeadingSelected\n    });\n    commands.addCommand(CommandIDs.collapseAllCmd, {\n        label: 'Collapse All Cells',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.collapseAll(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.expandAllCmd, {\n        label: 'Expand All Headings',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.expandAllHeadings(current.content);\n            }\n        }\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust,\n        CommandIDs.toggleCollapseCmd,\n        CommandIDs.collapseAllCmd,\n        CommandIDs.expandAllCmd\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.toggleRenderSideBySideCurrentNotebook,\n        CommandIDs.setSideBySideRatio,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runCaption: (n) => trans.__('Run the selected cells and advance'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        runAllCaption: (n) => trans.__('Run the all notebook cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        restartAndRunAllCaption: (n) => trans.__('Restart the kernel, then re-run the whole notebook'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndHeadingSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        if (!(content.activeCell instanceof MarkdownCell)) {\n            return false;\n        }\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndHeadingSelected = isEnabledAndHeadingSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","duplicateBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","toggleRenderSideBySideCurrentNotebook","setSideBySideRatio","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","autoClosingBrackets","toggleCollapseCmd","collapseAllCmd","expandAllCmd","copyToClipboard","FACTORY","FORMAT_EXCLUDE","SIDE_BY_SIDE_STYLE_ID","trackerPlugin","provides","INotebookWidgetFactory","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","setSideBySideOutputRatio","sideBySideOutputRatio","document","documentElement","style","setProperty","Promise","reject","Error","then","settings","updateConfig","changed","addCommand","execute","args","_a","codeConfig","get","composite","markdownConfig","rawConfig","anyToggled","toggled","set","label","__","isToggled","some","x","InputDialog","title","value","result","catch","console","error","reason","warn","message","updateTracker","editorConfig","notebookConfig","kernelShutdown","shutdownOnClose","restore","command","panel","when","ready","registry","docRegistry","modelFactory","NotebookModelFactory","disableDocumentWideUndoRedo","addModelFactory","shell","sessionContextDialogs","isEnabled","Private","isEnabledAndSingleSelected","currentChanged","sender","_b","model","cells","list","notebook","cell","widgets","MarkdownCell","headingCollapsed","NotebookActions","activeCell","refreshCellCollapsed","activeCellChanged","current","getCurrent","currentWidget","activeCellIndex","length","fileName","showDialog","body","buttons","Dialog","button","accept","shutdown","dispose","save","restarted","executed","kernel","session","caption","icon","toolbar","cutIcon","undefined","copyIcon","pasteIcon","duplicateIcon","addAboveIcon","addBelowIcon","moveUpIcon","moveDownIcon","mode","selectKernel","reconnect","renderingLayout","text","isEnabledAndHeadingSelected","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","options","widget","setConfig","code","StaticNotebook","markdown","raw","scrollPastEnd","defaultCell","recordTiming","numberCellsToRenderDirectly","remainingTimeBeforeRescheduling","renderCellOnIdle","observedTopMargin","observedBottomMargin","maxNumberOutputs","showEditorForReadOnlyMarkdown","sideBySideLeftMarginOverride","sideBySideRightMarginOverride","sideBySideMarginStyle","sideBySideMarginTag","getElementById","innerText","head","insertAdjacentHTML","widgetCreated","iconClass","iconLabel","pathChanged","add","editMenu","undoers","undo","editor","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","kernelMenu","kernelUsers","interruptKernel","resolve","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","viewMenu","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runCaption","runAllLabel","runAllCaption","restartAndRunAllLabel","restartAndRunAllCaption","restartAndRunAll","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","notebookIcon","cwd","defaultBrowser","disposables","onSpecsChanged","DisposableSet","rank","default","Infinity","spec","kernelIconUrl","resources","isLauncher","metadata","JSONExt","specsChanged","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","nbconvert","getExportFormats","response","rawFormatExclude","optionValueArray","formatList","keys","formatLabels","getFormatLabels","key","indexOf","altOption","toUpperCase","substr","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","open","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","registerStatusItem","align","isActive","executionIndicator","ILabShell","notebookTracker","labShell","statusbarItem","labShellCurrentChanged","statusBarDisposable","updateSettings","showOnToolBar","showProgress","disconnect","ExecutionIndicator","change","newValue","has","attachNotebook","disposed","displayOption","loadSettings","all","restored","exportPlugin","exportTo","formatLabel","url","PageConfig","format","download","dirty","readOnly","window","items","find","submenu","capCaseKey","labelStr","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","IToolbarWidgetRegistry","contentFactory","toolbarRegistry","preferKernelOption","preferKernelValue","toLowerCase","toolbarFactory","registerFactory","fileChanged","ToolbarItems","Toolbar","createToolbarFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","clonedOutputs","WidgetTracker","index","async","findWidget","ClonedOutputArea","MainAreaWidget","addSibling","ref","updateCloned","codeConsolePlugin","toJSON","selection","getSelection","start","end","column","line","getOffsetAt","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","slice","join","reply","requestIsComplete","status","setCursorPosition","insertMode","copyOutputPlugin","output","outputArea","outputTracker","outputAreaAreas","node","getElementsByClassName","e","sel","savedRanges","i","rangeCount","getRangeAt","cloneRange","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","r","copyElement","contextMenu","selector","activateById","preferredLanguage","defaultKernelLanguage","isSelected","nullTranslator","html","latex","pdf","rst","script","slides","Panel","constructor","super","this","_cell","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c"],"sourceRoot":""}