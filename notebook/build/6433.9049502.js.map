{"version":3,"file":"6433.9049502.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/services/lib/kernel/serialize.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/async-mutex/index.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernelspecs.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = exports.deserialize = void 0;\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nfunction deserialize(data) {\n    let value;\n    if (typeof data === 'string') {\n        value = JSON.parse(data);\n    }\n    else {\n        value = deserializeBinary(data);\n    }\n    return value;\n}\nexports.deserialize = deserialize;\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nfunction serialize(msg) {\n    var _a;\n    let value;\n    if ((_a = msg.buffers) === null || _a === void 0 ? void 0 : _a.length) {\n        value = serializeBinary(msg);\n    }\n    else {\n        value = JSON.stringify(msg);\n    }\n    return value;\n}\nexports.serialize = serialize;\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf) {\n    const data = new DataView(buf);\n    // read the header: 1 + nbufs 32b integers\n    const nbufs = data.getUint32(0);\n    const offsets = [];\n    if (nbufs < 2) {\n        throw new Error('Invalid incoming Kernel Message');\n    }\n    for (let i = 1; i <= nbufs; i++) {\n        offsets.push(data.getUint32(i * 4));\n    }\n    const jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n    const msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n    // the remaining chunks are stored as DataViews in msg.buffers\n    msg.buffers = [];\n    for (let i = 1; i < nbufs; i++) {\n        const start = offsets[i];\n        const stop = offsets[i + 1] || buf.byteLength;\n        msg.buffers.push(new DataView(buf.slice(start, stop)));\n    }\n    return msg;\n}\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg) {\n    const offsets = [];\n    const buffers = [];\n    const encoder = new TextEncoder();\n    let origBuffers = [];\n    if (msg.buffers !== undefined) {\n        origBuffers = msg.buffers;\n        delete msg['buffers'];\n    }\n    const jsonUtf8 = encoder.encode(JSON.stringify(msg));\n    buffers.push(jsonUtf8.buffer);\n    for (let i = 0; i < origBuffers.length; i++) {\n        // msg.buffers elements could be either views or ArrayBuffers\n        // buffers elements are ArrayBuffers\n        const b = origBuffers[i];\n        buffers.push(ArrayBuffer.isView(b) ? b.buffer : b);\n    }\n    const nbufs = buffers.length;\n    offsets.push(4 * (nbufs + 1));\n    for (let i = 0; i + 1 < buffers.length; i++) {\n        offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n    }\n    const msgBuf = new Uint8Array(offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength);\n    // use DataView.setUint32 for network byte-order\n    const view = new DataView(msgBuf.buffer);\n    // write nbufs to first 4 bytes\n    view.setUint32(0, nbufs);\n    // write offsets to next 4 * nbufs bytes\n    for (let i = 0; i < offsets.length; i++) {\n        view.setUint32(4 * (i + 1), offsets[i]);\n    }\n    // write all the buffers at their respective offsets\n    for (let i = 0; i < buffers.length; i++) {\n        msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n    }\n    return msgBuf.buffer;\n}\n//# sourceMappingURL=serialize.js.map","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, location, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._location = location;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The location in the virtual filesystem from which the kernel was started.\n     */\n    get location() {\n        return this._location;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimic ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execute result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        if (content.store_history) {\n            this._executionCount++;\n        }\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        if (content.store_history) {\n            this._history.push([0, 0, content.code]);\n        }\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n}\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_maxConcurrency, _cancelError = E_CANCELED) {\n        this._maxConcurrency = _maxConcurrency;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._waiters = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    acquire() {\n        const locked = this.isLocked();\n        const ticketPromise = new Promise((resolve, reject) => this._queue.push({ resolve, reject }));\n        if (!locked)\n            this._dispatch();\n        return ticketPromise;\n    }\n    runExclusive(callback) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire();\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock() {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            if (!this.isLocked()) {\n                return Promise.resolve();\n            }\n            const waitPromise = new Promise((resolve) => this._waiters.push({ resolve }));\n            return waitPromise;\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            const releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    }\n    cancel() {\n        this._queue.forEach((ticket) => ticket.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatch() {\n        const nextTicket = this._queue.shift();\n        if (!nextTicket)\n            return;\n        let released = false;\n        this._currentReleaser = () => {\n            if (released)\n                return;\n            released = true;\n            this._value++;\n            this._resolveWaiters();\n            this._dispatch();\n        };\n        nextTicket.resolve([this._value--, this._currentReleaser]);\n    }\n    _resolveWaiters() {\n        this._waiters.forEach((waiter) => waiter.resolve());\n        this._waiters = [];\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n        return this._semaphore.waitForUnlock();\n    }\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    release() {\n        this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: () => new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            let isTimeout = false;\n            const handle = setTimeout(() => {\n                isTimeout = true;\n                reject(timeoutError);\n            }, timeout);\n            try {\n                const ticket = yield sync.acquire();\n                if (isTimeout) {\n                    const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                    release();\n                }\n                else {\n                    clearTimeout(handle);\n                    resolve(ticket);\n                }\n            }\n            catch (e) {\n                if (!isTimeout) {\n                    clearTimeout(handle);\n                    reject(e);\n                }\n            }\n        })),\n        runExclusive(callback) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire();\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n        release() {\n            sync.release();\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: () => sync.waitForUnlock(),\n        isLocked: () => sync.isLocked(),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import { ObservableMap } from '@jupyterlab/observables';\nimport { deserialize, serialize } from '@jupyterlab/services/lib/kernel/serialize';\nimport { UUID } from '@lumino/coreutils';\nimport { Server as WebSocketServer } from 'mock-socket';\nimport { Mutex } from 'async-mutex';\nimport { PageConfig } from '@jupyterlab/coreutils';\n/**\n * A class to handle requests to /api/kernels\n */\nexport class Kernels {\n    /**\n     * Construct a new Kernels\n     *\n     * @param options The instantiation options\n     */\n    constructor(options) {\n        this._kernels = new ObservableMap();\n        this._clients = new ObservableMap();\n        this._kernelClients = new ObservableMap();\n        const { kernelspecs } = options;\n        this._kernelspecs = kernelspecs;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param options The kernel start options.\n     */\n    async startNew(options) {\n        const { id, name, location } = options;\n        const factory = this._kernelspecs.factories.get(name);\n        // bail if there is no factory associated with the requested kernel\n        if (!factory) {\n            return { id, name };\n        }\n        // create a synchronization mechanism to allow only one message\n        // to be processed at a time\n        const mutex = new Mutex();\n        // hook a new client to a kernel\n        const hook = (kernelId, clientId, socket) => {\n            var _a;\n            const kernel = this._kernels.get(kernelId);\n            if (!kernel) {\n                throw Error(`No kernel ${kernelId}`);\n            }\n            this._clients.set(clientId, socket);\n            (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.add(clientId);\n            const processMsg = async (msg) => {\n                await mutex.runExclusive(async () => {\n                    await kernel.handleMessage(msg);\n                });\n            };\n            socket.on('message', async (message) => {\n                let msg;\n                if (message instanceof ArrayBuffer) {\n                    message = new Uint8Array(message).buffer;\n                    msg = deserialize(message);\n                }\n                else if (typeof message === 'string') {\n                    msg = deserialize(message);\n                }\n                else {\n                    return;\n                }\n                // TODO Find a better solution for this?\n                // input-reply is asynchronous, must not be processed like other messages\n                if (msg.header.msg_type === 'input_reply') {\n                    kernel.handleMessage(msg);\n                }\n                else {\n                    void processMsg(msg);\n                }\n            });\n            const removeClient = () => {\n                var _a;\n                this._clients.delete(clientId);\n                (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n            };\n            kernel.disposed.connect(removeClient);\n            // TODO: check whether this is called\n            // https://github.com/thoov/mock-socket/issues/298\n            // https://github.com/jupyterlab/jupyterlab/blob/6bc884a7a8ed73c615ce72ba097bdb790482b5bf/packages/services/src/kernel/default.ts#L1245\n            socket.onclose = removeClient;\n        };\n        // ensure kernel id\n        const kernelId = id !== null && id !== void 0 ? id : UUID.uuid4();\n        // There is one server per kernel which handles multiple clients\n        const kernelUrl = `${Kernels.WS_BASE_URL}api/kernels/${kernelId}/channels`;\n        const runningKernel = this._kernels.get(kernelId);\n        if (runningKernel) {\n            return {\n                id: runningKernel.id,\n                name: runningKernel.name,\n            };\n        }\n        // start the kernel\n        const sendMessage = (msg) => {\n            const clientId = msg.header.session;\n            const socket = this._clients.get(clientId);\n            if (!socket) {\n                console.warn(`Trying to send message on removed socket for kernel ${kernelId}`);\n                return;\n            }\n            const message = serialize(msg);\n            // process iopub messages\n            if (msg.channel === 'iopub') {\n                const clients = this._kernelClients.get(kernelId);\n                clients === null || clients === void 0 ? void 0 : clients.forEach((id) => {\n                    var _a;\n                    (_a = this._clients.get(id)) === null || _a === void 0 ? void 0 : _a.send(message);\n                });\n                return;\n            }\n            socket.send(message);\n        };\n        const kernel = await factory({\n            id: kernelId,\n            sendMessage,\n            name,\n            location,\n        });\n        await kernel.ready;\n        this._kernels.set(kernelId, kernel);\n        this._kernelClients.set(kernelId, new Set());\n        // create the websocket server for the kernel\n        const wsServer = new WebSocketServer(kernelUrl);\n        wsServer.on('connection', (socket) => {\n            var _a;\n            const url = new URL(socket.url);\n            const clientId = (_a = url.searchParams.get('session_id')) !== null && _a !== void 0 ? _a : '';\n            hook(kernelId, clientId, socket);\n        });\n        // clean up closed connection\n        wsServer.on('close', () => {\n            this._clients.keys().forEach((clientId) => {\n                var _a;\n                const socket = this._clients.get(clientId);\n                if ((socket === null || socket === void 0 ? void 0 : socket.readyState) === WebSocket.CLOSED) {\n                    this._clients.delete(clientId);\n                    (_a = this._kernelClients.get(kernelId)) === null || _a === void 0 ? void 0 : _a.delete(clientId);\n                }\n            });\n        });\n        // cleanup on kernel shutdown\n        kernel.disposed.connect(() => {\n            wsServer.close();\n            this._kernels.delete(kernelId);\n            this._kernelClients.delete(kernelId);\n        });\n        return {\n            id: kernel.id,\n            name: kernel.name,\n        };\n    }\n    /**\n     * Restart a kernel.\n     *\n     * @param kernelId The kernel id.\n     */\n    async restart(kernelId) {\n        const kernel = this._kernels.get(kernelId);\n        if (!kernel) {\n            throw Error(`Kernel ${kernelId} does not exist`);\n        }\n        const { id, name, location } = kernel;\n        kernel.dispose();\n        return this.startNew({ id, name, location });\n    }\n    /**\n     * Shut down a kernel.\n     *\n     * @param id The kernel id.\n     */\n    async shutdown(id) {\n        var _a;\n        (_a = this._kernels.delete(id)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n/**\n * A namespace for Kernels statics.\n */\n(function (Kernels) {\n    /**\n     * The base url for the Kernels manager\n     */\n    Kernels.WS_BASE_URL = PageConfig.getBaseUrl().replace(/^http/, 'ws');\n})(Kernels || (Kernels = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The kernel name of last resort.\n */\nexport const FALLBACK_KERNEL = 'javascript';\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernel:IKernelSpecs');\n","import { PageConfig } from '@jupyterlab/coreutils';\nimport { FALLBACK_KERNEL } from './tokens';\n/**\n * A class to handle requests to /api/kernelspecs\n */\nexport class KernelSpecs {\n    constructor() {\n        this._specs = new Map();\n        this._factories = new Map();\n    }\n    /**\n     * Get the kernel specs.\n     */\n    get specs() {\n        if (this._specs.size === 0) {\n            return null;\n        }\n        return {\n            default: this.defaultKernelName,\n            kernelspecs: Object.fromEntries(this._specs),\n        };\n    }\n    /**\n     * Get the default kernel name.\n     */\n    get defaultKernelName() {\n        let defaultKernelName = PageConfig.getOption('defaultKernelName');\n        if (!defaultKernelName && this._specs.size) {\n            const keys = Array.from(this._specs.keys());\n            keys.sort();\n            defaultKernelName = keys[0];\n        }\n        return defaultKernelName || FALLBACK_KERNEL;\n    }\n    /**\n     * Get the kernel factories for the current kernels.\n     */\n    get factories() {\n        return this._factories;\n    }\n    /**\n     * Register a new kernel.\n     *\n     * @param options The options to register a new kernel.\n     */\n    register(options) {\n        const { spec, create } = options;\n        this._specs.set(spec.name, spec);\n        this._factories.set(spec.name, create);\n    }\n}\n"],"names":["Object","defineProperty","exports","value","serialize","deserialize","data","JSON","parse","buf","DataView","nbufs","getUint32","offsets","Error","i","push","jsonBytes","Uint8Array","slice","msg","TextDecoder","decode","buffers","start","stop","byteLength","deserializeBinary","_a","length","encoder","TextEncoder","origBuffers","undefined","jsonUtf8","encode","stringify","buffer","b","ArrayBuffer","isView","msgBuf","view","setUint32","set","serializeBinary","BaseKernel","constructor","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","_parent","id","name","location","sendMessage","_id","_name","_location","_sendMessage","ready","Promise","resolve","isDisposed","disposed","executionCount","parentHeader","parent","dispose","emit","async","_busy","header","msg_type","_kernelInfo","_execute","inputReply","content","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","stream","parentHeaderValue","message","KernelMessage","channel","msgType","session","displayData","_b","metadata","inputRequest","publishExecuteResult","publishExecuteError","updateDisplayData","clearOutput","handleComm","type","execution_state","kernelInfoRequest","historyMsg","status","history","_executeInput","code","execution_count","executeMsg","store_history","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","E_CANCELED","__awaiter$2","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Semaphore","_maxConcurrency","_cancelError","_queue","_waiters","_value","acquire","locked","isLocked","ticketPromise","_dispatch","runExclusive","callback","release","waitForUnlock","_currentReleaser","releaser","cancel","forEach","ticket","nextTicket","shift","released","_resolveWaiters","waiter","Mutex","cancelError","_semaphore","Kernels","_kernels","ObservableMap","_clients","_kernelClients","kernelspecs","_kernelspecs","factory","factories","get","mutex","hook","kernelId","clientId","socket","kernel","add","on","handleMessage","processMsg","removeClient","delete","connect","onclose","UUID","kernelUrl","WS_BASE_URL","runningKernel","console","warn","send","clients","Set","wsServer","URL","url","searchParams","keys","readyState","WebSocket","CLOSED","close","startNew","PageConfig","replace","IKernels","Token","FALLBACK_KERNEL","IKernelSpecs","KernelSpecs","_specs","Map","_factories","specs","size","default","defaultKernelName","fromEntries","Array","from","sort","register","spec","create"],"sourceRoot":""}