{"version":3,"file":"2469.69de3fe.js","mappings":"yMAKO,MAAMA,UAAyB,EAAAC,WAMlCC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,UAAY,IAAIC,SAAS,SAAU,OAAQ,6BAChDF,KAAKG,OAAS,IAAI,EAAAC,gBAElBJ,KAAKK,QAAUC,SAASC,cAAc,UACtCP,KAAKK,QAAQG,MAAMC,WAAa,SAChCT,KAAKK,QAAQG,MAAME,SAAW,WAE9BV,KAAKK,QAAQG,MAAMG,IAAM,YACzBX,KAAKK,QAAQO,OAASC,gBACZb,KAAKc,cACXd,KAAKG,OAAOY,UACZC,OAAOC,iBAAiB,WAAYC,IAChC,MAAMC,EAAMD,EAAEE,KACd,GAAkB,WAAdD,EAAIE,MAAoB,CACxB,MAAMC,EAAUH,EAChBnB,KAAKuB,OAAOD,QAIxBhB,SAASkB,KAAKC,YAAYzB,KAAKK,SAKnCqB,UACQ1B,KAAK2B,aAGT3B,KAAKK,QAAQuB,SACb7B,MAAM2B,WAKNG,YACA,OAAO7B,KAAKG,OAAO2B,QAKvBjB,0BAyBI,MAxBgB,CACZkB,eAAgB,aAChBC,uBAAwB,QACxBC,cAAe,CACXC,gBAAiB,CACbC,KAAM,cAEVC,eAAgB,MAChBC,SAAU,kBACVF,KAAM,aACNG,mBAAoB,aACpBC,eAAgB,aAChBC,QAAS,UAEbC,iBAAkB,MAClBC,OAAQ,KACRC,OAAQ,6CACRC,WAAY,CACR,CACIC,KAAM,oBACNC,IAAK,gDAWrBjC,qBAAqBS,GACjB,MAAM,KAAEyB,GAASzB,EACjB,IACI,MAAM0B,EAAShD,KAAKiD,MAAMF,GAQ1B,OAPA/C,KAAKkD,qBAAqB,CACtBC,gBAAiBnD,KAAKoD,eACtBhC,KAAM,CACF,aAAc4B,GAElBK,SAAU,KAEP,CACHX,OAAQ,KACRS,gBAAiBnD,KAAKoD,eACtBE,iBAAkB,IAG1B,MAAOpC,GACH,MAAM,KAAEiB,EAAI,MAAEoB,EAAK,QAAEC,GAAYtC,EAMjC,OALAlB,KAAKyD,oBAAoB,CACrBC,MAAOvB,EACPwB,OAAQH,EACRI,UAAW,CAAC,GAAGL,OAEZ,CACHb,OAAQ,QACRS,gBAAiBnD,KAAKoD,eACtBM,MAAOvB,EACPwB,OAAQH,EACRI,UAAW,CAAC,GAAGL,OAS3B1C,sBAAsBS,GAClB,IAAIuC,EAAIC,EAGR,MAAMC,EAAO/D,KAAKC,UAAUD,KAAKK,QAAQ2D,cAAe,wBAClD,KAAEjB,EAAI,WAAEkB,GAAe3C,EAEvB4C,EAA2B,QAAnBJ,GADqD,QAApDD,EAAKd,EAAKoB,MAAM,EAAGF,GAAYG,MAAM,iBAA8B,IAAPP,EAAgBA,EAAK,IACvE,UAAuB,IAAPC,EAAgBA,EAAK,GAE9D,MAAO,CACHO,QAFYN,EAAKO,QAAQC,GAAMA,EAAEC,WAAWN,KAG5CO,aAAcR,EAAaC,EAAKQ,OAChCC,WAAYV,EACZZ,SAAU,GACVX,OAAQ,MAUhB7B,qBAAqBS,GACjB,MAAM,IAAIsD,MAAM,mBASpB/D,wBAAwBS,GACpB,MAAM,IAAIsD,MAAM,mBASpB/D,sBAAsBS,GAClB,MAAM,IAAIsD,MAAM,mBAOpBC,WAAWvD,GACP,MAAM,IAAIsD,MAAM,mBAOpB/D,eAAeM,GACX,MAAM,IAAIyD,MAAM,mBAOpB/D,cAAcM,GACV,MAAM,IAAIyD,MAAM,mBAOpB/D,gBAAgBM,GACZ,MAAM,IAAIyD,MAAM,mBAOpB3B,MAAMF,GACF,OAAO/C,KAAKC,UAAUD,KAAKK,QAAQ2D,cAAejB,GAOtDlC,oBACSb,KAAKK,QAAQ2D,eAGlBhE,KAAKC,UAAUD,KAAKK,QAAQ2D,cAAe","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/kernel.js"],"sourcesContent":["import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript',\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017',\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite',\n                },\n            ],\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        try {\n            const result = this._eval(code);\n            this.publishExecuteResult({\n                execution_count: this.executionCount,\n                data: {\n                    'text/plain': result,\n                },\n                metadata: {},\n            });\n            return {\n                status: 'ok',\n                execution_count: this.executionCount,\n                user_expressions: {},\n            };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.publishExecuteError({\n                ename: name,\n                evalue: message,\n                traceback: [`${stack}`],\n            });\n            return {\n                status: 'error',\n                execution_count: this.executionCount,\n                ename: name,\n                evalue: message,\n                traceback: [`${stack}`],\n            };\n        }\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter((v) => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok',\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n"],"names":["JavaScriptKernel","BaseKernel","constructor","options","super","this","_evalFunc","Function","_ready","PromiseDelegate","_iframe","document","createElement","style","visibility","position","top","onload","async","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","dispose","isDisposed","remove","ready","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","publishExecuteResult","execution_count","executionCount","metadata","user_expressions","stack","message","publishExecuteError","ename","evalue","traceback","_a","_b","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","inputReply"],"sourceRoot":""}