{"version":3,"file":"2897.018ff57.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module settingeditor-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette, MainAreaWidget, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFormComponentRegistry, launchIcon } from '@jupyterlab/ui-components';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IJSONSettingEditorTracker, ISettingEditorTracker } from '@jupyterlab/settingeditor/lib/tokens';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { saveIcon, settingsIcon, undoIcon } from '@jupyterlab/ui-components';\n/**\n * The command IDs used by the setting editor.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.open = 'settingeditor:open';\n    CommandIDs.openJSON = 'settingeditor:open-json';\n    CommandIDs.revert = 'settingeditor:revert';\n    CommandIDs.save = 'settingeditor:save';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default setting editor extension.\n */\nconst plugin = {\n    id: '@jupyterlab/settingeditor-extension:form-ui',\n    requires: [\n        ISettingRegistry,\n        IStateDB,\n        ITranslator,\n        IFormComponentRegistry,\n        ILabStatus\n    ],\n    optional: [ILayoutRestorer, ICommandPalette, IJSONSettingEditorTracker],\n    autoStart: true,\n    provides: ISettingEditorTracker,\n    activate\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activate(app, registry, state, translator, editorRegistry, status, restorer, palette, jsonEditor) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'setting-editor';\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.open,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    const openUi = async (args) => {\n        if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n            if (!tracker.currentWidget.isAttached) {\n                shell.add(tracker.currentWidget);\n            }\n            shell.activateById(tracker.currentWidget.id);\n            return;\n        }\n        const key = plugin.id;\n        const { SettingsEditor } = await import('@jupyterlab/settingeditor');\n        const editor = new MainAreaWidget({\n            content: new SettingsEditor({\n                editorRegistry,\n                key,\n                registry,\n                state,\n                commands,\n                toSkip: [\n                    '@jupyterlab/application-extension:context-menu',\n                    '@jupyterlab/mainmenu-extension:plugin'\n                ],\n                translator,\n                status,\n                query: args.query\n            })\n        });\n        if (jsonEditor) {\n            editor.toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            editor.toolbar.addItem('open-json-editor', new CommandToolbarButton({\n                commands,\n                id: CommandIDs.openJSON,\n                icon: launchIcon,\n                label: trans.__('JSON Settings Editor')\n            }));\n        }\n        editor.id = namespace;\n        editor.title.icon = settingsIcon;\n        editor.title.label = trans.__('Settings');\n        editor.title.closable = true;\n        void tracker.add(editor);\n        shell.add(editor);\n    };\n    commands.addCommand(CommandIDs.open, {\n        execute: async (args) => {\n            registry.load(plugin.id).then(settings => {\n                var _a, _b;\n                ((_a = args.settingEditorType) !== null && _a !== void 0 ? _a : settings.get('settingEditorType').composite ===\n                    'json') ? commands.execute(CommandIDs.openJSON)\n                    : openUi({ query: (_b = args.query) !== null && _b !== void 0 ? _b : '' });\n            });\n        },\n        label: args => {\n            if (args.label) {\n                return args.label;\n            }\n            return trans.__('Advanced Settings Editor');\n        }\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.open,\n            args: { settingEditorType: 'ui' }\n        });\n    }\n    return tracker;\n}\n/**\n * The default setting editor extension.\n */\nconst jsonPlugin = {\n    id: '@jupyterlab/settingeditor-extension:plugin',\n    requires: [\n        ISettingRegistry,\n        IEditorServices,\n        IStateDB,\n        IRenderMimeRegistry,\n        ILabStatus,\n        ITranslator\n    ],\n    optional: [ILayoutRestorer, ICommandPalette],\n    autoStart: true,\n    provides: IJSONSettingEditorTracker,\n    activate: activateJSON\n};\n/**\n * Activate the setting editor extension.\n */\nfunction activateJSON(app, registry, editorServices, state, rendermime, status, translator, restorer, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const namespace = 'json-setting-editor';\n    const factoryService = editorServices.factoryService;\n    const editorFactory = factoryService.newInlineEditor;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.openJSON,\n            args: widget => ({}),\n            name: widget => namespace\n        });\n    }\n    commands.addCommand(CommandIDs.openJSON, {\n        execute: async () => {\n            if (tracker.currentWidget && !tracker.currentWidget.isDisposed) {\n                if (!tracker.currentWidget.isAttached) {\n                    shell.add(tracker.currentWidget);\n                }\n                shell.activateById(tracker.currentWidget.id);\n                return;\n            }\n            const key = plugin.id;\n            const when = app.restored;\n            const { JsonSettingEditor } = await import('@jupyterlab/settingeditor');\n            const editor = new JsonSettingEditor({\n                commands: {\n                    registry: commands,\n                    revert: CommandIDs.revert,\n                    save: CommandIDs.save\n                },\n                editorFactory,\n                key,\n                registry,\n                rendermime,\n                state,\n                translator,\n                when\n            });\n            let disposable = null;\n            // Notify the command registry when the visibility status of the setting\n            // editor's commands change. The setting editor toolbar listens for this\n            // signal from the command registry.\n            editor.commandsChanged.connect((sender, args) => {\n                args.forEach(id => {\n                    commands.notifyCommandChanged(id);\n                });\n                if (editor.canSaveRaw) {\n                    if (!disposable) {\n                        disposable = status.setDirty();\n                    }\n                }\n                else if (disposable) {\n                    disposable.dispose();\n                    disposable = null;\n                }\n                editor.disposed.connect(() => {\n                    if (disposable) {\n                        disposable.dispose();\n                    }\n                });\n            });\n            const container = new MainAreaWidget({\n                content: editor\n            });\n            container.id = namespace;\n            container.title.icon = settingsIcon;\n            container.title.label = trans.__('Advanced Settings Editor');\n            container.title.closable = true;\n            void tracker.add(container);\n            shell.add(container);\n        },\n        label: trans.__('Advanced JSON Settings Editor')\n    });\n    if (palette) {\n        palette.addItem({\n            category: trans.__('Settings'),\n            command: CommandIDs.openJSON\n        });\n    }\n    commands.addCommand(CommandIDs.revert, {\n        execute: () => {\n            var _a;\n            (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.revert();\n        },\n        icon: undoIcon,\n        label: trans.__('Revert User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canRevertRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    commands.addCommand(CommandIDs.save, {\n        execute: () => { var _a; return (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.save(); },\n        icon: saveIcon,\n        label: trans.__('Save User Settings'),\n        isEnabled: () => { var _a, _b; return (_b = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.canSaveRaw) !== null && _b !== void 0 ? _b : false; }\n    });\n    return tracker;\n}\nexport default [plugin, jsonPlugin];\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n/* tslint:enable */\n/**\n * The setting editor tracker token.\n */\nexport const IJSONSettingEditorTracker = new Token('@jupyterlab/settingeditor:IJSONSettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"names":["CommandIDs","open","openJSON","revert","save","plugin","id","requires","ISettingRegistry","IStateDB","ITranslator","IFormComponentRegistry","ILabStatus","optional","ILayoutRestorer","ICommandPalette","autoStart","provides","activate","app","registry","state","translator","editorRegistry","status","restorer","palette","jsonEditor","trans","load","commands","shell","namespace","tracker","WidgetTracker","restore","command","args","widget","name","addCommand","execute","async","then","settings","_a","_b","settingEditorType","get","composite","currentWidget","isDisposed","isAttached","add","activateById","key","SettingsEditor","editor","MainAreaWidget","content","toSkip","query","toolbar","addItem","Toolbar","CommandToolbarButton","icon","launchIcon","label","__","title","settingsIcon","closable","openUi","category","jsonPlugin","IEditorServices","IRenderMimeRegistry","editorServices","rendermime","editorFactory","factoryService","newInlineEditor","when","restored","JsonSettingEditor","disposable","commandsChanged","connect","sender","forEach","notifyCommandChanged","canSaveRaw","setDirty","dispose","disposed","container","undoIcon","isEnabled","canRevertRaw","saveIcon","ISettingEditorTracker","Token","IJSONSettingEditorTracker"],"sourceRoot":""}