{"version":3,"file":"2125.43eca11.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/json-extension/lib/component.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/json-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { InputGroup } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport * as React from 'react';\nimport Highlight from 'react-highlighter';\nimport JSONTree from 'react-json-tree';\n/**\n * A component that renders JSON data as a collapsible tree.\n */\nexport class Component extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { filter: '', value: '' };\n        this.timer = 0;\n        this.handleChange = (event) => {\n            const { value } = event.target;\n            this.setState({ value });\n            window.clearTimeout(this.timer);\n            this.timer = window.setTimeout(() => {\n                this.setState({ filter: value });\n            }, 300);\n        };\n    }\n    render() {\n        const translator = this.props.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const { data, metadata } = this.props;\n        const root = metadata && metadata.root ? metadata.root : 'root';\n        const keyPaths = this.state.filter\n            ? filterPaths(data, this.state.filter, [root])\n            : [root];\n        return (React.createElement(\"div\", { className: \"container\" },\n            React.createElement(InputGroup, { className: \"filter\", type: \"text\", placeholder: trans.__('Filterâ€¦'), onChange: this.handleChange, value: this.state.value, rightIcon: \"ui-components:search\" }),\n            React.createElement(JSONTree, { data: data, collectionLimit: 100, theme: {\n                    extend: theme,\n                    valueLabel: 'cm-variable',\n                    valueText: 'cm-string',\n                    nestedNodeItemString: 'cm-comment'\n                }, invertTheme: false, keyPath: [root], getItemString: (type, data, itemType, itemString) => Array.isArray(data) ? (\n                // Always display array type and the number of items i.e. \"[] 2 items\".\n                React.createElement(\"span\", null,\n                    itemType,\n                    \" \",\n                    itemString)) : Object.keys(data).length === 0 ? (\n                // Only display object type when it's empty i.e. \"{}\".\n                React.createElement(\"span\", null, itemType)) : (null // Upstream typings don't accept null, but it should be ok\n                ), labelRenderer: ([label, type]) => {\n                    // let className = 'cm-variable';\n                    // if (type === 'root') {\n                    //   className = 'cm-variable-2';\n                    // }\n                    // if (type === 'array') {\n                    //   className = 'cm-variable-2';\n                    // }\n                    // if (type === 'Object') {\n                    //   className = 'cm-variable-3';\n                    // }\n                    return (React.createElement(\"span\", { className: \"cm-keyword\" },\n                        React.createElement(Highlight, { search: this.state.filter, matchStyle: { backgroundColor: 'yellow' } }, `${label}: `)));\n                }, valueRenderer: raw => {\n                    let className = 'cm-string';\n                    if (typeof raw === 'number') {\n                        className = 'cm-number';\n                    }\n                    if (raw === 'true' || raw === 'false') {\n                        className = 'cm-keyword';\n                    }\n                    return (React.createElement(\"span\", { className: className },\n                        React.createElement(Highlight, { search: this.state.filter, matchStyle: { backgroundColor: 'yellow' } }, `${raw}`)));\n                }, shouldExpandNode: (keyPath, data, level) => metadata && metadata.expanded\n                    ? true\n                    : keyPaths.join(',').includes(keyPath.join(',')) })));\n    }\n}\n// Provide an invalid theme object (this is on purpose!) to invalidate the\n// react-json-tree's inline styles that override CodeMirror CSS classes\nconst theme = {\n    scheme: 'jupyter',\n    base00: 'invalid',\n    base01: 'invalid',\n    base02: 'invalid',\n    base03: 'invalid',\n    base04: 'invalid',\n    base05: 'invalid',\n    base06: 'invalid',\n    base07: 'invalid',\n    base08: 'invalid',\n    base09: 'invalid',\n    base0A: 'invalid',\n    base0B: 'invalid',\n    base0C: 'invalid',\n    base0D: 'invalid',\n    base0E: 'invalid',\n    base0F: 'invalid',\n    author: 'invalid'\n};\nfunction objectIncludes(data, query) {\n    return JSON.stringify(data).includes(query);\n}\nfunction filterPaths(data, query, parent = ['root']) {\n    if (JSONExt.isArray(data)) {\n        return data.reduce((result, item, index) => {\n            if (item && typeof item === 'object' && objectIncludes(item, query)) {\n                return [\n                    ...result,\n                    [index, ...parent].join(','),\n                    ...filterPaths(item, query, [index, ...parent])\n                ];\n            }\n            return result;\n        }, []);\n    }\n    if (JSONExt.isObject(data)) {\n        return Object.keys(data).reduce((result, key) => {\n            const item = data[key];\n            if (item &&\n                typeof item === 'object' &&\n                (key.includes(query) || objectIncludes(item, query))) {\n                return [\n                    ...result,\n                    [key, ...parent].join(','),\n                    ...filterPaths(item, query, [key, ...parent])\n                ];\n            }\n            return result;\n        }, []);\n    }\n    return [];\n}\n//# sourceMappingURL=component.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module json-extension\n */\nimport { Printing } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Component } from './component';\n/**\n * The CSS class to add to the JSON Widget.\n */\nconst CSS_CLASS = 'jp-RenderedJSON';\n/**\n * The MIME type for JSON.\n */\nexport const MIME_TYPE = 'application/json';\n/**\n * A renderer for JSON data.\n */\nexport class RenderedJSON extends Widget {\n    /**\n     * Create a new widget for rendering JSON.\n     */\n    constructor(options) {\n        super();\n        this.addClass(CSS_CLASS);\n        this.addClass('CodeMirror');\n        this.addClass('cm-s-jupyter');\n        this._mimeType = options.mimeType;\n        this.translator = options.translator || nullTranslator;\n    }\n    [Printing.symbol]() {\n        return () => Printing.printWidget(this);\n    }\n    /**\n     * Render JSON into this widget's node.\n     */\n    renderModel(model) {\n        const data = (model.data[this._mimeType] || {});\n        const metadata = (model.metadata[this._mimeType] || {});\n        return new Promise((resolve, reject) => {\n            ReactDOM.render(React.createElement(Component, { data: data, metadata: metadata, translator: this.translator }), this.node, () => {\n                resolve();\n            });\n        });\n    }\n    /**\n     * Called before the widget is detached from the DOM.\n     */\n    onBeforeDetach(msg) {\n        // Unmount the component so it can tear down.\n        ReactDOM.unmountComponentAtNode(this.node);\n    }\n}\n/**\n * A mime renderer factory for JSON data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: [MIME_TYPE],\n    createRenderer: options => new RenderedJSON(options)\n};\nconst extensions = [\n    {\n        id: '@jupyterlab/json-extension:factory',\n        rendererFactory,\n        rank: 0,\n        dataType: 'json',\n        documentWidgetFactoryOptions: {\n            name: 'JSON',\n            primaryFileType: 'json',\n            fileTypes: ['json', 'notebook', 'geojson'],\n            defaultFor: ['json']\n        }\n    }\n];\nexport default extensions;\n//# sourceMappingURL=index.js.map"],"names":["Component","constructor","super","arguments","this","state","filter","value","timer","handleChange","event","target","setState","window","clearTimeout","setTimeout","render","trans","props","translator","nullTranslator","load","data","metadata","root","keyPaths","filterPaths","className","InputGroup","type","placeholder","__","onChange","rightIcon","collectionLimit","theme","extend","valueLabel","valueText","nestedNodeItemString","invertTheme","keyPath","getItemString","itemType","itemString","Array","isArray","Object","keys","length","labelRenderer","label","search","matchStyle","backgroundColor","valueRenderer","raw","shouldExpandNode","level","expanded","join","includes","scheme","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","author","objectIncludes","query","JSON","stringify","parent","JSONExt","reduce","result","item","index","key","MIME_TYPE","RenderedJSON","Widget","options","addClass","_mimeType","mimeType","Printing","renderModel","model","Promise","resolve","reject","node","onBeforeDetach","msg","rendererFactory","safe","mimeTypes","createRenderer","id","rank","dataType","documentWidgetFactoryOptions","name","primaryFileType","fileTypes","defaultFor"],"sourceRoot":""}