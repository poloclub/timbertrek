{"version":3,"file":"62.8c19593.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module toc-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IMarkdownViewerTracker } from '@jupyterlab/markdownviewer';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { createLatexGenerator, createMarkdownGenerator, createNotebookGenerator, createPythonGenerator, createRenderedMarkdownGenerator, ITableOfContentsRegistry, TableOfContentsRegistry as Registry, TableOfContents } from '@jupyterlab/toc';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { tocIcon } from '@jupyterlab/ui-components';\nimport { CodeCell, MarkdownCell } from '@jupyterlab/cells';\n/**\n * The command IDs used by TOC item.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.runCells = 'toc:run-cells';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activates the ToC extension.\n *\n * @private\n * @param app - Jupyter application\n * @param docmanager - document manager\n * @param rendermime - rendered MIME registry\n * @param translator - translator\n * @param editorTracker - editor tracker\n * @param restorer - application layout restorer\n * @param labShell - Jupyter lab shell\n * @param markdownViewerTracker - Markdown viewer tracker\n * @param notebookTracker - notebook tracker\n * @param settingRegistry - setting registry\n * @returns table of contents registry\n */\nasync function activateTOC(app, docmanager, rendermime, translator, editorTracker, restorer, labShell, markdownViewerTracker, notebookTracker, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    // Create the ToC widget:\n    const toc = new TableOfContents({\n        docmanager,\n        rendermime,\n        translator\n    });\n    // Create the ToC registry:\n    const registry = new Registry();\n    // Add the ToC to the left area:\n    toc.title.icon = tocIcon;\n    toc.title.caption = trans.__('Table of Contents');\n    toc.id = 'table-of-contents';\n    toc.node.setAttribute('role', 'region');\n    toc.node.setAttribute('aria-label', trans.__('Table of Contents section'));\n    app.shell.add(toc, 'left', { rank: 400 });\n    app.commands.addCommand(CommandIDs.runCells, {\n        execute: args => {\n            if (!notebookTracker) {\n                return null;\n            }\n            const panel = notebookTracker.currentWidget;\n            if (panel == null) {\n                return;\n            }\n            const cells = panel.content.widgets;\n            if (cells === undefined) {\n                return;\n            }\n            const activeCell = toc.activeEntry.cellRef;\n            if (activeCell instanceof MarkdownCell) {\n                let level = activeCell.headingInfo.level;\n                for (let i = cells.indexOf(activeCell) + 1; i < cells.length; i++) {\n                    const cell = cells[i];\n                    if (cell instanceof MarkdownCell && cell.headingInfo.level <= level) {\n                        break;\n                    }\n                    if (cell instanceof CodeCell) {\n                        void CodeCell.execute(cell, panel.sessionContext);\n                    }\n                }\n            }\n            else {\n                if (activeCell instanceof CodeCell) {\n                    void CodeCell.execute(activeCell, panel.sessionContext);\n                }\n            }\n        },\n        label: trans.__('Run Cell(s)')\n    });\n    app.contextMenu.addItem({\n        selector: '.jp-tocItem',\n        command: CommandIDs.runCells\n    });\n    if (restorer) {\n        // Add the ToC widget to the application restorer:\n        restorer.add(toc, '@jupyterlab/toc:plugin');\n    }\n    // Attempt to load plugin settings:\n    let settings;\n    if (settingRegistry) {\n        try {\n            settings = await settingRegistry.load('@jupyterlab/toc-extension:plugin');\n        }\n        catch (error) {\n            console.error(`Failed to load settings for the Table of Contents extension.\\n\\n${error}`);\n        }\n    }\n    // Create a notebook generator:\n    if (notebookTracker) {\n        const notebookGenerator = createNotebookGenerator(notebookTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(notebookGenerator);\n    }\n    // Create a Markdown generator:\n    if (editorTracker) {\n        const markdownGenerator = createMarkdownGenerator(editorTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(markdownGenerator);\n        // Create a LaTeX generator:\n        const latexGenerator = createLatexGenerator(editorTracker);\n        registry.add(latexGenerator);\n        // Create a Python generator:\n        const pythonGenerator = createPythonGenerator(editorTracker);\n        registry.add(pythonGenerator);\n    }\n    // Create a rendered Markdown generator:\n    if (markdownViewerTracker) {\n        const renderedMarkdownGenerator = createRenderedMarkdownGenerator(markdownViewerTracker, toc, rendermime.sanitizer, translator, settings);\n        registry.add(renderedMarkdownGenerator);\n    }\n    // Update the ToC when the active widget changes:\n    if (labShell) {\n        labShell.currentChanged.connect(onConnect);\n    }\n    return registry;\n    /**\n     * Callback invoked when the active widget changes.\n     *\n     * @private\n     */\n    function onConnect() {\n        let widget = app.shell.currentWidget;\n        if (!widget) {\n            return;\n        }\n        let generator = registry.find(widget);\n        if (!generator) {\n            // If the previously used widget is still available, stick with it.\n            // Otherwise, set the current ToC widget to null.\n            if (toc.current && toc.current.widget.isDisposed) {\n                toc.current = null;\n            }\n            return;\n        }\n        toc.current = { widget, generator };\n    }\n}\n/**\n * Initialization data for the ToC extension.\n *\n * @private\n */\nconst extension = {\n    id: '@jupyterlab/toc:plugin',\n    autoStart: true,\n    provides: ITableOfContentsRegistry,\n    requires: [IDocumentManager, IRenderMimeRegistry, ITranslator],\n    optional: [\n        IEditorTracker,\n        ILayoutRestorer,\n        ILabShell,\n        IMarkdownViewerTracker,\n        INotebookTracker,\n        ISettingRegistry\n    ],\n    activate: activateTOC\n};\n/**\n * Exports.\n */\nexport default extension;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","runCells","id","autoStart","provides","ITableOfContentsRegistry","requires","IDocumentManager","IRenderMimeRegistry","ITranslator","optional","IEditorTracker","ILayoutRestorer","ILabShell","IMarkdownViewerTracker","INotebookTracker","ISettingRegistry","activate","async","app","docmanager","rendermime","translator","editorTracker","restorer","labShell","markdownViewerTracker","notebookTracker","settingRegistry","trans","load","toc","TableOfContents","registry","settings","title","icon","tocIcon","caption","__","node","setAttribute","shell","add","rank","commands","addCommand","execute","args","panel","currentWidget","cells","content","widgets","undefined","activeCell","activeEntry","cellRef","MarkdownCell","level","headingInfo","i","indexOf","length","cell","CodeCell","sessionContext","label","contextMenu","addItem","selector","command","error","console","notebookGenerator","createNotebookGenerator","sanitizer","markdownGenerator","createMarkdownGenerator","latexGenerator","createLatexGenerator","pythonGenerator","createPythonGenerator","renderedMarkdownGenerator","createRenderedMarkdownGenerator","currentChanged","connect","widget","generator","find","current","isDisposed"],"sourceRoot":""}