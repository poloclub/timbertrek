{"version":3,"file":"517.411ac7e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module application-extension\n */\nimport { ConnectionLost, IConnectionLost, ILabShell, ILabStatus, ILayoutRestorer, IRouter, ITreePathUpdater, JupyterFrontEnd, JupyterFrontEndContextMenu, JupyterLab, LabShell, LayoutRestorer, Router } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, IWindowResolver, MenuFactory, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IPropertyInspectorProvider, SideBarPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { buildIcon, jupyterIcon, RankedMenu } from '@jupyterlab/ui-components';\nimport { each, iter, toArray } from '@lumino/algorithm';\nimport { JSONExt, PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\n/**\n * Default context menu item rank\n */\nexport const DEFAULT_CONTEXT_ITEM_RANK = 100;\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activateNextTab = 'application:activate-next-tab';\n    CommandIDs.activatePreviousTab = 'application:activate-previous-tab';\n    CommandIDs.activateNextTabBar = 'application:activate-next-tab-bar';\n    CommandIDs.activatePreviousTabBar = 'application:activate-previous-tab-bar';\n    CommandIDs.close = 'application:close';\n    CommandIDs.closeOtherTabs = 'application:close-other-tabs';\n    CommandIDs.closeRightTabs = 'application:close-right-tabs';\n    CommandIDs.closeAll = 'application:close-all';\n    CommandIDs.setMode = 'application:set-mode';\n    CommandIDs.toggleMode = 'application:toggle-mode';\n    CommandIDs.toggleLeftArea = 'application:toggle-left-area';\n    CommandIDs.toggleRightArea = 'application:toggle-right-area';\n    CommandIDs.togglePresentationMode = 'application:toggle-presentation-mode';\n    CommandIDs.tree = 'router:tree';\n    CommandIDs.switchSidebar = 'sidebar:switch';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to register the commands for the main application.\n */\nconst mainCommands = {\n    id: '@jupyterlab/application-extension:commands',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, ICommandPalette],\n    activate: (app, translator, labShell, palette) => {\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        // Add Command to override the JLab context menu.\n        commands.addCommand(JupyterFrontEndContextMenu.contextMenu, {\n            label: trans.__('Shift+Right Click for Browser Menu'),\n            isEnabled: () => false,\n            execute: () => void 0\n        });\n        // Returns the widget associated with the most recent contextmenu event.\n        const contextMenuWidget = () => {\n            const test = (node) => !!node.dataset.id;\n            const node = app.contextMenuHitTest(test);\n            if (!node) {\n                // Fall back to active widget if path cannot be obtained from event.\n                return shell.currentWidget;\n            }\n            const matches = toArray(shell.widgets('main')).filter(widget => widget.id === node.dataset.id);\n            if (matches.length < 1) {\n                return shell.currentWidget;\n            }\n            return matches[0];\n        };\n        // Closes an array of widgets.\n        const closeWidgets = (widgets) => {\n            widgets.forEach(widget => widget.close());\n        };\n        // Find the tab area for a widget within a specific dock area.\n        const findTab = (area, widget) => {\n            switch (area.type) {\n                case 'split-area': {\n                    const iterator = iter(area.children);\n                    let tab = null;\n                    let value;\n                    do {\n                        value = iterator.next();\n                        if (value) {\n                            tab = findTab(value, widget);\n                        }\n                    } while (!tab && value);\n                    return tab;\n                }\n                case 'tab-area': {\n                    const { id } = widget;\n                    return area.widgets.some(widget => widget.id === id) ? area : null;\n                }\n                default:\n                    return null;\n            }\n        };\n        // Find the tab area for a widget within the main dock area.\n        const tabAreaFor = (widget) => {\n            var _a;\n            const layout = labShell === null || labShell === void 0 ? void 0 : labShell.saveLayout();\n            const mainArea = layout === null || layout === void 0 ? void 0 : layout.mainArea;\n            if (!mainArea || PageConfig.getOption('mode') !== 'multiple-document') {\n                return null;\n            }\n            const area = (_a = mainArea.dock) === null || _a === void 0 ? void 0 : _a.main;\n            if (!area) {\n                return null;\n            }\n            return findTab(area, widget);\n        };\n        // Returns an array of all widgets to the right of a widget in a tab area.\n        const widgetsRightOf = (widget) => {\n            const { id } = widget;\n            const tabArea = tabAreaFor(widget);\n            const widgets = tabArea ? tabArea.widgets || [] : [];\n            const index = widgets.findIndex(widget => widget.id === id);\n            if (index < 0) {\n                return [];\n            }\n            return widgets.slice(index + 1);\n        };\n        commands.addCommand(CommandIDs.close, {\n            label: () => trans.__('Close Tab'),\n            isEnabled: () => {\n                const widget = contextMenuWidget();\n                return !!widget && widget.title.closable;\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (widget) {\n                    widget.close();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.closeOtherTabs, {\n            label: () => trans.__('Close All Other Tabs'),\n            isEnabled: () => {\n                // Ensure there are at least two widgets.\n                const iterator = shell.widgets('main');\n                return !!iterator.next() && !!iterator.next();\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                const { id } = widget;\n                const otherWidgets = toArray(shell.widgets('main')).filter(widget => widget.id !== id);\n                closeWidgets(otherWidgets);\n            }\n        });\n        commands.addCommand(CommandIDs.closeRightTabs, {\n            label: () => trans.__('Close Tabs to Right'),\n            isEnabled: () => !!contextMenuWidget() &&\n                widgetsRightOf(contextMenuWidget()).length > 0,\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                closeWidgets(widgetsRightOf(widget));\n            }\n        });\n        if (labShell) {\n            commands.addCommand(CommandIDs.activateNextTab, {\n                label: trans.__('Activate Next Tab'),\n                execute: () => {\n                    labShell.activateNextTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTab, {\n                label: trans.__('Activate Previous Tab'),\n                execute: () => {\n                    labShell.activatePreviousTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activateNextTabBar, {\n                label: trans.__('Activate Next Tab Bar'),\n                execute: () => {\n                    labShell.activateNextTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTabBar, {\n                label: trans.__('Activate Previous Tab Bar'),\n                execute: () => {\n                    labShell.activatePreviousTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.closeAll, {\n                label: trans.__('Close All Tabs'),\n                execute: () => {\n                    labShell.closeAll();\n                }\n            });\n            commands.addCommand(CommandIDs.toggleLeftArea, {\n                label: () => trans.__('Show Left Sidebar'),\n                execute: () => {\n                    if (labShell.leftCollapsed) {\n                        labShell.expandLeft();\n                    }\n                    else {\n                        labShell.collapseLeft();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.leftCollapsed,\n                isVisible: () => !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.toggleRightArea, {\n                label: () => trans.__('Show Right Sidebar'),\n                execute: () => {\n                    if (labShell.rightCollapsed) {\n                        labShell.expandRight();\n                    }\n                    else {\n                        labShell.collapseRight();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.rightCollapsed,\n                isVisible: () => !labShell.isEmpty('right')\n            });\n            commands.addCommand(CommandIDs.togglePresentationMode, {\n                label: () => trans.__('Presentation Mode'),\n                execute: () => {\n                    labShell.presentationMode = !labShell.presentationMode;\n                },\n                isToggled: () => labShell.presentationMode,\n                isVisible: () => true\n            });\n            commands.addCommand(CommandIDs.setMode, {\n                isVisible: args => {\n                    const mode = args['mode'];\n                    return mode === 'single-document' || mode === 'multiple-document';\n                },\n                execute: args => {\n                    const mode = args['mode'];\n                    if (mode === 'single-document' || mode === 'multiple-document') {\n                        labShell.mode = mode;\n                        return;\n                    }\n                    throw new Error(`Unsupported application shell mode: ${mode}`);\n                }\n            });\n            commands.addCommand(CommandIDs.toggleMode, {\n                label: trans.__('Simple Interface'),\n                isToggled: () => labShell.mode === 'single-document',\n                execute: () => {\n                    const args = labShell.mode === 'multiple-document'\n                        ? { mode: 'single-document' }\n                        : { mode: 'multiple-document' };\n                    return commands.execute(CommandIDs.setMode, args);\n                }\n            });\n        }\n        if (palette) {\n            [\n                CommandIDs.activateNextTab,\n                CommandIDs.activatePreviousTab,\n                CommandIDs.activateNextTabBar,\n                CommandIDs.activatePreviousTabBar,\n                CommandIDs.close,\n                CommandIDs.closeAll,\n                CommandIDs.closeOtherTabs,\n                CommandIDs.closeRightTabs,\n                CommandIDs.toggleLeftArea,\n                CommandIDs.toggleRightArea,\n                CommandIDs.togglePresentationMode,\n                CommandIDs.toggleMode\n            ].forEach(command => palette.addItem({ command, category }));\n        }\n    }\n};\n/**\n * The main extension.\n */\nconst main = {\n    id: '@jupyterlab/application-extension:main',\n    requires: [\n        IRouter,\n        IWindowResolver,\n        ITranslator,\n        JupyterFrontEnd.ITreeResolver\n    ],\n    optional: [IConnectionLost],\n    provides: ITreePathUpdater,\n    activate: (app, router, resolver, translator, treeResolver, connectionLost) => {\n        const trans = translator.load('jupyterlab');\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${main.id} must be activated in JupyterLab.`);\n        }\n        // These two internal state variables are used to manage the two source\n        // of the tree part of the URL being updated: 1) path of the active document,\n        // 2) path of the default browser if the active main area widget isn't a document.\n        let _docTreePath = '';\n        let _defaultBrowserTreePath = '';\n        function updateTreePath(treePath) {\n            // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n            void treeResolver.paths.then(() => {\n                _defaultBrowserTreePath = treePath;\n                if (!_docTreePath) {\n                    const url = PageConfig.getUrl({ treePath });\n                    const path = URLExt.parse(url).pathname;\n                    router.navigate(path, { skipRouting: true });\n                    // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                    PageConfig.setOption('treePath', treePath);\n                }\n            });\n        }\n        // Requiring the window resolver guarantees that the application extension\n        // only loads if there is a viable window name. Otherwise, the application\n        // will short-circuit and ask the user to navigate away.\n        const workspace = resolver.name;\n        console.debug(`Starting application in workspace: \"${workspace}\"`);\n        // If there were errors registering plugins, tell the user.\n        if (app.registerPluginErrors.length !== 0) {\n            const body = (React.createElement(\"pre\", null, app.registerPluginErrors.map(e => e.message).join('\\n')));\n            void showErrorMessage(trans.__('Error Registering Plugins'), {\n                message: body\n            });\n        }\n        // If the application shell layout is modified,\n        // trigger a refresh of the commands.\n        app.shell.layoutModified.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        // Watch the mode and update the page URL to /lab or /doc to reflect the\n        // change.\n        app.shell.modeChanged.connect((_, args) => {\n            const url = PageConfig.getUrl({ mode: args });\n            const path = URLExt.parse(url).pathname;\n            router.navigate(path, { skipRouting: true });\n            // Persist this mode change to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('mode', args);\n        });\n        // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n        void treeResolver.paths.then(() => {\n            // Watch the path of the current widget in the main area and update the page\n            // URL to reflect the change.\n            app.shell.currentPathChanged.connect((_, args) => {\n                const maybeTreePath = args.newValue;\n                const treePath = maybeTreePath || _defaultBrowserTreePath;\n                const url = PageConfig.getUrl({ treePath: treePath });\n                const path = URLExt.parse(url).pathname;\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n                _docTreePath = maybeTreePath;\n            });\n        });\n        // If the connection to the server is lost, handle it with the\n        // connection lost handler.\n        connectionLost = connectionLost || ConnectionLost;\n        app.serviceManager.connectionFailure.connect((manager, error) => connectionLost(manager, error, translator));\n        const builder = app.serviceManager.builder;\n        const build = () => {\n            return builder\n                .build()\n                .then(() => {\n                return showDialog({\n                    title: trans.__('Build Complete'),\n                    body: (React.createElement(\"div\", null,\n                        trans.__('Build successfully completed, reload page?'),\n                        React.createElement(\"br\", null),\n                        trans.__('You will lose any unsaved changes.'))),\n                    buttons: [\n                        Dialog.cancelButton({\n                            label: trans.__('Reload Without Saving'),\n                            actions: ['reload']\n                        }),\n                        Dialog.okButton({ label: trans.__('Save and Reload') })\n                    ],\n                    hasClose: true\n                });\n            })\n                .then(({ button: { accept, actions } }) => {\n                if (accept) {\n                    void app.commands\n                        .execute('docmanager:save')\n                        .then(() => {\n                        router.reload();\n                    })\n                        .catch(err => {\n                        void showErrorMessage(trans.__('Save Failed'), {\n                            message: React.createElement(\"pre\", null, err.message)\n                        });\n                    });\n                }\n                else if (actions.includes('reload')) {\n                    router.reload();\n                }\n            })\n                .catch(err => {\n                void showErrorMessage(trans.__('Build Failed'), {\n                    message: React.createElement(\"pre\", null, err.message)\n                });\n            });\n        };\n        if (builder.isAvailable && builder.shouldCheck) {\n            void builder.getStatus().then(response => {\n                if (response.status === 'building') {\n                    return build();\n                }\n                if (response.status !== 'needed') {\n                    return;\n                }\n                const body = (React.createElement(\"div\", null,\n                    trans.__('JupyterLab build is suggested:'),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"pre\", null, response.message)));\n                void showDialog({\n                    title: trans.__('Build Recommended'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Build') })\n                    ]\n                }).then(result => (result.button.accept ? build() : undefined));\n            });\n        }\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * Plugin to build the context menu from the settings.\n */\nconst contextMenuPlugin = {\n    id: '@jupyterlab/application-extension:context-menu',\n    autoStart: true,\n    requires: [ISettingRegistry, ITranslator],\n    activate: (app, settingRegistry, translator) => {\n        const trans = translator.load('jupyterlab');\n        function createMenu(options) {\n            const menu = new RankedMenu(Object.assign(Object.assign({}, options), { commands: app.commands }));\n            if (options.label) {\n                menu.title.label = trans.__(options.label);\n            }\n            return menu;\n        }\n        // Load the context menu lately so plugins are loaded.\n        app.started\n            .then(() => {\n            return Private.loadSettingsContextMenu(app.contextMenu, settingRegistry, createMenu, translator);\n        })\n            .catch(reason => {\n            console.error('Failed to load context menu items from settings registry.', reason);\n        });\n    }\n};\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@jupyterlab/application-extension:dirty',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${dirty.id} must be activated in JupyterLab.`);\n        }\n        const trans = translator.load('jupyterlab');\n        const message = trans.__('Are you sure you want to exit JupyterLab?\\n\\nAny unsaved changes will be lost.');\n        // The spec for the `beforeunload` event is implemented differently by\n        // the different browser vendors. Consequently, the `event.returnValue`\n        // attribute needs to set in addition to a return value being returned.\n        // For more information, see:\n        // https://developer.mozilla.org/en/docs/Web/Events/beforeunload\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The default layout restorer provider.\n */\nconst layout = {\n    id: '@jupyterlab/application-extension:layout',\n    requires: [IStateDB, ILabShell, ISettingRegistry, ITranslator],\n    activate: (app, state, labShell, settingRegistry, translator) => {\n        const first = app.started;\n        const registry = app.commands;\n        const restorer = new LayoutRestorer({ connector: state, first, registry });\n        void restorer.fetch().then(saved => {\n            labShell.restoreLayout(PageConfig.getOption('mode'), saved);\n            labShell.layoutModified.connect(() => {\n                void restorer.save(labShell.saveLayout());\n            });\n            Private.activateSidebarSwitcher(app, labShell, settingRegistry, translator, saved);\n        });\n        return restorer;\n    },\n    autoStart: true,\n    provides: ILayoutRestorer\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab/application-extension:router',\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n    autoStart: true,\n    provides: IRouter\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyterlab/application-extension:tree-resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(lab|doc)(/workspaces/[a-zA-Z0-9-_]+)?(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.tree, {\n            execute: async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }\n        }));\n        set.add(router.register({ command: CommandIDs.tree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\n/**\n * The default URL not found extension.\n */\nconst notfound = {\n    id: '@jupyterlab/application-extension:notfound',\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    activate: (_, paths, router, translator) => {\n        const trans = translator.load('jupyterlab');\n        const bad = paths.urls.notFound;\n        if (!bad) {\n            return;\n        }\n        const base = router.base;\n        const message = trans.__('The path: %1 was not found. JupyterLab redirected to: %2', bad, base);\n        // Change the URL back to the base application URL.\n        router.navigate('');\n        void showErrorMessage(trans.__('Path Not Found'), { message });\n    },\n    autoStart: true\n};\n/**\n * Change the favicon changing based on the busy status;\n */\nconst busy = {\n    id: '@jupyterlab/application-extension:faviconbusy',\n    requires: [ILabStatus],\n    activate: async (_, status) => {\n        status.busySignal.connect((_, isBusy) => {\n            const favicon = document.querySelector(`link[rel=\"icon\"]${isBusy ? '.idle.favicon' : '.busy.favicon'}`);\n            if (!favicon) {\n                return;\n            }\n            const newFavicon = document.querySelector(`link${isBusy ? '.busy.favicon' : '.idle.favicon'}`);\n            if (!newFavicon) {\n                return;\n            }\n            // If we have the two icons with the special classes, then toggle them.\n            if (favicon !== newFavicon) {\n                favicon.rel = '';\n                newFavicon.rel = 'icon';\n                // Firefox doesn't seem to recognize just changing rel, so we also\n                // reinsert the link into the DOM.\n                newFavicon.parentNode.replaceChild(newFavicon, newFavicon);\n            }\n        });\n    },\n    autoStart: true\n};\n/**\n * The default JupyterLab application shell.\n */\nconst shell = {\n    id: '@jupyterlab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof LabShell)) {\n            throw new Error(`${shell.id} did not find a LabShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: ILabShell\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlab/application-extension:status',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${status.id} must be activated in JupyterLab.`);\n        }\n        return app.status;\n    },\n    autoStart: true,\n    provides: ILabStatus\n};\n/**\n * The default JupyterLab application-specific information provider.\n *\n * #### Notes\n * This plugin should only be used by plugins that specifically need to access\n * JupyterLab application information, e.g., listing extensions that have been\n * loaded or deferred within JupyterLab.\n */\nconst info = {\n    id: '@jupyterlab/application-extension:info',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${info.id} must be activated in JupyterLab.`);\n        }\n        return app.info;\n    },\n    autoStart: true,\n    provides: JupyterLab.IInfo\n};\n/**\n * The default JupyterLab paths dictionary provider.\n */\nconst paths = {\n    id: '@jupyterlab/apputils-extension:paths',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default property inspector provider.\n */\nconst propertyInspector = {\n    id: '@jupyterlab/application-extension:property-inspector',\n    autoStart: true,\n    requires: [ILabShell, ITranslator],\n    optional: [ILayoutRestorer],\n    provides: IPropertyInspectorProvider,\n    activate: (app, labshell, translator, restorer) => {\n        const trans = translator.load('jupyterlab');\n        const widget = new SideBarPropertyInspectorProvider(labshell, undefined, translator);\n        widget.title.icon = buildIcon;\n        widget.title.caption = trans.__('Property Inspector');\n        widget.id = 'jp-property-inspector';\n        labshell.add(widget, 'right', { rank: 100 });\n        if (restorer) {\n            restorer.add(widget, 'jp-property-inspector');\n        }\n        return widget;\n    }\n};\nconst JupyterLogo = {\n    id: '@jupyterlab/application-extension:logo',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, shell) => {\n        const logo = new Widget();\n        jupyterIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    contextMenuPlugin,\n    dirty,\n    main,\n    mainCommands,\n    layout,\n    router,\n    tree,\n    notfound,\n    busy,\n    shell,\n    status,\n    info,\n    paths,\n    propertyInspector,\n    JupyterLogo\n];\nexport default plugins;\nvar Private;\n(function (Private) {\n    async function displayInformation(trans) {\n        const result = await showDialog({\n            title: trans.__('Information'),\n            body: trans.__('Context menu customization has changed. You will need to reload JupyterLab to see the changes.'),\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({ label: trans.__('Reload') })\n            ]\n        });\n        if (result.button.accept) {\n            location.reload();\n        }\n    }\n    async function loadSettingsContextMenu(contextMenu, registry, menuFactory, translator) {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const pluginId = contextMenuPlugin.id;\n        let canonical;\n        let loaded = {};\n        /**\n         * Populate the plugin's schema defaults.\n         *\n         * We keep track of disabled entries in case the plugin is loaded\n         * after the menu initialization.\n         */\n        function populate(schema) {\n            var _a, _b;\n            loaded = {};\n            const pluginDefaults = Object.keys(registry.plugins)\n                .map(plugin => {\n                var _a, _b;\n                const items = (_b = (_a = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : [];\n                loaded[plugin] = items;\n                return items;\n            })\n                .concat([(_b = (_a = schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : []])\n                .reduceRight((acc, val) => SettingRegistry.reconcileItems(acc, val, true), []);\n            // Apply default value as last step to take into account overrides.json\n            // The standard default being [] as the plugin must use `jupyter.lab.menus.context`\n            // to define their default value.\n            schema.properties.contextMenu.default = SettingRegistry.reconcileItems(pluginDefaults, schema.properties.contextMenu.default, true)\n                // flatten one level\n                .sort((a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.rank) !== null && _b !== void 0 ? _b : Infinity); });\n        }\n        // Transform the plugin object to return different schema than the default.\n        registry.transform(pluginId, {\n            compose: plugin => {\n                var _a, _b, _c, _d;\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                const defaults = (_c = (_b = (_a = canonical.properties) === null || _a === void 0 ? void 0 : _a.contextMenu) === null || _b === void 0 ? void 0 : _b.default) !== null && _c !== void 0 ? _c : [];\n                const user = Object.assign(Object.assign({}, plugin.data.user), { contextMenu: (_d = plugin.data.user.contextMenu) !== null && _d !== void 0 ? _d : [] });\n                const composite = Object.assign(Object.assign({}, plugin.data.composite), { contextMenu: SettingRegistry.reconcileItems(defaults, user.contextMenu, false) });\n                plugin.data = { composite, user };\n                return plugin;\n            },\n            fetch: plugin => {\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                return {\n                    data: plugin.data,\n                    id: plugin.id,\n                    raw: plugin.raw,\n                    schema: canonical,\n                    version: plugin.version\n                };\n            }\n        });\n        // Repopulate the canonical variable after the setting registry has\n        // preloaded all initial plugins.\n        canonical = null;\n        const settings = await registry.load(pluginId);\n        const contextItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n        // Create menu item for non-disabled element\n        SettingRegistry.filterDisabledItems(contextItems).forEach(item => {\n            MenuFactory.addContextItem(Object.assign({ \n                // We have to set the default rank because Lumino is sorting the visible items\n                rank: DEFAULT_CONTEXT_ITEM_RANK }, item), contextMenu, menuFactory);\n        });\n        settings.changed.connect(() => {\n            var _a;\n            // As extension may change the context menu through API,\n            // prompt the user to reload if the menu has been updated.\n            const newItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n            if (!JSONExt.deepEqual(contextItems, newItems)) {\n                void displayInformation(trans);\n            }\n        });\n        registry.pluginChanged.connect(async (sender, plugin) => {\n            var _a, _b, _c, _d;\n            if (plugin !== pluginId) {\n                // If the plugin changed its menu.\n                const oldItems = (_a = loaded[plugin]) !== null && _a !== void 0 ? _a : [];\n                const newItems = (_c = (_b = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _b === void 0 ? void 0 : _b.context) !== null && _c !== void 0 ? _c : [];\n                if (!JSONExt.deepEqual(oldItems, newItems)) {\n                    if (loaded[plugin]) {\n                        // The plugin has changed, request the user to reload the UI\n                        await displayInformation(trans);\n                    }\n                    else {\n                        // The plugin was not yet loaded when the menu was built => update the menu\n                        loaded[plugin] = JSONExt.deepCopy(newItems);\n                        // Merge potential disabled state\n                        const toAdd = (_d = SettingRegistry.reconcileItems(newItems, contextItems, false, false)) !== null && _d !== void 0 ? _d : [];\n                        SettingRegistry.filterDisabledItems(toAdd).forEach(item => {\n                            MenuFactory.addContextItem(Object.assign({ \n                                // We have to set the default rank because Lumino is sorting the visible items\n                                rank: DEFAULT_CONTEXT_ITEM_RANK }, item), contextMenu, menuFactory);\n                        });\n                    }\n                }\n            }\n        });\n    }\n    Private.loadSettingsContextMenu = loadSettingsContextMenu;\n    function activateSidebarSwitcher(app, labShell, settingRegistry, translator, initial) {\n        const setting = '@jupyterlab/application-extension:sidebar';\n        const trans = translator.load('jupyterlab');\n        let overrides = {};\n        const update = (_, layout) => {\n            each(labShell.widgets('left'), widget => {\n                var _a;\n                if (overrides[widget.id] && overrides[widget.id] === 'right') {\n                    labShell.add(widget, 'right');\n                    if (layout && ((_a = layout.rightArea) === null || _a === void 0 ? void 0 : _a.currentWidget) === widget) {\n                        labShell.activateById(widget.id);\n                    }\n                }\n            });\n            each(labShell.widgets('right'), widget => {\n                var _a;\n                if (overrides[widget.id] && overrides[widget.id] === 'left') {\n                    labShell.add(widget, 'left');\n                    if (layout && ((_a = layout.leftArea) === null || _a === void 0 ? void 0 : _a.currentWidget) === widget) {\n                        labShell.activateById(widget.id);\n                    }\n                }\n            });\n        };\n        // Fetch overrides from the settings system.\n        void Promise.all([settingRegistry.load(setting), app.restored]).then(([settings]) => {\n            overrides = (settings.get('overrides').composite ||\n                {});\n            settings.changed.connect(settings => {\n                overrides = (settings.get('overrides').composite ||\n                    {});\n                update(labShell);\n            });\n            labShell.layoutModified.connect(update);\n            update(labShell, initial);\n        });\n        // Add a command to switch a side panels's side\n        app.commands.addCommand(CommandIDs.switchSidebar, {\n            label: trans.__('Switch Sidebar Side'),\n            execute: () => {\n                // First, try to find the correct panel based on the application\n                // context menu click. Bail if we don't find a sidebar for the widget.\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                if (!contextNode) {\n                    return;\n                }\n                const id = contextNode.dataset['id'];\n                const leftPanel = document.getElementById('jp-left-stack');\n                const node = document.getElementById(id);\n                let side;\n                if (leftPanel && node && leftPanel.contains(node)) {\n                    side = 'right';\n                }\n                else {\n                    side = 'left';\n                }\n                // Move the panel to the other side.\n                return settingRegistry.set(setting, 'overrides', Object.assign(Object.assign({}, overrides), { [id]: side }));\n            }\n        });\n    }\n    Private.activateSidebarSwitcher = activateSidebarSwitcher;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["DEFAULT_CONTEXT_ITEM_RANK","CommandIDs","activateNextTab","activatePreviousTab","activateNextTabBar","activatePreviousTabBar","close","closeOtherTabs","closeRightTabs","closeAll","setMode","toggleMode","toggleLeftArea","toggleRightArea","togglePresentationMode","tree","switchSidebar","mainCommands","id","autoStart","requires","ITranslator","optional","ILabShell","ICommandPalette","activate","app","translator","labShell","palette","commands","shell","trans","load","category","__","addCommand","JupyterFrontEndContextMenu","label","isEnabled","execute","contextMenuWidget","node","contextMenuHitTest","dataset","currentWidget","matches","toArray","widgets","filter","widget","length","closeWidgets","forEach","findTab","area","type","iterator","iter","children","value","tab","next","some","widgetsRightOf","tabArea","_a","layout","saveLayout","mainArea","PageConfig","dock","main","tabAreaFor","index","findIndex","slice","title","closable","otherWidgets","leftCollapsed","expandLeft","collapseLeft","activateById","isToggled","isVisible","isEmpty","rightCollapsed","expandRight","collapseRight","presentationMode","args","mode","Error","command","addItem","IRouter","IWindowResolver","JupyterFrontEnd","IConnectionLost","provides","ITreePathUpdater","router","resolver","treeResolver","connectionLost","JupyterLab","_docTreePath","_defaultBrowserTreePath","workspace","name","console","debug","registerPluginErrors","body","map","e","message","join","showErrorMessage","layoutModified","connect","notifyCommandChanged","modeChanged","_","url","path","URLExt","pathname","navigate","skipRouting","paths","then","currentPathChanged","maybeTreePath","newValue","treePath","ConnectionLost","serviceManager","connectionFailure","manager","error","builder","build","showDialog","buttons","Dialog","actions","hasClose","button","accept","reload","catch","err","includes","isAvailable","shouldCheck","getStatus","response","status","result","undefined","contextMenuPlugin","ISettingRegistry","settingRegistry","createMenu","options","menu","RankedMenu","Object","assign","started","Private","loadSettingsContextMenu","contextMenu","reason","dirty","window","addEventListener","event","isDirty","returnValue","IStateDB","state","first","registry","restorer","LayoutRestorer","connector","fetch","saved","restoreLayout","save","activateSidebarSwitcher","ILayoutRestorer","base","urls","Router","route","set","DisposableSet","delegate","PromiseDelegate","treePattern","RegExp","add","async","isDisposed","query","search","browser","dispose","resolve","file","register","pattern","listener","routed","DisposableDelegate","disconnect","promise","notfound","bad","notFound","busy","ILabStatus","busySignal","isBusy","favicon","document","querySelector","newFavicon","rel","parentNode","replaceChild","LabShell","info","propertyInspector","IPropertyInspectorProvider","labshell","SideBarPropertyInspectorProvider","icon","buildIcon","caption","rank","JupyterLogo","logo","Widget","jupyterIcon","container","elementPosition","margin","height","width","displayInformation","location","menuFactory","pluginId","canonical","loaded","populate","schema","_b","pluginDefaults","keys","plugins","plugin","items","context","concat","reduceRight","acc","val","SettingRegistry","properties","default","sort","a","b","Infinity","transform","compose","_c","_d","JSONExt","defaults","user","data","composite","raw","version","settings","contextItems","item","MenuFactory","changed","newItems","pluginChanged","sender","oldItems","toAdd","initial","setting","overrides","update","each","rightArea","leftArea","Promise","all","restored","get","contextNode","leftPanel","getElementById","side","contains"],"sourceRoot":""}