{"version":3,"file":"7252.0bb9471.js","mappings":"0KAgBIA,E,6EACJ,SAAWA,GACPA,EAAWC,gBAAkB,sBAC7BD,EAAWE,eAAiB,sBAFhC,CAGGF,IAAeA,EAAa,KAI/B,MAAMG,EAAU,mBAIVC,EAAS,CACXC,SAUJ,SAAkBC,EAAKC,EAAYC,EAAYC,EAAUC,GACrD,MAAMC,EAAQH,EAAWI,KAAK,eACxB,SAAEC,EAAQ,YAAEC,GAAgBR,EAElCC,EAAWQ,WAAW,EAAAC,yBACtB,MACMC,EAAU,IAAI,EAAAC,cAAc,CAC9BC,UAFc,0BAIlB,IAAIC,EAASC,OAAOC,OAAO,GAAI,EAAAC,eAAA,eAI/B,SAASC,EAAaC,GAClBJ,OAAOK,KAAKN,GAAQO,SAASC,IACzB,IAAIC,EACJJ,EAAOK,UAAUF,EAAwB,QAApBC,EAAKT,EAAOQ,UAAuB,IAAPC,EAAgBA,EAAK,SAG9E,GAAInB,EAAiB,CACjB,MAAMqB,EAAkBC,IACpBZ,EAASY,EAASC,UAClBhB,EAAQU,SAAQF,IACZD,EAAaC,EAAOS,aAI5BxB,EACKE,KAAKR,EAAO+B,IACZC,MAAMJ,IACPA,EAASK,QAAQC,SAAQ,KACrBP,EAAeC,MAEnBD,EAAeC,MAEdO,OAAOC,IACRC,QAAQC,MAAMF,EAAOG,YAI7B,MAAMC,EAAU,IAAI,EAAAC,sBAAsB,CACtCtC,WAAAA,EACAuC,KAAM3C,EACN4C,gBAAiBjC,EAAYkC,YAAY,YACzCC,UAAW,CAAC,YACZC,gBAAiB,CAAC,cAuDtB,OArDAN,EAAQO,cAAcb,SAAQ,CAACc,EAAQ3B,KAEnCA,EAAO4B,QAAQC,YAAYhB,SAAQ,KAC1BrB,EAAQsC,KAAK9B,MAGtBD,EAAaC,EAAOS,SACfjB,EAAQuC,IAAI/B,MAErBX,EAAY2C,iBAAiBb,GAEzBnC,GACKA,EAASiD,QAAQzC,EAAS,CAC3B0C,QAAS,kBACTC,KAAMnC,IAAU,CAAGoC,KAAMpC,EAAO4B,QAAQQ,KAAMjB,QAASzC,IACvD2C,KAAMrB,GAAUA,EAAO4B,QAAQQ,OAGvChD,EAASiD,WAAW9D,EAAWC,gBAAiB,CAC5C8D,MAAOpD,EAAMqD,GAAG,oBAChBC,QAASL,IACL,MAAMC,EAAOD,EAAW,KACxB,GAAoB,iBAATC,EAGX,OAAOhD,EAASoD,QAAQ,kBAAmB,CACvCJ,KAAAA,EACAjB,QAASzC,EACT+D,QAASN,EAAc,aAInC/C,EAASiD,WAAW9D,EAAWE,eAAgB,CAC3C+D,QAAS,KACL,MAAMxC,EAASR,EAAQkD,cACvB,IAAK1C,EACD,OAEJ,MAAMoC,EAAOpC,EAAO4B,QAAQQ,KAC5B,OAAOhD,EAASoD,QAAQ,kBAAmB,CACvCJ,KAAAA,EACAjB,QAAS,SACTsB,QAAS,CACLE,KAAM,kBAIlBC,UAAW,KACP,MAAM5C,EAASR,EAAQkD,cACvB,OAAS1C,GAAmD,QAAzC,EAAA6C,QAAA,QAAgB7C,EAAO4B,QAAQQ,QAAoB,GAE1EE,MAAOpD,EAAMqD,GAAG,0BAEb/C,GA7GPkB,GAAI,8CACJoC,SAAU,EAAAC,uBACVC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCC,SAAU,CAAC,EAAAC,gBAAiB,EAAAC,kBAC5BC,WAAW,GA8Gf","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/markdownviewer-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module markdownviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { IMarkdownViewerTracker, MarkdownViewer, MarkdownViewerFactory } from '@jupyterlab/markdownviewer';\nimport { IRenderMimeRegistry, markdownRendererFactory } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\n/**\n * The command IDs used by the markdownviewer plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.markdownPreview = 'markdownviewer:open';\n    CommandIDs.markdownEditor = 'markdownviewer:edit';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates markdown viewer widgets.\n */\nconst FACTORY = 'Markdown Preview';\n/**\n * The markdown viewer plugin.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/markdownviewer-extension:plugin',\n    provides: IMarkdownViewerTracker,\n    requires: [IRenderMimeRegistry, ITranslator],\n    optional: [ILayoutRestorer, ISettingRegistry],\n    autoStart: true\n};\n/**\n * Activate the markdown viewer plugin.\n */\nfunction activate(app, rendermime, translator, restorer, settingRegistry) {\n    const trans = translator.load('jupyterlab');\n    const { commands, docRegistry } = app;\n    // Add the markdown renderer factory.\n    rendermime.addFactory(markdownRendererFactory);\n    const namespace = 'markdownviewer-widget';\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    let config = Object.assign({}, MarkdownViewer.defaultConfig);\n    /**\n     * Update the settings of a widget.\n     */\n    function updateWidget(widget) {\n        Object.keys(config).forEach((k) => {\n            var _a;\n            widget.setOption(k, (_a = config[k]) !== null && _a !== void 0 ? _a : null);\n        });\n    }\n    if (settingRegistry) {\n        const updateSettings = (settings) => {\n            config = settings.composite;\n            tracker.forEach(widget => {\n                updateWidget(widget.content);\n            });\n        };\n        // Fetch the initial state of the settings.\n        settingRegistry\n            .load(plugin.id)\n            .then((settings) => {\n            settings.changed.connect(() => {\n                updateSettings(settings);\n            });\n            updateSettings(settings);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    // Register the MarkdownViewer factory.\n    const factory = new MarkdownViewerFactory({\n        rendermime,\n        name: FACTORY,\n        primaryFileType: docRegistry.getFileType('markdown'),\n        fileTypes: ['markdown'],\n        defaultRendered: ['markdown']\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Handle the settings of new widgets.\n        updateWidget(widget.content);\n        void tracker.add(widget);\n    });\n    docRegistry.addWidgetFactory(factory);\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    commands.addCommand(CommandIDs.markdownPreview, {\n        label: trans.__('Markdown Preview'),\n        execute: args => {\n            const path = args['path'];\n            if (typeof path !== 'string') {\n                return;\n            }\n            return commands.execute('docmanager:open', {\n                path,\n                factory: FACTORY,\n                options: args['options']\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.markdownEditor, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const path = widget.context.path;\n            return commands.execute('docmanager:open', {\n                path,\n                factory: 'Editor',\n                options: {\n                    mode: 'split-right'\n                }\n            });\n        },\n        isVisible: () => {\n            const widget = tracker.currentWidget;\n            return ((widget && PathExt.extname(widget.context.path) === '.md') || false);\n        },\n        label: trans.__('Show Markdown Editor')\n    });\n    return tracker;\n}\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","markdownPreview","markdownEditor","FACTORY","plugin","activate","app","rendermime","translator","restorer","settingRegistry","trans","load","commands","docRegistry","addFactory","markdownRendererFactory","tracker","WidgetTracker","namespace","config","Object","assign","MarkdownViewer","updateWidget","widget","keys","forEach","k","_a","setOption","updateSettings","settings","composite","content","id","then","changed","connect","catch","reason","console","error","message","factory","MarkdownViewerFactory","name","primaryFileType","getFileType","fileTypes","defaultRendered","widgetCreated","sender","context","pathChanged","save","add","addWidgetFactory","restore","command","args","path","addCommand","label","__","execute","options","currentWidget","mode","isVisible","PathExt","provides","IMarkdownViewerTracker","requires","IRenderMimeRegistry","ITranslator","optional","ILayoutRestorer","ISettingRegistry","autoStart"],"sourceRoot":""}