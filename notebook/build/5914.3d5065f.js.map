{"version":3,"file":"5914.3d5065f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/markdownviewer/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/markdownviewer/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The markdownviewer tracker token.\n */\nexport const IMarkdownViewerTracker = new Token('@jupyterlab/markdownviewer:IMarkdownViewerTracker');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { ActivityMonitor } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { MimeModel } from '@jupyterlab/rendermime';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { StackedLayout, Widget } from '@lumino/widgets';\n/**\n * The class name added to a markdown viewer.\n */\nconst MARKDOWNVIEWER_CLASS = 'jp-MarkdownViewer';\n/**\n * The markdown MIME type.\n */\nconst MIMETYPE = 'text/markdown';\n/**\n * A widget for markdown documents.\n */\nexport class MarkdownViewer extends Widget {\n    /**\n     * Construct a new markdown viewer widget.\n     */\n    constructor(options) {\n        super();\n        this._config = Object.assign({}, MarkdownViewer.defaultConfig);\n        this._fragment = '';\n        this._ready = new PromiseDelegate();\n        this._isRendering = false;\n        this._renderRequested = false;\n        this.context = options.context;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.renderer = options.renderer;\n        this.node.tabIndex = 0;\n        this.addClass(MARKDOWNVIEWER_CLASS);\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(this.renderer);\n        void this.context.ready.then(async () => {\n            await this._render();\n            // Throttle the rendering rate of the widget.\n            this._monitor = new ActivityMonitor({\n                signal: this.context.model.contentChanged,\n                timeout: this._config.renderTimeout\n            });\n            this._monitor.activityStopped.connect(this.update, this);\n            this._ready.resolve(undefined);\n        });\n    }\n    /**\n     * A promise that resolves when the markdown viewer is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        this._fragment = fragment;\n        this.update();\n    }\n    /**\n     * Set a config option for the markdown viewer.\n     */\n    setOption(option, value) {\n        if (this._config[option] === value) {\n            return;\n        }\n        this._config[option] = value;\n        const { style } = this.renderer.node;\n        switch (option) {\n            case 'fontFamily':\n                style.setProperty('font-family', value);\n                break;\n            case 'fontSize':\n                style.setProperty('font-size', value ? value + 'px' : null);\n                break;\n            case 'hideFrontMatter':\n                this.update();\n                break;\n            case 'lineHeight':\n                style.setProperty('line-height', value ? value.toString() : null);\n                break;\n            case 'lineWidth': {\n                const padding = value ? `calc(50% - ${value / 2}ch)` : null;\n                style.setProperty('padding-left', padding);\n                style.setProperty('padding-right', padding);\n                break;\n            }\n            case 'renderTimeout':\n                if (this._monitor) {\n                    this._monitor.timeout = value;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._monitor) {\n            this._monitor.dispose();\n        }\n        this._monitor = null;\n        super.dispose();\n    }\n    /**\n     * Handle an `update-request` message to the widget.\n     */\n    onUpdateRequest(msg) {\n        if (this.context.isReady && !this.isDisposed) {\n            void this._render();\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.node.focus();\n    }\n    /**\n     * Render the mime content.\n     */\n    async _render() {\n        if (this.isDisposed) {\n            return;\n        }\n        // Since rendering is async, we note render requests that happen while we\n        // actually are rendering for a future rendering.\n        if (this._isRendering) {\n            this._renderRequested = true;\n            return;\n        }\n        // Set up for this rendering pass.\n        this._renderRequested = false;\n        const { context } = this;\n        const { model } = context;\n        const source = model.toString();\n        const data = {};\n        // If `hideFrontMatter`is true remove front matter.\n        data[MIMETYPE] = this._config.hideFrontMatter\n            ? Private.removeFrontMatter(source)\n            : source;\n        const mimeModel = new MimeModel({\n            data,\n            metadata: { fragment: this._fragment }\n        });\n        try {\n            // Do the rendering asynchronously.\n            this._isRendering = true;\n            await this.renderer.renderModel(mimeModel);\n            this._isRendering = false;\n            // If there is an outstanding request to render, go ahead and render\n            if (this._renderRequested) {\n                return this._render();\n            }\n        }\n        catch (reason) {\n            // Dispose the document if rendering fails.\n            requestAnimationFrame(() => {\n                this.dispose();\n            });\n            void showErrorMessage(this._trans.__('Renderer Failure: %1', context.path), reason);\n        }\n    }\n}\n/**\n * The namespace for MarkdownViewer class statics.\n */\n(function (MarkdownViewer) {\n    /**\n     * The default configuration options for an editor.\n     */\n    MarkdownViewer.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineWidth: null,\n        hideFrontMatter: true,\n        renderTimeout: 1000\n    };\n})(MarkdownViewer || (MarkdownViewer = {}));\n/**\n * A document widget for markdown content.\n */\nexport class MarkdownDocument extends DocumentWidget {\n    setFragment(fragment) {\n        this.content.setFragment(fragment);\n    }\n}\n/**\n * A widget factory for markdown viewers.\n */\nexport class MarkdownViewerFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new markdown viewer widget factory.\n     */\n    constructor(options) {\n        super(Private.createRegistryOptions(options));\n        this._fileType = options.primaryFileType;\n        this._rendermime = options.rendermime;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        var _a, _b, _c, _d, _e;\n        const rendermime = this._rendermime.clone({\n            resolver: context.urlResolver\n        });\n        const renderer = rendermime.createRenderer(MIMETYPE);\n        const content = new MarkdownViewer({ context, renderer });\n        content.title.icon = (_a = this._fileType) === null || _a === void 0 ? void 0 : _a.icon;\n        content.title.iconClass = (_c = (_b = this._fileType) === null || _b === void 0 ? void 0 : _b.iconClass) !== null && _c !== void 0 ? _c : '';\n        content.title.iconLabel = (_e = (_d = this._fileType) === null || _d === void 0 ? void 0 : _d.iconLabel) !== null && _e !== void 0 ? _e : '';\n        const widget = new MarkdownDocument({ content, context });\n        return widget;\n    }\n}\n/**\n * A namespace for markdown viewer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the document registry options.\n     */\n    function createRegistryOptions(options) {\n        return Object.assign(Object.assign({}, options), { readOnly: true });\n    }\n    Private.createRegistryOptions = createRegistryOptions;\n    /**\n     * Remove YALM front matter from source.\n     */\n    function removeFrontMatter(source) {\n        const re = /^---\\n[^]*?\\n(---|...)\\n/;\n        const match = source.match(re);\n        if (!match) {\n            return source;\n        }\n        const { length } = match[0];\n        return source.slice(length);\n    }\n    Private.removeFrontMatter = removeFrontMatter;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"names":["IMarkdownViewerTracker","Token","MIMETYPE","MarkdownViewer","Widget","constructor","options","super","this","_config","Object","assign","defaultConfig","_fragment","_ready","PromiseDelegate","_isRendering","_renderRequested","context","translator","nullTranslator","_trans","load","renderer","node","tabIndex","addClass","layout","StackedLayout","addWidget","ready","then","async","_render","_monitor","ActivityMonitor","signal","model","contentChanged","timeout","renderTimeout","activityStopped","connect","update","resolve","undefined","promise","setFragment","fragment","setOption","option","value","style","setProperty","toString","padding","dispose","isDisposed","onUpdateRequest","msg","isReady","onActivateRequest","focus","source","data","hideFrontMatter","Private","removeFrontMatter","mimeModel","MimeModel","metadata","renderModel","reason","requestAnimationFrame","showErrorMessage","__","path","fontFamily","fontSize","lineHeight","lineWidth","MarkdownDocument","DocumentWidget","content","MarkdownViewerFactory","ABCWidgetFactory","createRegistryOptions","_fileType","primaryFileType","_rendermime","rendermime","createNewWidget","_a","_b","_c","_d","_e","clone","resolver","urlResolver","createRenderer","title","icon","iconClass","iconLabel","readOnly","match","length","slice"],"sourceRoot":""}