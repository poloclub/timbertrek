{"version":3,"file":"9208.d7dd331.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/repl-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, JupyterFrontEnd, Router, } from '@jupyterlab/application';\nimport { CommandToolbarButton, IThemeManager, Toolbar } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { clearIcon, refreshIcon, runIcon } from '@jupyterlab/ui-components';\nimport { SingleWidgetApp } from '@jupyterlite/application';\nimport { liteIcon } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * A plugin to add buttons to the console toolbar.\n */\nconst buttons = {\n    id: '@jupyterlite/console-application:buttons',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IConsoleTracker],\n    activate: (app, translator, tracker) => {\n        if (!tracker) {\n            return;\n        }\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        // wrapper commands to be able to override the icon\n        const runCommand = 'repl:run';\n        commands.addCommand(runCommand, {\n            caption: trans.__('Run'),\n            icon: runIcon,\n            execute: () => {\n                return commands.execute('console:run-forced');\n            },\n        });\n        const runButton = new CommandToolbarButton({\n            commands,\n            id: runCommand,\n        });\n        const restartCommand = 'repl:restart';\n        commands.addCommand(restartCommand, {\n            caption: trans.__('Restart'),\n            icon: refreshIcon,\n            execute: () => {\n                return commands.execute('console:restart-kernel');\n            },\n        });\n        const restartButton = new CommandToolbarButton({\n            commands,\n            id: restartCommand,\n        });\n        const clearCommand = 'repl:clear';\n        commands.addCommand(clearCommand, {\n            caption: trans.__('Clear'),\n            icon: clearIcon,\n            execute: () => {\n                return commands.execute('console:clear');\n            },\n        });\n        const clearButton = new CommandToolbarButton({\n            commands,\n            id: clearCommand,\n        });\n        tracker.widgetAdded.connect((_, console) => {\n            const { toolbar } = console;\n            console.toolbar.addItem('run', runButton);\n            console.toolbar.addItem('restart', restartButton);\n            console.toolbar.addItem('clear', clearButton);\n            toolbar.addItem('spacer', Toolbar.createSpacerItem());\n            const node = document.createElement('a');\n            node.title = trans.__('Powered by JupyterLite');\n            node.href = 'https://github.com/jupyterlite/jupyterlite';\n            node.target = '_blank';\n            node.rel = 'noopener noreferrer';\n            const poweredBy = new Widget({ node });\n            liteIcon.element({\n                container: node,\n                elementPosition: 'center',\n                margin: '2px 2px 2px 8px',\n                height: 'auto',\n                width: '16px',\n            });\n            poweredBy.addClass('jp-PoweredBy');\n            toolbar.insertAfter('spacer', 'powered-by', poweredBy);\n        });\n    },\n};\n/**\n * A plugin to open a code console and\n * parse custom parameters from the query string arguments.\n */\nconst consolePlugin = {\n    id: '@jupyterlite/repl-extension:console',\n    autoStart: true,\n    optional: [IConsoleTracker, IThemeManager],\n    activate: (app, tracker, themeManager) => {\n        var _a;\n        if (!tracker) {\n            return;\n        }\n        const { commands, serviceManager, started } = app;\n        const search = window.location.search;\n        const urlParams = new URLSearchParams(search);\n        const code = urlParams.getAll('code');\n        const kernel = urlParams.get('kernel') || undefined;\n        const theme = (_a = urlParams.get('theme')) === null || _a === void 0 ? void 0 : _a.trim();\n        const toolbar = urlParams.get('toolbar');\n        Promise.all([started, serviceManager.ready]).then(async () => {\n            commands.execute('console:create', { kernelPreference: { name: kernel } });\n        });\n        if (theme && themeManager) {\n            const themeName = decodeURIComponent(theme);\n            themeManager.setTheme(themeName);\n        }\n        tracker.widgetAdded.connect(async (_, widget) => {\n            const { console } = widget;\n            if (!toolbar) {\n                // hide the toolbar by default if not specified\n                widget.toolbar.dispose();\n            }\n            if (code) {\n                await console.sessionContext.ready;\n                code.forEach((line) => console.inject(line));\n            }\n        });\n    },\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlite/repl-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            const trans = translator.load(I18N_BUNDLE);\n            throw new Error(trans.__('%1 must be activated in SingleWidgetApp.', status.id));\n        }\n        return app.status;\n    },\n};\n/**\n * The default paths for a single widget app.\n */\nconst paths = {\n    id: '@jupyterlite/repl-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            throw new Error(`${paths.id} must be activated in SingleWidgetApp.`);\n        }\n        return app.paths;\n    },\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlite/repl-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n};\nconst plugins = [\n    buttons,\n    consolePlugin,\n    paths,\n    router,\n    status,\n];\nexport default plugins;\n"],"names":["I18N_BUNDLE","buttons","id","autoStart","requires","ITranslator","optional","IConsoleTracker","activate","app","translator","tracker","commands","trans","load","runCommand","addCommand","caption","__","icon","runIcon","execute","runButton","CommandToolbarButton","restartCommand","refreshIcon","restartButton","clearCommand","clearIcon","clearButton","widgetAdded","connect","_","console","toolbar","addItem","Toolbar","node","document","createElement","title","href","target","rel","poweredBy","Widget","liteIcon","container","elementPosition","margin","height","width","addClass","insertAfter","consolePlugin","IThemeManager","themeManager","_a","serviceManager","started","search","window","location","urlParams","URLSearchParams","code","getAll","kernel","get","undefined","theme","trim","Promise","all","ready","then","async","kernelPreference","name","themeName","decodeURIComponent","setTheme","widget","dispose","sessionContext","forEach","line","inject","status","provides","ILabStatus","SingleWidgetApp","Error","paths","JupyterFrontEnd","router","IRouter","base","urls","Router","route","addEventListener"],"sourceRoot":""}