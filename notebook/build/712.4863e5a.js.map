{"version":3,"file":"712.4863e5a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/mock.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/yprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/mutex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js"],"sourcesContent":["// From https://en.wikipedia.org/wiki/Moons_of_Jupiter\nexport const moonsOfJupyter = [\n    'Metis',\n    'Adrastea',\n    'Amalthea',\n    'Thebe',\n    'Io',\n    'Europa',\n    'Ganymede',\n    'Callisto',\n    'Themisto',\n    'Leda',\n    'Ersa',\n    'Pandia',\n    'Himalia',\n    'Lysithea',\n    'Elara',\n    'Dia',\n    'Carpo',\n    'Valetudo',\n    'Euporie',\n    'Eupheme',\n    // 'S/2003 J 18',\n    // 'S/2010 J 2',\n    'Helike',\n    // 'S/2003 J 16',\n    // 'S/2003 J 2',\n    'Euanthe',\n    // 'S/2017 J 7',\n    'Hermippe',\n    'Praxidike',\n    'Thyone',\n    'Thelxinoe',\n    // 'S/2017 J 3',\n    'Ananke',\n    'Mneme',\n    // 'S/2016 J 1',\n    'Orthosie',\n    'Harpalyke',\n    'Iocaste',\n    // 'S/2017 J 9',\n    // 'S/2003 J 12',\n    // 'S/2003 J 4',\n    'Erinome',\n    'Aitne',\n    'Herse',\n    'Taygete',\n    // 'S/2017 J 2',\n    // 'S/2017 J 6',\n    'Eukelade',\n    'Carme',\n    // 'S/2003 J 19',\n    'Isonoe',\n    // 'S/2003 J 10',\n    'Autonoe',\n    'Philophrosyne',\n    'Cyllene',\n    'Pasithee',\n    // 'S/2010 J 1',\n    'Pasiphae',\n    'Sponde',\n    // 'S/2017 J 8',\n    'Eurydome',\n    // 'S/2017 J 5',\n    'Kalyke',\n    'Hegemone',\n    'Kale',\n    'Kallichore',\n    // 'S/2011 J 1',\n    // 'S/2017 J 1',\n    'Chaldene',\n    'Arche',\n    'Eirene',\n    'Kore',\n    // 'S/2011 J 2',\n    // 'S/2003 J 9',\n    'Megaclite',\n    'Aoede',\n    // 'S/2003 J 23',\n    'Callirrhoe',\n    'Sinope'\n];\n/**\n * Get a random user-name based on the moons of Jupyter.\n * This function returns names like \"Anonymous Io\" or \"Anonymous Metis\".\n */\nexport const getAnonymousUserName = () => 'Anonymous ' +\n    moonsOfJupyter[Math.floor(Math.random() * moonsOfJupyter.length)];\nexport const userColors = [\n    '#12A0D3',\n    '#17AB30',\n    '#CC8500',\n    '#A79011',\n    '#ee6352',\n    '#609DA9',\n    '#4BA749',\n    '#00A1B3'\n];\nexport const getRandomColor = () => userColors[Math.floor(Math.random() * userColors.length)];\n//# sourceMappingURL=awareness.js.map","export class ProviderMock {\n    requestInitialContent() {\n        return Promise.resolve(false);\n    }\n    putInitializedState() {\n        /* nop */\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        /* nop */\n    }\n    destroy() {\n        /* nop */\n    }\n    setPath(path) {\n        /* nop */\n    }\n}\n//# sourceMappingURL=mock.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The default document provider token.\n */\nexport const IDocumentProviderFactory = new Token('@jupyterlab/docprovider:IDocumentProviderFactory');\n//# sourceMappingURL=tokens.js.map","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', () => this._beforeUnloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', () => this._beforeUnloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\nimport { WebsocketProvider } from 'y-websocket';\nimport * as Y from 'yjs';\nimport { getAnonymousUserName, getRandomColor } from './awareness';\n/**\n * A class to provide Yjs synchronization over WebSocket.\n *\n * The user can specify their own user-name and user-color by adding url parameters:\n *   ?username=Alice&usercolor=007007\n * where usercolor must be a six-digit hexadecimal encoded RGB value without the hash token.\n *\n * We specify custom messages that the server can interpret. For reference please look in yjs_ws_server.\n *\n */\nexport class WebSocketProviderWithLocks extends WebsocketProvider {\n    /**\n     * Construct a new WebSocketProviderWithLocks\n     *\n     * @param options The instantiation options for a WebSocketProviderWithLocks\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        super(options.url, options.contentType + ':' + options.path, options.ymodel.ydoc, {\n            awareness: options.ymodel.awareness\n        });\n        this._currentLockRequest = null;\n        this._initialContentRequest = null;\n        this._path = options.path;\n        this._contentType = options.contentType;\n        this._serverUrl = options.url;\n        const searchParams = new URL(options.url).searchParams;\n        const color = (_a = '#' + searchParams.get('usercolor')) !== null && _a !== void 0 ? _a : getRandomColor().slice(1);\n        const name = (_b = searchParams.get('username')) !== null && _b !== void 0 ? _b : getAnonymousUserName();\n        const awareness = options.ymodel.awareness;\n        const currState = awareness.getLocalState();\n        // only set if this was not already set by another plugin\n        if (currState && ((_c = currState.user) === null || _c === void 0 ? void 0 : _c.name) == null) {\n            options.ymodel.awareness.setLocalStateField('user', {\n                name,\n                color\n            });\n        }\n        // Message handler that confirms when a lock has been acquired\n        this.messageHandlers[127] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // acquired lock\n            const timestamp = decoding.readUint32(decoder);\n            const lockRequest = this._currentLockRequest;\n            this._currentLockRequest = null;\n            if (lockRequest) {\n                lockRequest.resolve(timestamp);\n            }\n        };\n        // Message handler that receives the initial content\n        this.messageHandlers[125] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // received initial content\n            const initialContent = decoding.readTailAsUint8Array(decoder);\n            // Apply data from server\n            if (initialContent.byteLength > 0) {\n                Y.applyUpdate(this.doc, initialContent);\n            }\n            const initialContentRequest = this._initialContentRequest;\n            this._initialContentRequest = null;\n            if (initialContentRequest) {\n                initialContentRequest.resolve(initialContent.byteLength > 0);\n            }\n        };\n        this._isInitialized = false;\n        this._onConnectionStatus = this._onConnectionStatus.bind(this);\n        this.on('status', this._onConnectionStatus);\n    }\n    setPath(newPath) {\n        if (newPath !== this._path) {\n            this._path = newPath;\n            const encoder = encoding.createEncoder();\n            encoding.write(encoder, 123);\n            // writing a utf8 string to the encoder\n            const escapedPath = unescape(encodeURIComponent(this._contentType + ':' + newPath));\n            for (let i = 0; i < escapedPath.length; i++) {\n                encoding.write(encoder, \n                /** @type {number} */ escapedPath.codePointAt(i));\n            }\n            this._sendMessage(encoding.toUint8Array(encoder));\n            // prevent publishing messages to the old channel id.\n            this.disconnectBc();\n            // The next time the provider connects, we should connect through a different server url\n            this.bcChannel =\n                this._serverUrl + '/' + this._contentType + ':' + this._path;\n            this.url = this.bcChannel;\n            this.connectBc();\n        }\n    }\n    /**\n     * Resolves to true if the initial content has been initialized on the server. false otherwise.\n     */\n    requestInitialContent() {\n        if (this._initialContentRequest) {\n            return this._initialContentRequest.promise;\n        }\n        this._initialContentRequest = new PromiseDelegate();\n        this._sendMessage(new Uint8Array([125]));\n        // Resolve with true if the server doesn't respond for some reason.\n        // In case of a connection problem, we don't want the user to re-initialize the window.\n        // Instead wait for y-websocket to connect to the server.\n        // @todo maybe we should reload instead..\n        setTimeout(() => { var _a; return (_a = this._initialContentRequest) === null || _a === void 0 ? void 0 : _a.resolve(false); }, 1000);\n        return this._initialContentRequest.promise;\n    }\n    /**\n     * Put the initialized state.\n     */\n    putInitializedState() {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 124);\n        encoding.writeUint8Array(encoder, Y.encodeStateAsUpdate(this.doc));\n        this._sendMessage(encoding.toUint8Array(encoder));\n        this._isInitialized = true;\n    }\n    /**\n     * Acquire a lock.\n     * Returns a Promise that resolves to the lock number.\n     */\n    acquireLock() {\n        if (this._currentLockRequest) {\n            return this._currentLockRequest.promise;\n        }\n        this._sendMessage(new Uint8Array([127]));\n        // try to acquire lock in regular interval\n        if (this._requestLockInterval) {\n            clearInterval(this._requestLockInterval);\n        }\n        this._requestLockInterval = setInterval(() => {\n            if (this.wsconnected) {\n                // try to acquire lock\n                this._sendMessage(new Uint8Array([127]));\n            }\n        }, 500);\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._currentLockRequest = { promise, resolve, reject };\n        return promise;\n    }\n    /**\n     * Release a lock.\n     *\n     * @param lock The lock to release.\n     */\n    releaseLock(lock) {\n        const encoder = encoding.createEncoder();\n        // reply with release lock\n        encoding.writeVarUint(encoder, 126);\n        encoding.writeUint32(encoder, lock);\n        // releasing lock\n        this._sendMessage(encoding.toUint8Array(encoder));\n        if (this._requestLockInterval) {\n            clearInterval(this._requestLockInterval);\n        }\n    }\n    /**\n     * Send a new message to WebSocket server.\n     *\n     * @param message The message to send\n     */\n    _sendMessage(message) {\n        // send once connected\n        const send = () => {\n            setTimeout(() => {\n                if (this.wsconnected) {\n                    this.ws.send(message);\n                }\n                else {\n                    this.once('status', send);\n                }\n            }, 0);\n        };\n        send();\n    }\n    /**\n     * Handle a change to the connection status.\n     *\n     * @param status The connection status.\n     */\n    async _onConnectionStatus(status) {\n        if (this._isInitialized && status.status === 'connected') {\n            const lock = await this.acquireLock();\n            const contentIsInitialized = await this.requestInitialContent();\n            if (!contentIsInitialized) {\n                this.putInitializedState();\n            }\n            this.releaseLock(lock);\n        }\n    }\n}\n//# sourceMappingURL=yprovider.js.map","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n"],"names":["moonsOfJupyter","getAnonymousUserName","Math","floor","random","length","userColors","getRandomColor","ProviderMock","requestInitialContent","Promise","resolve","putInitializedState","acquireLock","releaseLock","lock","destroy","setPath","path","IDocumentProviderFactory","Token","messageHandlers","encoder","decoder","provider","emitSynced","messageType","syncMessageType","sync","doc","synced","awareness","Array","from","getStates","keys","decoding","y","permissionDeniedHandler","reason","console","warn","url","readMessage","buf","messageHandler","error","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","onmessage","event","wsLastMessageReceived","time","Uint8Array","data","send","onclose","filter","client","clientID","emit","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","constructor","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","super","slice","encodedParams","object","val","key","encodeURIComponent","join","this","mutex","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","update","origin","on","_awarenessUpdateHandler","added","updated","removed","changedClients","concat","_beforeUnloadHandler","window","addEventListener","process","_checkInterval","close","messageReconnectTimeout","state","clearInterval","disconnect","removeEventListener","off","connectBc","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc","Map","WebSocketProviderWithLocks","options","_a","_b","_c","contentType","ymodel","ydoc","_currentLockRequest","_initialContentRequest","_path","_contentType","_serverUrl","searchParams","URL","color","get","name","currState","user","setLocalStateField","timestamp","lockRequest","initialContent","byteLength","initialContentRequest","_isInitialized","_onConnectionStatus","bind","newPath","escapedPath","unescape","i","codePointAt","_sendMessage","PromiseDelegate","promise","reject","_requestLockInterval","_resolve","_reject","message","once","async","channels","BC","BroadcastChannel","room","e","newValue","postMessage","getChannel","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","c","createMutex","token","g","undefined","messageYjsSyncStep1","messageYjsSyncStep2","writeSyncStep1","sv","writeSyncStep2","encodedStateVector","readSyncStep2","transactionOrigin","writeUpdate","readUpdate","readSyncMessage","readSyncStep1","Error"],"sourceRoot":""}