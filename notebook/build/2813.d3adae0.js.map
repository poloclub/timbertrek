{"version":3,"file":"2813.d3adae0.js","mappings":"8WAaO,MAAMA,EAAgB,EAIhBC,EAAgB,EAUtB,SAASC,EAAkBC,EAAMC,GAEpC,MACMC,EAAsB,qBAATF,GADF,8BAC0CG,KAAKH,GAC1DI,EAAYC,GAC+B,oBAAtCC,OAAOC,UAAUC,SAASC,KAAKJ,GAI1C,GAAIK,MAAMC,QAAQV,GAAQ,CACtB,GAAIC,EACA,OAAO,EAEX,IAAIU,GAAQ,EAMZ,OALAX,EAAMY,SAAQC,IACLV,EAASU,KACVF,GAAQ,MAGTA,EAGX,OAAIR,EAASH,IACDC,IAGPA,GAIE,EAAAa,QAAA,SAAiBd,GAKrB,SAASe,EAAMC,GAClB,MAA0B,QAAnBA,EAAKC,UAKT,SAASC,EAAWF,GACvB,MAA0B,aAAnBA,EAAKC,UAKT,SAASE,EAAOH,GACnB,MAA0B,SAAnBA,EAAKC,UAKT,SAASG,EAAgBC,GAC5B,MAA8B,mBAAvBA,EAAOC,YAKX,SAASC,EAAcF,GAC1B,MAA8B,iBAAvBA,EAAOC,YAKX,SAASE,EAAgBH,GAC5B,MAA8B,wBAAvBA,EAAOC,YAKX,SAASG,EAASJ,GACrB,MAA8B,WAAvBA,EAAOC,YAKX,SAASI,EAAQL,GACpB,MAA8B,UAAvBA,EAAOC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/nbformat/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module nbformat\n */\n// Notebook format interfaces\n// https://nbformat.readthedocs.io/en/latest/format_description.html\n// https://github.com/jupyter/nbformat/blob/master/nbformat/v4/nbformat.v4.schema.json\nimport { JSONExt } from '@lumino/coreutils';\n/**\n * The earliest major version of the notebook format we support.\n */\nexport const MAJOR_VERSION = 4;\n/**\n * The earliest minor version of the notebook format we support.\n */\nexport const MINOR_VERSION = 4;\n/**\n * Validate a mime type/value pair.\n *\n * @param type - The mimetype name.\n *\n * @param value - The value associated with the type.\n *\n * @returns Whether the type/value pair are valid.\n */\nexport function validateMimeValue(type, value) {\n    // Check if \"application/json\" or \"application/foo+json\"\n    const jsonTest = /^application\\/(.*?)+\\+json$/;\n    const isJSONType = type === 'application/json' || jsonTest.test(type);\n    const isString = (x) => {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n    // If it is an array, make sure if is not a JSON type and it is an\n    // array of strings.\n    if (Array.isArray(value)) {\n        if (isJSONType) {\n            return false;\n        }\n        let valid = true;\n        value.forEach(v => {\n            if (!isString(v)) {\n                valid = false;\n            }\n        });\n        return valid;\n    }\n    // If it is a string, make sure we are not a JSON type.\n    if (isString(value)) {\n        return !isJSONType;\n    }\n    // It is not a string, make sure it is a JSON type.\n    if (!isJSONType) {\n        return false;\n    }\n    // It is a JSON type, make sure it is a valid JSON object.\n    return JSONExt.isObject(value);\n}\n/**\n * Test whether a cell is a raw cell.\n */\nexport function isRaw(cell) {\n    return cell.cell_type === 'raw';\n}\n/**\n * Test whether a cell is a markdown cell.\n */\nexport function isMarkdown(cell) {\n    return cell.cell_type === 'markdown';\n}\n/**\n * Test whether a cell is a code cell.\n */\nexport function isCode(cell) {\n    return cell.cell_type === 'code';\n}\n/**\n * Test whether an output is an execute result.\n */\nexport function isExecuteResult(output) {\n    return output.output_type === 'execute_result';\n}\n/**\n * Test whether an output is from display data.\n */\nexport function isDisplayData(output) {\n    return output.output_type === 'display_data';\n}\n/**\n * Test whether an output is from updated display data.\n */\nexport function isDisplayUpdate(output) {\n    return output.output_type === 'update_display_data';\n}\n/**\n * Test whether an output is from a stream.\n */\nexport function isStream(output) {\n    return output.output_type === 'stream';\n}\n/**\n * Test whether an output is an error.\n */\nexport function isError(output) {\n    return output.output_type === 'error';\n}\n//# sourceMappingURL=index.js.map"],"names":["MAJOR_VERSION","MINOR_VERSION","validateMimeValue","type","value","isJSONType","test","isString","x","Object","prototype","toString","call","Array","isArray","valid","forEach","v","JSONExt","isRaw","cell","cell_type","isMarkdown","isCode","isExecuteResult","output","output_type","isDisplayData","isDisplayUpdate","isStream","isError"],"sourceRoot":""}