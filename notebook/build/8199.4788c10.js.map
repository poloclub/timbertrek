{"version":3,"file":"8199.4788c10.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, ITreePathUpdater, JupyterFrontEnd, Router } from '@jupyterlab/application';\nimport { sessionContextDialogs, ISessionContextDialogs, DOMUtils, ICommandPalette } from '@jupyterlab/apputils';\nimport { ConsolePanel } from '@jupyterlab/console';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, renameDialog } from '@jupyterlab/docmanager';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { RetroApp, RetroShell, IRetroShell } from '@retrolab/application';\nimport { jupyterIcon, retroInlineIcon } from '@retrolab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');\n/**\n * A regular expression to suppress the file extension from display for .ipynb files.\n */\nconst STRIP_IPYNB = /\\.ipynb$/;\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.toggleTop = 'application:toggle-top';\n    /**\n     * Toggle the Zen mode\n     */\n    CommandIDs.toggleZen = 'application:toggle-zen';\n    /**\n     * Open JupyterLab\n     */\n    CommandIDs.openLab = 'application:open-lab';\n    /**\n     * Open the tree page.\n     */\n    CommandIDs.openTree = 'application:open-tree';\n    /**\n     * Rename the current document\n     */\n    CommandIDs.rename = 'application:rename';\n    /**\n     * Resolve tree path\n     */\n    CommandIDs.resolveTree = 'application:resolve-tree';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@retrolab/application-extension:dirty',\n    autoStart: true,\n    requires: [ILabStatus, ITranslator],\n    activate: (app, status, translator) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${dirty.id} must be activated in RetroLab.`);\n        }\n        const trans = translator.load('retrolab');\n        const message = trans.__('Are you sure you want to exit RetroLab?\\n\\nAny unsaved changes will be lost.');\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@retrolab/application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        const retroLogo = PageConfig.getOption('retroLogo') === 'true';\n        const icon = retroLogo ? retroInlineIcon : jupyterIcon;\n        icon.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A plugin to open documents in the main area.\n */\nconst opener = {\n    id: '@retrolab/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\n/**\n * A plugin to customize menus\n *\n * TODO: use this plugin to customize the menu items and their order\n */\nconst menus = {\n    id: '@retrolab/application-extension:menus',\n    requires: [IMainMenu],\n    autoStart: true,\n    activate: (app, menu) => {\n        // always disable the Tabs menu\n        menu.tabsMenu.dispose();\n        const page = PageConfig.getOption('retroPage');\n        switch (page) {\n            case 'consoles':\n            case 'terminals':\n            case 'tree':\n                menu.editMenu.dispose();\n                menu.kernelMenu.dispose();\n                menu.runMenu.dispose();\n                break;\n            case 'edit':\n                menu.kernelMenu.dispose();\n                menu.runMenu.dispose();\n                break;\n            default:\n                break;\n        }\n    }\n};\n/**\n * Add commands to open the tree and running pages.\n */\nconst pages = {\n    id: '@retrolab/application-extension:pages',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const trans = translator.load('retrolab');\n        const baseUrl = PageConfig.getBaseUrl();\n        app.commands.addCommand(CommandIDs.openLab, {\n            label: trans.__('Open JupyterLab'),\n            execute: () => {\n                window.open(`${baseUrl}lab`);\n            }\n        });\n        app.commands.addCommand(CommandIDs.openTree, {\n            label: trans.__('Open Files'),\n            execute: () => {\n                window.open(`${baseUrl}retro/tree`);\n            }\n        });\n        if (palette) {\n            [CommandIDs.openLab, CommandIDs.openTree].forEach(command => {\n                palette.addItem({ command, category: 'View' });\n            });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.openLab }, { command: CommandIDs.openTree }], 0);\n        }\n    }\n};\n/**\n * The default paths for a RetroLab app.\n */\nconst paths = {\n    id: '@retrolab/application-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${paths.id} must be activated in RetroLab.`);\n        }\n        return app.paths;\n    }\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@retrolab/application-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    }\n};\n/**\n * The default session dialogs plugin\n */\nconst sessionDialogs = {\n    id: '@retrolab/application-extension:session-dialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => sessionContextDialogs\n};\n/**\n * The default RetroLab application shell.\n */\nconst shell = {\n    id: '@retrolab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof RetroShell)) {\n            throw new Error(`${shell.id} did not find a RetroShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IRetroShell\n};\n/**\n * A plugin to provide a spacer at rank 10000 for flex panels\n */\nconst spacer = {\n    id: '@retrolab/application-extension:spacer',\n    autoStart: true,\n    activate: (app) => {\n        const top = new Widget();\n        top.id = DOMUtils.createDomID();\n        top.addClass('jp-RetroSpacer');\n        app.shell.add(top, 'top', { rank: 10000 });\n        const menu = new Widget();\n        menu.id = DOMUtils.createDomID();\n        menu.addClass('jp-RetroSpacer');\n        app.shell.add(menu, 'menu', { rank: 10000 });\n    }\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@retrolab/application-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${status.id} must be activated in RetroLab.`);\n        }\n        return app.status;\n    }\n};\n/**\n * A plugin to display the document title in the browser tab title\n */\nconst tabTitle = {\n    id: '@retrolab/application-extension:tab-title',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const setTabTitle = () => {\n            const current = shell.currentWidget;\n            if (current instanceof ConsolePanel) {\n                const update = () => {\n                    const title = current.sessionContext.path || current.sessionContext.name;\n                    const basename = PathExt.basename(title);\n                    // Strip the \".ipynb\" suffix from filenames for display in tab titles.\n                    document.title = basename.replace(STRIP_IPYNB, '');\n                };\n                current.sessionContext.sessionChanged.connect(update);\n                update();\n                return;\n            }\n            else if (current instanceof DocumentWidget) {\n                const update = () => {\n                    const basename = PathExt.basename(current.context.path);\n                    document.title = basename.replace(STRIP_IPYNB, '');\n                };\n                current.context.pathChanged.connect(update);\n                update();\n            }\n        };\n        shell.currentChanged.connect(setTabTitle);\n        setTabTitle();\n    }\n};\n/**\n * A plugin to display and rename the title of a file\n */\nconst title = {\n    id: '@retrolab/application-extension:title',\n    autoStart: true,\n    requires: [IRetroShell, ITranslator],\n    optional: [IDocumentManager, IRouter],\n    activate: (app, shell, translator, docManager, router) => {\n        const { commands } = app;\n        const trans = translator.load('retrolab');\n        const widget = new Widget();\n        widget.id = 'jp-title';\n        app.shell.add(widget, 'top', { rank: 10 });\n        const addTitle = async () => {\n            const current = shell.currentWidget;\n            if (!current || !(current instanceof DocumentWidget)) {\n                return;\n            }\n            if (widget.node.children.length > 0) {\n                return;\n            }\n            const h = document.createElement('h1');\n            h.textContent = current.title.label.replace(STRIP_IPYNB, '');\n            widget.node.appendChild(h);\n            widget.node.style.marginLeft = '10px';\n            if (!docManager) {\n                return;\n            }\n            const isEnabled = () => {\n                const { currentWidget } = shell;\n                return !!(currentWidget && docManager.contextForWidget(currentWidget));\n            };\n            commands.addCommand(CommandIDs.rename, {\n                label: () => trans.__('Rename…'),\n                isEnabled,\n                execute: async () => {\n                    var _a, _b;\n                    if (!isEnabled()) {\n                        return;\n                    }\n                    const result = await renameDialog(docManager, current.context.path);\n                    // activate the current widget to bring the focus\n                    if (current) {\n                        current.activate();\n                    }\n                    if (result === null) {\n                        return;\n                    }\n                    const newPath = (_a = current.context.path) !== null && _a !== void 0 ? _a : result.path;\n                    const basename = PathExt.basename(newPath);\n                    h.textContent = basename.replace(STRIP_IPYNB, '');\n                    if (!router) {\n                        return;\n                    }\n                    const matches = (_b = router.current.path.match(TREE_PATTERN)) !== null && _b !== void 0 ? _b : [];\n                    const [, route, path] = matches;\n                    if (!route || !path) {\n                        return;\n                    }\n                    const encoded = encodeURIComponent(newPath);\n                    router.navigate(`/retro/${route}/${encoded}`, {\n                        skipRouting: true\n                    });\n                }\n            });\n            widget.node.onclick = async () => {\n                void commands.execute(CommandIDs.rename);\n            };\n        };\n        shell.currentChanged.connect(addTitle);\n        void addTitle();\n    }\n};\n/**\n * Plugin to toggle the top header visibility.\n */\nconst topVisibility = {\n    id: '@retrolab/application-extension:top',\n    requires: [IRetroShell, ITranslator],\n    optional: [IMainMenu, ISettingRegistry],\n    activate: (app, retroShell, translator, menu, settingRegistry) => {\n        const trans = translator.load('retrolab');\n        const top = retroShell.top;\n        const pluginId = topVisibility.id;\n        app.commands.addCommand(CommandIDs.toggleTop, {\n            label: trans.__('Show Header'),\n            execute: () => {\n                top.setHidden(top.isVisible);\n                if (settingRegistry) {\n                    void settingRegistry.set(pluginId, 'visible', top.isVisible);\n                }\n            },\n            isToggled: () => top.isVisible\n        });\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleTop }], 2);\n        }\n        let settingsOverride = false;\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(pluginId);\n            const updateSettings = (settings) => {\n                const visible = settings.get('visible').composite;\n                if (settings.user.visible !== undefined) {\n                    settingsOverride = true;\n                    top.setHidden(!visible);\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        const onChanged = () => {\n            if (settingsOverride) {\n                return;\n            }\n            if (app.format === 'desktop') {\n                retroShell.expandTop();\n            }\n            else {\n                retroShell.collapseTop();\n            }\n        };\n        // listen on format change (mobile and desktop) to make the view more compact\n        app.formatChanged.connect(onChanged);\n    },\n    autoStart: true\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@retrolab/application-extension:tree-resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/retro(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.resolveTree, {\n            execute: (async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            })\n        }));\n        set.add(router.register({ command: CommandIDs.resolveTree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\nconst treePathUpdater = {\n    id: '@retrolab/application-extension:tree-updater',\n    requires: [IRouter],\n    provides: ITreePathUpdater,\n    activate: (app, router) => {\n        function updateTreePath(treePath) {\n            if (treePath !== PageConfig.getOption('treePath')) {\n                const path = URLExt.join(PageConfig.getOption('baseUrl') || '/', 'retro', 'tree', URLExt.encodeParts(treePath));\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n            }\n        }\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * Zen mode plugin\n */\nconst zen = {\n    id: '@retrolab/application-extension:zen',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IRetroShell, IMainMenu],\n    activate: (app, translator, palette, retroShell, menu) => {\n        const { commands } = app;\n        const elem = document.documentElement;\n        const trans = translator.load('retrolab');\n        const toggleOn = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.collapseTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(true);\n            zenModeEnabled = true;\n        };\n        const toggleOff = () => {\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.expandTop();\n            retroShell === null || retroShell === void 0 ? void 0 : retroShell.menu.setHidden(false);\n            zenModeEnabled = false;\n        };\n        let zenModeEnabled = false;\n        commands.addCommand(CommandIDs.toggleZen, {\n            label: trans.__('Toggle Zen Mode'),\n            execute: () => {\n                if (!zenModeEnabled) {\n                    elem.requestFullscreen();\n                    toggleOn();\n                }\n                else {\n                    document.exitFullscreen();\n                    toggleOff();\n                }\n            }\n        });\n        document.addEventListener('fullscreenchange', () => {\n            if (!document.fullscreenElement) {\n                toggleOff();\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleZen }], 3);\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    dirty,\n    logo,\n    menus,\n    opener,\n    pages,\n    paths,\n    router,\n    sessionDialogs,\n    shell,\n    spacer,\n    status,\n    tabTitle,\n    title,\n    topVisibility,\n    tree,\n    treePathUpdater,\n    zen\n];\nexport default plugins;\n"],"names":["TREE_PATTERN","RegExp","STRIP_IPYNB","CommandIDs","toggleTop","toggleZen","openLab","openTree","rename","resolveTree","dirty","id","autoStart","requires","ILabStatus","ITranslator","activate","app","status","translator","RetroApp","Error","message","load","__","window","addEventListener","event","isDirty","returnValue","logo","baseUrl","PageConfig","node","document","createElement","href","target","rel","Widget","retroInlineIcon","jupyterIcon","element","container","elementPosition","padding","height","width","shell","add","rank","opener","IRouter","IDocumentManager","router","docManager","commands","command","addCommand","execute","args","_a","matches","path","match","file","decodeURIComponent","ext","PathExt","restored","then","open","undefined","ref","register","pattern","menus","IMainMenu","menu","tabsMenu","dispose","editMenu","kernelMenu","runMenu","pages","optional","ICommandPalette","palette","trans","label","forEach","addItem","category","viewMenu","addGroup","paths","provides","JupyterFrontEnd","base","urls","Router","started","route","sessionDialogs","ISessionContextDialogs","sessionContextDialogs","RetroShell","IRetroShell","spacer","top","DOMUtils","addClass","tabTitle","setTabTitle","current","currentWidget","ConsolePanel","update","title","sessionContext","name","basename","replace","sessionChanged","connect","DocumentWidget","context","pathChanged","currentChanged","widget","addTitle","async","children","length","h","textContent","appendChild","style","marginLeft","isEnabled","contextForWidget","_b","result","renameDialog","newPath","encoded","encodeURIComponent","navigate","skipRouting","onclick","topVisibility","ISettingRegistry","retroShell","settingRegistry","pluginId","setHidden","isVisible","set","isToggled","settingsOverride","loadSettings","updateSettings","settings","visible","get","composite","user","Promise","all","changed","catch","reason","console","error","formatChanged","format","expandTop","collapseTop","tree","DisposableSet","delegate","PromiseDelegate","treePattern","isDisposed","query","URLExt","search","browser","resolve","listener","routed","DisposableDelegate","disconnect","promise","treePathUpdater","ITreePathUpdater","treePath","zen","elem","documentElement","toggleOff","zenModeEnabled","exitFullscreen","requestFullscreen","fullscreenElement"],"sourceRoot":""}