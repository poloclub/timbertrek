{"version":3,"file":"4805.2f3f015.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/commands.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Clipboard, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { MarkdownCodeBlocks, PathExt } from '@jupyterlab/coreutils';\nimport { consoleIcon, copyIcon, cutIcon, LabIcon, markdownIcon, pasteIcon, redoIcon, textEditorIcon, undoIcon } from '@jupyterlab/ui-components';\nconst autoClosingBracketsNotebook = 'notebook:toggle-autoclosing-brackets';\nconst autoClosingBracketsConsole = 'console:toggle-autoclosing-brackets';\n/**\n * The command IDs used by the fileeditor plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'fileeditor:create-new';\n    CommandIDs.createNewMarkdown = 'fileeditor:create-new-markdown-file';\n    CommandIDs.changeFontSize = 'fileeditor:change-font-size';\n    CommandIDs.lineNumbers = 'fileeditor:toggle-line-numbers';\n    CommandIDs.lineWrap = 'fileeditor:toggle-line-wrap';\n    CommandIDs.changeTabs = 'fileeditor:change-tabs';\n    CommandIDs.matchBrackets = 'fileeditor:toggle-match-brackets';\n    CommandIDs.autoClosingBrackets = 'fileeditor:toggle-autoclosing-brackets';\n    CommandIDs.autoClosingBracketsUniversal = 'fileeditor:toggle-autoclosing-brackets-universal';\n    CommandIDs.createConsole = 'fileeditor:create-console';\n    CommandIDs.replaceSelection = 'fileeditor:replace-selection';\n    CommandIDs.runCode = 'fileeditor:run-code';\n    CommandIDs.runAllCode = 'fileeditor:run-all';\n    CommandIDs.markdownPreview = 'fileeditor:markdown-preview';\n    CommandIDs.undo = 'fileeditor:undo';\n    CommandIDs.redo = 'fileeditor:redo';\n    CommandIDs.cut = 'fileeditor:cut';\n    CommandIDs.copy = 'fileeditor:copy';\n    CommandIDs.paste = 'fileeditor:paste';\n    CommandIDs.selectAll = 'fileeditor:select-all';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates editor widgets.\n */\nexport const FACTORY = 'Editor';\nconst userSettings = [\n    'autoClosingBrackets',\n    'codeFolding',\n    'cursorBlinkRate',\n    'fontFamily',\n    'fontSize',\n    'insertSpaces',\n    'lineHeight',\n    'lineNumbers',\n    'lineWrap',\n    'matchBrackets',\n    'readOnly',\n    'rulers',\n    'showTrailingSpace',\n    'tabSize',\n    'wordWrapColumn'\n];\nfunction filterUserSettings(config) {\n    const filteredConfig = Object.assign({}, config);\n    // Delete parts of the config that are not user settings (like handlePaste).\n    for (let k of Object.keys(config)) {\n        if (!userSettings.includes(k)) {\n            delete config[k];\n        }\n    }\n    return filteredConfig;\n}\nlet config = filterUserSettings(CodeEditor.defaultConfig);\n/**\n * A utility class for adding commands and menu items,\n * for use by the File Editor extension or other Editor extensions.\n */\nexport var Commands;\n(function (Commands) {\n    /**\n     * Accessor function that returns the createConsole function for use by Create Console commands\n     */\n    function getCreateConsoleFunction(commands) {\n        return async function createConsole(widget, args) {\n            var _a;\n            const options = args || {};\n            const console = await commands.execute('console:create', {\n                activate: options['activate'],\n                name: (_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name,\n                path: widget.context.path,\n                preferredLanguage: widget.context.model.defaultKernelLanguage,\n                ref: widget.id,\n                insertMode: 'split-bottom'\n            });\n            widget.context.pathChanged.connect((sender, value) => {\n                var _a;\n                console.session.setPath(value);\n                console.session.setName((_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name);\n            });\n        };\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateSettings(settings, commands) {\n        config = filterUserSettings(Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite));\n        // Trigger a refresh of the rendered commands\n        commands.notifyCommandChanged();\n    }\n    Commands.updateSettings = updateSettings;\n    /**\n     * Update the settings of the current tracker instances.\n     */\n    function updateTracker(tracker) {\n        tracker.forEach(widget => {\n            updateWidget(widget.content);\n        });\n    }\n    Commands.updateTracker = updateTracker;\n    /**\n     * Update the settings of a widget.\n     * Skip global settings for transient editor specific configs.\n     */\n    function updateWidget(widget) {\n        const editor = widget.editor;\n        editor.setOptions(Object.assign({}, config));\n    }\n    Commands.updateWidget = updateWidget;\n    /**\n     * Wrapper function for adding the default File Editor commands\n     */\n    function addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory) {\n        // Add a command to change font size.\n        addChangeFontSizeCommand(commands, settingRegistry, trans, id);\n        addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled);\n        addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled);\n        addChangeTabsCommand(commands, settingRegistry, trans, id);\n        addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled);\n        addAutoClosingBracketsCommand(commands, settingRegistry, trans, id);\n        addReplaceSelectionCommand(commands, tracker, trans, isEnabled);\n        addCreateConsoleCommand(commands, tracker, trans, isEnabled);\n        addRunCodeCommand(commands, tracker, trans, isEnabled);\n        addRunAllCodeCommand(commands, tracker, trans, isEnabled);\n        addMarkdownPreviewCommand(commands, tracker, trans);\n        // Add a command for creating a new text file.\n        addCreateNewCommand(commands, browserFactory, trans);\n        // Add a command for creating a new Markdown file.\n        addCreateNewMarkdownCommand(commands, browserFactory, trans);\n        addUndoCommand(commands, tracker, trans, isEnabled);\n        addRedoCommand(commands, tracker, trans, isEnabled);\n        addCutCommand(commands, tracker, trans, isEnabled);\n        addCopyCommand(commands, tracker, trans, isEnabled);\n        addPasteCommand(commands, tracker, trans, isEnabled);\n        addSelectAllCommand(commands, tracker, trans, isEnabled);\n    }\n    Commands.addCommands = addCommands;\n    /**\n     * Add a command to change font size for File Editor\n     */\n    function addChangeFontSizeCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeFontSize, {\n            execute: args => {\n                const delta = Number(args['delta']);\n                if (Number.isNaN(delta)) {\n                    console.error(`${CommandIDs.changeFontSize}: delta arg must be a number`);\n                    return;\n                }\n                const style = window.getComputedStyle(document.documentElement);\n                const cssSize = parseInt(style.getPropertyValue('--jp-code-font-size'), 10);\n                const currentSize = config.fontSize || cssSize;\n                config.fontSize = currentSize + delta;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: args => {\n                var _a;\n                if (((_a = args.delta) !== null && _a !== void 0 ? _a : 0) > 0) {\n                    return args.isMenu\n                        ? trans.__('Increase Text Editor Font Size')\n                        : trans.__('Increase Font Size');\n                }\n                else {\n                    return args.isMenu\n                        ? trans.__('Decrease Text Editor Font Size')\n                        : trans.__('Decrease Font Size');\n                }\n            }\n        });\n    }\n    Commands.addChangeFontSizeCommand = addChangeFontSizeCommand;\n    /**\n     * Add the Line Numbers command\n     */\n    function addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineNumbers, {\n            execute: () => {\n                config.lineNumbers = !config.lineNumbers;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: () => config.lineNumbers,\n            label: trans.__('Line Numbers')\n        });\n    }\n    Commands.addLineNumbersCommand = addLineNumbersCommand;\n    /**\n     * Add the Word Wrap command\n     */\n    function addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineWrap, {\n            execute: args => {\n                config.lineWrap = args['mode'] || 'off';\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: args => {\n                const lineWrap = args['mode'] || 'off';\n                return config.lineWrap === lineWrap;\n            },\n            label: trans.__('Word Wrap')\n        });\n    }\n    Commands.addWordWrapCommand = addWordWrapCommand;\n    /**\n     * Add command for changing tabs size or type in File Editor\n     */\n    function addChangeTabsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeTabs, {\n            label: args => {\n                var _a;\n                if (args.insertSpaces) {\n                    return trans._n('Spaces: %1', 'Spaces: %1', (_a = args.size) !== null && _a !== void 0 ? _a : 0);\n                }\n                else {\n                    return trans.__('Indent with Tab');\n                }\n            },\n            execute: args => {\n                config.tabSize = args['size'] || 4;\n                config.insertSpaces = !!args['insertSpaces'];\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isToggled: args => {\n                const insertSpaces = !!args['insertSpaces'];\n                const size = args['size'] || 4;\n                return config.insertSpaces === insertSpaces && config.tabSize === size;\n            }\n        });\n    }\n    Commands.addChangeTabsCommand = addChangeTabsCommand;\n    /**\n     * Add the Match Brackets command\n     */\n    function addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.matchBrackets, {\n            execute: () => {\n                config.matchBrackets = !config.matchBrackets;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Match Brackets'),\n            isEnabled,\n            isToggled: () => config.matchBrackets\n        });\n    }\n    Commands.addMatchBracketsCommand = addMatchBracketsCommand;\n    /**\n     * Add the Auto Close Brackets for Text Editor command\n     */\n    function addAutoClosingBracketsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: args => {\n                var _a;\n                config.autoClosingBrackets = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !config.autoClosingBrackets);\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Auto Close Brackets for Text Editor'),\n            isToggled: () => config.autoClosingBrackets\n        });\n        commands.addCommand(CommandIDs.autoClosingBracketsUniversal, {\n            execute: () => {\n                const anyToggled = commands.isToggled(CommandIDs.autoClosingBrackets) ||\n                    commands.isToggled(autoClosingBracketsNotebook) ||\n                    commands.isToggled(autoClosingBracketsConsole);\n                // if any auto closing brackets options is toggled, toggle both off\n                if (anyToggled) {\n                    void commands.execute(CommandIDs.autoClosingBrackets, {\n                        force: false\n                    });\n                    void commands.execute(autoClosingBracketsNotebook, { force: false });\n                    void commands.execute(autoClosingBracketsConsole, { force: false });\n                }\n                else {\n                    // both are off, turn them on\n                    void commands.execute(CommandIDs.autoClosingBrackets, {\n                        force: true\n                    });\n                    void commands.execute(autoClosingBracketsNotebook, { force: true });\n                    void commands.execute(autoClosingBracketsConsole, { force: true });\n                }\n            },\n            label: trans.__('Auto Close Brackets'),\n            isToggled: () => commands.isToggled(CommandIDs.autoClosingBrackets) ||\n                commands.isToggled(autoClosingBracketsNotebook) ||\n                commands.isToggled(autoClosingBracketsConsole)\n        });\n    }\n    Commands.addAutoClosingBracketsCommand = addAutoClosingBracketsCommand;\n    /**\n     * Add the replace selection for text editor command\n     */\n    function addReplaceSelectionCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.replaceSelection, {\n            execute: args => {\n                var _a, _b;\n                const text = args['text'] || '';\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                (_b = (_a = widget.content.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n            },\n            isEnabled,\n            label: trans.__('Replace Selection in Editor')\n        });\n    }\n    Commands.addReplaceSelectionCommand = addReplaceSelectionCommand;\n    /**\n     * Add the Create Console for Editor command\n     */\n    function addCreateConsoleCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.createConsole, {\n            execute: args => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return getCreateConsoleFunction(commands)(widget, args);\n            },\n            isEnabled,\n            icon: consoleIcon,\n            label: trans.__('Create Console for Editor')\n        });\n    }\n    Commands.addCreateConsoleCommand = addCreateConsoleCommand;\n    /**\n     * Add the Run Code command\n     */\n    function addRunCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runCode, {\n            execute: () => {\n                var _a;\n                // Run the appropriate code, taking into account a ```fenced``` code block.\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                const selection = editor.getSelection();\n                const { start, end } = selection;\n                let selected = start.column !== end.column || start.line !== end.line;\n                if (selected) {\n                    // Get the selected code from the editor.\n                    const start = editor.getOffsetAt(selection.start);\n                    const end = editor.getOffsetAt(selection.end);\n                    code = editor.model.value.text.substring(start, end);\n                }\n                else if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    const { text } = editor.model.value;\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        if (block.startLine <= start.line && start.line <= block.endLine) {\n                            code = block.code;\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n                if (!selected) {\n                    // no selection, submit whole line and advance\n                    code = editor.getLine(selection.start.line);\n                    const cursor = editor.getCursorPosition();\n                    if (cursor.line + 1 === editor.lineCount) {\n                        const text = editor.model.value.text;\n                        editor.model.value.text = text + '\\n';\n                    }\n                    editor.setCursorPosition({\n                        line: cursor.line + 1,\n                        column: cursor.column\n                    });\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run Code')\n        });\n    }\n    Commands.addRunCodeCommand = addRunCodeCommand;\n    /**\n     * Add the Run All Code command\n     */\n    function addRunAllCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runAllCode, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const text = editor.model.value.text;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    // For Markdown files, run only code blocks.\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        code += block.code;\n                    }\n                }\n                else {\n                    code = text;\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run All Code')\n        });\n    }\n    Commands.addRunAllCodeCommand = addRunAllCodeCommand;\n    /**\n     * Add markdown preview command\n     */\n    function addMarkdownPreviewCommand(commands, tracker, trans) {\n        commands.addCommand(CommandIDs.markdownPreview, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const path = widget.context.path;\n                return commands.execute('markdownviewer:open', {\n                    path,\n                    options: {\n                        mode: 'split-right'\n                    }\n                });\n            },\n            isVisible: () => {\n                const widget = tracker.currentWidget;\n                return ((widget && PathExt.extname(widget.context.path) === '.md') || false);\n            },\n            icon: markdownIcon,\n            label: trans.__('Show Markdown Preview')\n        });\n    }\n    Commands.addMarkdownPreviewCommand = addMarkdownPreviewCommand;\n    /**\n     * Add undo command\n     */\n    function addUndoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.undo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.undo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are undo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: undoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Undo')\n        });\n    }\n    Commands.addUndoCommand = addUndoCommand;\n    /**\n     * Add redo command\n     */\n    function addRedoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.redo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.redo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are redo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: redoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Redo')\n        });\n    }\n    Commands.addRedoCommand = addRedoCommand;\n    /**\n     * Add cut command\n     */\n    function addCutCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.cut, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n                editor.replaceSelection && editor.replaceSelection('');\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Cut')\n        });\n    }\n    Commands.addCutCommand = addCutCommand;\n    /**\n     * Add copy command\n     */\n    function addCopyCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.copy, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy')\n        });\n    }\n    Commands.addCopyCommand = addCopyCommand;\n    /**\n     * Add paste command\n     */\n    function addPasteCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.paste, {\n            execute: async () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                // Get data from clipboard\n                const clipboard = window.navigator.clipboard;\n                const clipboardData = await clipboard.readText();\n                if (clipboardData) {\n                    // Paste data to the editor\n                    editor.replaceSelection && editor.replaceSelection(clipboardData);\n                }\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Paste')\n        });\n    }\n    Commands.addPasteCommand = addPasteCommand;\n    /**\n     * Add select all command\n     */\n    function addSelectAllCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.selectAll, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                editor.execCommand('selectAll');\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            label: trans.__('Select All')\n        });\n    }\n    Commands.addSelectAllCommand = addSelectAllCommand;\n    /**\n     * Helper function to check if there is a text selection in the editor\n     */\n    function isSelected(editor) {\n        const selectionObj = editor.getSelection();\n        const { start, end } = selectionObj;\n        const selected = start.column !== end.column || start.line !== end.line;\n        return selected;\n    }\n    /**\n     * Helper function to get text selection from the editor\n     */\n    function getTextSelection(editor) {\n        const selectionObj = editor.getSelection();\n        const start = editor.getOffsetAt(selectionObj.start);\n        const end = editor.getOffsetAt(selectionObj.end);\n        const text = editor.model.value.text.substring(start, end);\n        return text;\n    }\n    /**\n     * Function to create a new untitled text file, given the current working directory.\n     */\n    function createNew(commands, cwd, ext = 'txt') {\n        return commands\n            .execute('docmanager:new-untitled', {\n            path: cwd,\n            type: 'file',\n            ext\n        })\n            .then(model => {\n            if (model != undefined) {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY\n                });\n            }\n        });\n    }\n    /**\n     * Add the New File command\n     *\n     * Defaults to Text/.txt if file type data is not specified\n     */\n    function addCreateNewCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNew, {\n            label: args => {\n                var _a, _b;\n                if (args.isPalette) {\n                    return (_a = args.paletteLabel) !== null && _a !== void 0 ? _a : trans.__('New Text File');\n                }\n                return (_b = args.launcherLabel) !== null && _b !== void 0 ? _b : trans.__('Text File');\n            },\n            caption: args => { var _a; return (_a = args.caption) !== null && _a !== void 0 ? _a : trans.__('Create a new text file'); },\n            icon: args => {\n                var _a;\n                return args.isPalette\n                    ? undefined\n                    : LabIcon.resolve({\n                        icon: (_a = args.iconName) !== null && _a !== void 0 ? _a : textEditorIcon\n                    });\n            },\n            execute: args => {\n                var _a;\n                const cwd = args.cwd || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd, (_a = args.fileExt) !== null && _a !== void 0 ? _a : 'txt');\n            }\n        });\n    }\n    Commands.addCreateNewCommand = addCreateNewCommand;\n    /**\n     * Add the New Markdown File command\n     */\n    function addCreateNewMarkdownCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNewMarkdown, {\n            label: args => args['isPalette']\n                ? trans.__('New Markdown File')\n                : trans.__('Markdown File'),\n            caption: trans.__('Create a new markdown file'),\n            icon: args => (args['isPalette'] ? undefined : markdownIcon),\n            execute: args => {\n                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd, 'md');\n            }\n        });\n    }\n    Commands.addCreateNewMarkdownCommand = addCreateNewMarkdownCommand;\n    /**\n     * Wrapper function for adding the default launcher items for File Editor\n     */\n    function addLauncherItems(launcher, trans) {\n        addCreateNewToLauncher(launcher, trans);\n        addCreateNewMarkdownToLauncher(launcher, trans);\n    }\n    Commands.addLauncherItems = addLauncherItems;\n    /**\n     * Add Create New Text File to the Launcher\n     */\n    function addCreateNewToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNew,\n            category: trans.__('Other'),\n            rank: 1\n        });\n    }\n    Commands.addCreateNewToLauncher = addCreateNewToLauncher;\n    /**\n     * Add Create New Markdown to the Launcher\n     */\n    function addCreateNewMarkdownToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNewMarkdown,\n            category: trans.__('Other'),\n            rank: 2\n        });\n    }\n    Commands.addCreateNewMarkdownToLauncher = addCreateNewMarkdownToLauncher;\n    /**\n     * Add ___ File items to the Launcher for common file types associated with available kernels\n     */\n    function addKernelLanguageLauncherItems(launcher, trans, availableKernelFileTypes) {\n        for (let ext of availableKernelFileTypes) {\n            launcher.add({\n                command: CommandIDs.createNew,\n                category: trans.__('Other'),\n                rank: 3,\n                args: ext\n            });\n        }\n    }\n    Commands.addKernelLanguageLauncherItems = addKernelLanguageLauncherItems;\n    /**\n     * Wrapper function for adding the default items to the File Editor palette\n     */\n    function addPaletteItems(palette, trans) {\n        addChangeTabsCommandsToPalette(palette, trans);\n        addCreateNewCommandToPalette(palette, trans);\n        addCreateNewMarkdownCommandToPalette(palette, trans);\n        addChangeFontSizeCommandsToPalette(palette, trans);\n    }\n    Commands.addPaletteItems = addPaletteItems;\n    /**\n     * Add commands to change the tab indentation to the File Editor palette\n     */\n    function addChangeTabsCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const args = {\n            insertSpaces: false,\n            size: 4\n        };\n        const command = CommandIDs.changeTabs;\n        palette.addItem({ command, args, category: paletteCategory });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size\n            };\n            palette.addItem({ command, args, category: paletteCategory });\n        }\n    }\n    Commands.addChangeTabsCommandsToPalette = addChangeTabsCommandsToPalette;\n    /**\n     * Add a Create New File command to the File Editor palette\n     */\n    function addCreateNewCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNew,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewCommandToPalette = addCreateNewCommandToPalette;\n    /**\n     * Add a Create New Markdown command to the File Editor palette\n     */\n    function addCreateNewMarkdownCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNewMarkdown,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewMarkdownCommandToPalette = addCreateNewMarkdownCommandToPalette;\n    /**\n     * Add commands to change the font size to the File Editor palette\n     */\n    function addChangeFontSizeCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const command = CommandIDs.changeFontSize;\n        let args = { delta: 1 };\n        palette.addItem({ command, args, category: paletteCategory });\n        args = { delta: -1 };\n        palette.addItem({ command, args, category: paletteCategory });\n    }\n    Commands.addChangeFontSizeCommandsToPalette = addChangeFontSizeCommandsToPalette;\n    /**\n     * Add New ___ File commands to the File Editor palette for common file types associated with available kernels\n     */\n    function addKernelLanguagePaletteItems(palette, trans, availableKernelFileTypes) {\n        const paletteCategory = trans.__('Text Editor');\n        for (let ext of availableKernelFileTypes) {\n            palette.addItem({\n                command: CommandIDs.createNew,\n                args: Object.assign(Object.assign({}, ext), { isPalette: true }),\n                category: paletteCategory\n            });\n        }\n    }\n    Commands.addKernelLanguagePaletteItems = addKernelLanguagePaletteItems;\n    /**\n     * Wrapper function for adding the default menu items for File Editor\n     */\n    function addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs) {\n        // Add undo/redo hooks to the edit menu.\n        addUndoRedoToEditMenu(menu, tracker);\n        // Add editor view options.\n        addEditorViewerToViewMenu(menu, tracker);\n        // Add a console creator the the file menu.\n        addConsoleCreatorToFileMenu(menu, commands, tracker, trans);\n        // Add a code runner to the run menu.\n        if (consoleTracker) {\n            addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs);\n        }\n    }\n    Commands.addMenuItems = addMenuItems;\n    /**\n     * Add Create New ___ File commands to the File menu for common file types associated with available kernels\n     */\n    function addKernelLanguageMenuItems(menu, availableKernelFileTypes) {\n        for (let ext of availableKernelFileTypes) {\n            menu.fileMenu.newMenu.addItem({\n                command: CommandIDs.createNew,\n                args: ext,\n                rank: 31\n            });\n        }\n    }\n    Commands.addKernelLanguageMenuItems = addKernelLanguageMenuItems;\n    /**\n     * Add File Editor undo and redo widgets to the Edit menu\n     */\n    function addUndoRedoToEditMenu(menu, tracker) {\n        menu.editMenu.undoers.add({\n            tracker,\n            undo: widget => {\n                widget.content.editor.undo();\n            },\n            redo: widget => {\n                widget.content.editor.redo();\n            }\n        });\n    }\n    Commands.addUndoRedoToEditMenu = addUndoRedoToEditMenu;\n    /**\n     * Add a File Editor editor viewer to the View Menu\n     */\n    function addEditorViewerToViewMenu(menu, tracker) {\n        menu.viewMenu.editorViewers.add({\n            tracker,\n            toggleLineNumbers: widget => {\n                const lineNumbers = !widget.content.editor.getOption('lineNumbers');\n                widget.content.editor.setOption('lineNumbers', lineNumbers);\n            },\n            toggleWordWrap: widget => {\n                const oldValue = widget.content.editor.getOption('lineWrap');\n                const newValue = oldValue === 'off' ? 'on' : 'off';\n                widget.content.editor.setOption('lineWrap', newValue);\n            },\n            toggleMatchBrackets: widget => {\n                const matchBrackets = !widget.content.editor.getOption('matchBrackets');\n                widget.content.editor.setOption('matchBrackets', matchBrackets);\n            },\n            lineNumbersToggled: widget => widget.content.editor.getOption('lineNumbers'),\n            wordWrapToggled: widget => widget.content.editor.getOption('lineWrap') !== 'off',\n            matchBracketsToggled: widget => widget.content.editor.getOption('matchBrackets')\n        });\n    }\n    Commands.addEditorViewerToViewMenu = addEditorViewerToViewMenu;\n    /**\n     * Add a File Editor console creator to the File menu\n     */\n    function addConsoleCreatorToFileMenu(menu, commands, tracker, trans) {\n        const createConsole = getCreateConsoleFunction(commands);\n        menu.fileMenu.consoleCreators.add({\n            tracker,\n            createConsoleLabel: (n) => trans.__('Create Console for Editor'),\n            createConsole\n        });\n    }\n    Commands.addConsoleCreatorToFileMenu = addConsoleCreatorToFileMenu;\n    /**\n     * Add a File Editor code runner to the Run menu\n     */\n    function addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs) {\n        menu.runMenu.codeRunners.add({\n            tracker,\n            runLabel: (n) => trans.__('Run Code'),\n            runAllLabel: (n) => trans.__('Run All Code'),\n            restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Code'),\n            isEnabled: current => !!consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; }),\n            run: () => commands.execute(CommandIDs.runCode),\n            runAll: () => commands.execute(CommandIDs.runAllCode),\n            restartAndRunAll: current => {\n                const widget = consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; });\n                if (widget) {\n                    return (sessionDialogs || sessionContextDialogs)\n                        .restart(widget.sessionContext)\n                        .then(restarted => {\n                        if (restarted) {\n                            void commands.execute(CommandIDs.runAllCode);\n                        }\n                        return restarted;\n                    });\n                }\n            }\n        });\n    }\n    Commands.addCodeRunnersToRunMenu = addCodeRunnersToRunMenu;\n})(Commands || (Commands = {}));\n//# sourceMappingURL=commands.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module fileeditor-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, ICommandPalette, ISessionContextDialogs, IToolbarWidgetRegistry, WidgetTracker } from '@jupyterlab/apputils';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { FileEditorFactory, IEditorTracker, TabSpaceStatus } from '@jupyterlab/fileeditor';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Menu } from '@lumino/widgets';\nimport { Commands, FACTORY } from './commands';\nexport { Commands } from './commands';\n/**\n * The editor tracker extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/fileeditor-extension:plugin',\n    requires: [\n        IEditorServices,\n        IFileBrowserFactory,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        IConsoleTracker,\n        ICommandPalette,\n        ILauncher,\n        IMainMenu,\n        ILayoutRestorer,\n        ISessionContextDialogs,\n        IToolbarWidgetRegistry\n    ],\n    provides: IEditorTracker,\n    autoStart: true\n};\n/**\n * A plugin that provides a status item allowing the user to\n * switch tabs vs spaces and tab widths for text editors.\n */\nexport const tabSpaceStatus = {\n    id: '@jupyterlab/fileeditor-extension:tab-space-status',\n    autoStart: true,\n    requires: [IEditorTracker, ISettingRegistry, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, editorTracker, settingRegistry, translator, statusBar) => {\n        const trans = translator.load('jupyterlab');\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        // Create a menu for switching tabs vs spaces.\n        const menu = new Menu({ commands: app.commands });\n        const command = 'fileeditor:change-tabs';\n        const { shell } = app;\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        menu.addItem({ command, args });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            menu.addItem({ command, args });\n        }\n        // Create the status item.\n        const item = new TabSpaceStatus({ menu, translator });\n        // Keep a reference to the code editor config from the settings system.\n        const updateSettings = (settings) => {\n            item.model.config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n        };\n        void Promise.all([\n            settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n            app.restored\n        ]).then(([settings]) => {\n            updateSettings(settings);\n            settings.changed.connect(updateSettings);\n        });\n        // Add the status item.\n        statusBar.registerStatusItem('@jupyterlab/fileeditor-extension:tab-space-status', {\n            item,\n            align: 'right',\n            rank: 1,\n            isActive: () => {\n                return (!!shell.currentWidget && editorTracker.has(shell.currentWidget));\n            }\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [plugin, tabSpaceStatus];\nexport default plugins;\n/**\n * Activate the editor tracker plugin.\n */\nfunction activate(app, editorServices, browserFactory, settingRegistry, translator, consoleTracker, palette, launcher, menu, restorer, sessionDialogs, toolbarRegistry) {\n    const id = plugin.id;\n    const trans = translator.load('jupyterlab');\n    const namespace = 'editor';\n    let toolbarFactory;\n    if (toolbarRegistry) {\n        toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, id, translator);\n    }\n    const factory = new FileEditorFactory({\n        editorServices,\n        factoryOptions: {\n            name: FACTORY,\n            fileTypes: ['markdown', '*'],\n            defaultFor: ['markdown', '*'],\n            toolbarFactory,\n            translator\n        }\n    });\n    const { commands, restored, shell } = app;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    const isEnabled = () => tracker.currentWidget !== null &&\n        tracker.currentWidget === shell.currentWidget;\n    const commonLanguageFileTypeData = new Map([\n        [\n            'python',\n            [\n                {\n                    fileExt: 'py',\n                    iconName: 'ui-components:python',\n                    launcherLabel: trans.__('Python File'),\n                    paletteLabel: trans.__('New Python File'),\n                    caption: trans.__('Create a new Python file')\n                }\n            ]\n        ],\n        [\n            'julia',\n            [\n                {\n                    fileExt: 'jl',\n                    iconName: 'ui-components:julia',\n                    launcherLabel: trans.__('Julia File'),\n                    paletteLabel: trans.__('New Julia File'),\n                    caption: trans.__('Create a new Julia file')\n                }\n            ]\n        ],\n        [\n            'R',\n            [\n                {\n                    fileExt: 'r',\n                    iconName: 'ui-components:r-kernel',\n                    launcherLabel: trans.__('R File'),\n                    paletteLabel: trans.__('New R File'),\n                    caption: trans.__('Create a new R file')\n                }\n            ]\n        ]\n    ]);\n    // Use available kernels to determine which common file types should have 'Create New' options in the Launcher, File Editor palette, and File menu\n    const getAvailableKernelFileTypes = async () => {\n        var _a, _b;\n        const specsManager = app.serviceManager.kernelspecs;\n        await specsManager.ready;\n        let fileTypes = new Set();\n        const specs = (_b = (_a = specsManager.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs) !== null && _b !== void 0 ? _b : {};\n        Object.keys(specs).forEach(spec => {\n            const specModel = specs[spec];\n            if (specModel) {\n                const exts = commonLanguageFileTypeData.get(specModel.language);\n                exts === null || exts === void 0 ? void 0 : exts.forEach(ext => fileTypes.add(ext));\n            }\n        });\n        return fileTypes;\n    };\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    // Add a console creator to the File menu\n    // Fetch the initial state of the settings.\n    Promise.all([settingRegistry.load(id), restored])\n        .then(([settings]) => {\n        Commands.updateSettings(settings, commands);\n        Commands.updateTracker(tracker);\n        settings.changed.connect(() => {\n            Commands.updateSettings(settings, commands);\n            Commands.updateTracker(tracker);\n        });\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n        Commands.updateTracker(tracker);\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        void tracker.add(widget);\n        Commands.updateWidget(widget.content);\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    // Handle the settings of new widgets.\n    tracker.widgetAdded.connect((sender, widget) => {\n        Commands.updateWidget(widget.content);\n    });\n    Commands.addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory);\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        Commands.addLauncherItems(launcher, trans);\n    }\n    if (palette) {\n        Commands.addPaletteItems(palette, trans);\n    }\n    if (menu) {\n        Commands.addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs);\n    }\n    getAvailableKernelFileTypes()\n        .then(availableKernelFileTypes => {\n        if (launcher) {\n            Commands.addKernelLanguageLauncherItems(launcher, trans, availableKernelFileTypes);\n        }\n        if (palette) {\n            Commands.addKernelLanguagePaletteItems(palette, trans, availableKernelFileTypes);\n        }\n        if (menu) {\n            Commands.addKernelLanguageMenuItems(menu, availableKernelFileTypes);\n        }\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n    });\n    return tracker;\n}\n//# sourceMappingURL=index.js.map"],"names":["autoClosingBracketsNotebook","autoClosingBracketsConsole","CommandIDs","createNew","createNewMarkdown","changeFontSize","lineNumbers","lineWrap","changeTabs","matchBrackets","autoClosingBrackets","autoClosingBracketsUniversal","createConsole","replaceSelection","runCode","runAllCode","markdownPreview","undo","redo","cut","copy","paste","selectAll","FACTORY","userSettings","filterUserSettings","config","filteredConfig","Object","assign","k","keys","includes","CodeEditor","Commands","getCreateConsoleFunction","commands","async","widget","args","_a","options","console","execute","activate","name","context","contentsModel","path","preferredLanguage","model","defaultKernelLanguage","ref","id","insertMode","pathChanged","connect","sender","value","session","setPath","setName","updateWidget","editor","setOptions","addChangeFontSizeCommand","settingRegistry","trans","addCommand","delta","Number","isNaN","error","style","window","getComputedStyle","document","documentElement","cssSize","parseInt","getPropertyValue","currentSize","fontSize","set","catch","reason","message","label","isMenu","__","addLineNumbersCommand","isEnabled","isToggled","addWordWrapCommand","addChangeTabsCommand","insertSpaces","_n","size","tabSize","addMatchBracketsCommand","addAutoClosingBracketsCommand","force","addReplaceSelectionCommand","tracker","_b","text","currentWidget","content","call","addCreateConsoleCommand","icon","consoleIcon","addRunCodeCommand","code","extension","PathExt","selection","getSelection","start","end","selected","column","line","getOffsetAt","substring","MarkdownCodeBlocks","blocks","block","startLine","endLine","getLine","cursor","getCursorPosition","lineCount","setCursorPosition","Promise","resolve","addRunAllCodeCommand","addMarkdownPreviewCommand","mode","isVisible","markdownIcon","addUndoCommand","undoIcon","stylesheet","addRedoCommand","redoIcon","addCutCommand","getTextSelection","Clipboard","isSelected","cutIcon","addCopyCommand","copyIcon","addPasteCommand","clipboard","navigator","clipboardData","readText","Boolean","pasteIcon","addSelectAllCommand","execCommand","selectionObj","cwd","ext","type","then","undefined","factory","addCreateNewCommand","browserFactory","isPalette","paletteLabel","launcherLabel","caption","LabIcon","iconName","textEditorIcon","defaultBrowser","fileExt","addCreateNewMarkdownCommand","addCreateNewToLauncher","launcher","add","command","category","rank","addCreateNewMarkdownToLauncher","addChangeTabsCommandsToPalette","palette","paletteCategory","addItem","addCreateNewCommandToPalette","addCreateNewMarkdownCommandToPalette","addChangeFontSizeCommandsToPalette","addUndoRedoToEditMenu","menu","editMenu","undoers","addEditorViewerToViewMenu","viewMenu","editorViewers","toggleLineNumbers","getOption","setOption","toggleWordWrap","newValue","toggleMatchBrackets","lineNumbersToggled","wordWrapToggled","matchBracketsToggled","addConsoleCreatorToFileMenu","fileMenu","consoleCreators","createConsoleLabel","n","addCodeRunnersToRunMenu","consoleTracker","sessionDialogs","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","current","find","sessionContext","run","runAll","restartAndRunAll","sessionContextDialogs","restart","restarted","updateSettings","settings","get","composite","notifyCommandChanged","updateTracker","forEach","addCommands","addLauncherItems","addKernelLanguageLauncherItems","availableKernelFileTypes","addPaletteItems","addKernelLanguagePaletteItems","addMenuItems","addKernelLanguageMenuItems","newMenu","app","editorServices","translator","restorer","toolbarRegistry","load","toolbarFactory","createToolbarFactory","FileEditorFactory","factoryOptions","fileTypes","defaultFor","restored","shell","WidgetTracker","namespace","commonLanguageFileTypeData","Map","restore","all","changed","widgetCreated","save","docRegistry","addWidgetFactory","widgetAdded","specsManager","serviceManager","kernelspecs","ready","Set","specs","spec","specModel","exts","language","getAvailableKernelFileTypes","requires","IEditorServices","IFileBrowserFactory","ISettingRegistry","ITranslator","optional","IConsoleTracker","ICommandPalette","ILauncher","IMainMenu","ILayoutRestorer","ISessionContextDialogs","IToolbarWidgetRegistry","provides","IEditorTracker","autoStart","tabSpaceStatus","IStatusBar","editorTracker","statusBar","Menu","item","TabSpaceStatus","registerStatusItem","align","isActive","has"],"sourceRoot":""}