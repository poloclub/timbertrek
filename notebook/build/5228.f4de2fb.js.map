{"version":3,"file":"5228.f4de2fb.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/latex/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_markdown.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/sanitizer_options.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/generate_numbering.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/parse_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_rendered_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/is_heading_filtered.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_collapsible_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_code_cell_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_last_heading_level.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_rendered_html_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/codemirror.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag_list.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_item.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_tree.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Maps LaTeX section headings to HTML header levels.\n *\n * ## Notes\n *\n * -   As `part` and `chapter` section headings appear to be less common, assign them to heading level 1.\n *\n * @private\n */\nconst LATEX_LEVELS = {\n    part: 1,\n    chapter: 1,\n    section: 1,\n    subsection: 2,\n    subsubsection: 3,\n    paragraph: 4,\n    subparagraph: 5\n};\n/**\n * Converts array elements to \"entries\".\n *\n * @private\n * @param arr - input array\n * @returns input array\n *\n * @example\n * const arr = toEntries([4,5,6]);\n * // returns [[4,0], [5,1], [6,2]]\n */\nfunction toEntries(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = [arr[i], i];\n    }\n    return arr;\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few LaTeX variants:\n    let mime = editor.content.model.mimeType;\n    return mime === 'text/x-latex' || mime === 'text/x-stex';\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Convert the list into \"entries\" so we can use the line number to scroll the editor upon ToC item click:\n    lines = toEntries(lines);\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    for (let i = 0; i < lines.length; i++) {\n        const RE = /^\\s*\\\\(section|subsection|subsubsection){(.+)}/;\n        const match = lines[i][0].match(RE);\n        if (match) {\n            headings.push({\n                text: match[2],\n                level: LATEX_LEVELS[match[1]],\n                onClick: onClick(lines[i][1])\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for LaTeX files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing LaTeX files\n */\nfunction createLatexGenerator(tracker) {\n    return {\n        tracker,\n        usesLatex: true,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createLatexGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to a Markdown flavor.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor\n *\n * @example\n * const bool = isMarkdown('text/markdown');\n * // returns true\n *\n * @example\n * const bool = isMarkdown('text/plain');\n * // returns false\n */\nfunction isMarkdown(mime) {\n    return (mime === 'text/x-ipythongfm' ||\n        mime === 'text/x-markdown' ||\n        mime === 'text/x-gfm' ||\n        mime === 'text/markdown');\n}\n/**\n * Exports.\n */\nexport { isMarkdown };\n//# sourceMappingURL=is_markdown.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Class for managing Markdown ToC generator options.\n *\n * @private\n */\nclass OptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, options) {\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._widget = widget;\n        this.translator = options.translator || nullTranslator;\n        this.sanitizer = options.sanitizer;\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     */\n    initializeOptions(numbering, numberingH1) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Allowed HTML tags and associated attributes for ToC entries when sanitizing HTML headings.\n *\n * ## Notes\n *\n * -   We specifically disallow anchor tags, since we are adding our own.\n *\n * @private\n */\nconst sanitizerOptions = {\n    allowedTags: [\n        'p',\n        'blockquote',\n        'b',\n        'i',\n        'strong',\n        'em',\n        'strike',\n        'code',\n        'br',\n        'div',\n        'span',\n        'pre',\n        'del'\n    ],\n    allowedAttributes: {\n        // Allow \"class\" attribute for <code> tags.\n        code: ['class'],\n        // Allow \"class\" attribute for <span> tags.\n        span: ['class'],\n        // Allow \"class\" attribute for <div> tags.\n        div: ['class'],\n        // Allow \"class\" attribute for <p> tags.\n        p: ['class'],\n        // Allow \"class\" attribute for <pre> tags.\n        pre: ['class']\n    }\n};\n/**\n * Exports.\n */\nexport { sanitizerOptions };\n//# sourceMappingURL=sanitizer_options.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Renders a Markdown table of contents item.\n *\n * @private\n * @param options - generator options\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(options, item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    // Render item numbering:\n    let numbering = item.numbering && options.numbering ? item.numbering : '';\n    // Render the item:\n    let jsx;\n    if (item.html) {\n        let html = options.sanitizer.sanitize(item.html, sanitizerOptions);\n        jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: numbering + html }, className: 'toc-markdown-cell ' + fontSizeClass }));\n    }\n    else {\n        jsx = React.createElement(\"span\", { className: fontSizeClass },\n            \" \",\n            numbering + item.text);\n    }\n    return jsx;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { numberingIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\n/**\n * Returns a component for rendering a Markdown table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @returns toolbar component\n */\nfunction toolbar(options) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a Markdown table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this.state = { numbering: false };\n            options.initializeOptions(false, options.numberingH1);\n            this._trans = options.translator.load('jupyterlab');\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const toggleNumbering = () => {\n                options.numbering = !options.numbering;\n                this.setState({ numbering: options.numbering });\n            };\n            const icon = (React.createElement(\"div\", { onClick: event => toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' }, icon)));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Maximum heading level:\nconst MAX_HEADING_LEVEL = 6;\n/**\n * Updates numbering dictionary levels.\n *\n * ## Notes\n *\n * -   Mutates a provided dictionary.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns input dictionary\n */\nfunction update(dict, level) {\n    for (let l = level + 1; l <= MAX_HEADING_LEVEL; l++) {\n        if (dict[l] !== void 0) {\n            dict[l] = void 0;\n        }\n    }\n    if (dict[level] === void 0) {\n        dict[level] = 1;\n    }\n    else {\n        dict[level] += 1;\n    }\n    return dict;\n}\n/**\n * Generate the current numbering based on a provided numbering dictionary and the current level.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns numbering\n */\nfunction generateNumbering(dict, level) {\n    if (dict === null) {\n        return;\n    }\n    let numbering = '';\n    dict = update(dict, level);\n    if (level >= 1) {\n        for (let j = 1; j <= level; j++) {\n            numbering += (dict[j] === void 0 ? '0' : dict[j]) + '.';\n        }\n        numbering += ' ';\n    }\n    return numbering;\n}\n/**\n * Exports.\n */\nexport { generateNumbering };\n//# sourceMappingURL=generate_numbering.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Parses a heading, if one exists, from a provided string.\n *\n * ## Notes\n *\n * -   Heading examples:\n *\n *     -   Markdown heading:\n *\n *         ```\n *         # Foo\n *         ```\n *\n *     -   Markdown heading (alternative style):\n *\n *         ```\n *         Foo\n *         ===\n *         ```\n *\n *         ```\n *         Foo\n *         ---\n *         ```\n *\n *     -   HTML heading:\n *\n *         ```\n *         <h3>Foo</h3>\n *         ```\n *\n * @private\n * @param str - input text\n * @returns heading info\n *\n * @example\n * const out = parseHeading('### Foo\\n');\n * // returns {'text': 'Foo', 'level': 3, 'type': 'markdown'}\n *\n * @example\n * const out = parseHeading('Foo\\n===\\n');\n * // returns {'text': 'Foo', 'level': 1, 'type': 'markdown-alt'}\n *\n * @example\n * const out = parseHeading('<h4>Foo</h4>\\n');\n * // returns {'text': 'Foo', 'level': 4, 'type': 'html'}\n *\n * @example\n * const out = parseHeading('Foo');\n * // returns null\n */\nfunction parseHeading(str) {\n    const lines = str.split('\\n');\n    // Case: Markdown heading\n    let match = lines[0].match(/^([#]{1,6}) (.*)/);\n    if (match) {\n        return {\n            text: match[2].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n            level: match[1].length,\n            type: 'markdown'\n        };\n    }\n    // Case: Markdown heading (alternative style)\n    if (lines.length > 1) {\n        match = lines[1].match(/^ {0,3}([=]{2,}|[-]{2,})\\s*$/);\n        if (match) {\n            return {\n                text: lines[0].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n                level: match[1][0] === '=' ? 1 : 2,\n                type: 'markdown-alt'\n            };\n        }\n    }\n    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)\n    match = lines[0].match(/<h([1-6]).*>(.*)<\\/h\\1>/i);\n    if (match) {\n        return {\n            text: match[2],\n            level: parseInt(match[1], 10),\n            type: 'html'\n        };\n    }\n    return null;\n}\n/**\n * Exports.\n */\nexport { parseHeading };\n//# sourceMappingURL=parse_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a \"click\" handler.\n *\n * @private\n * @param heading - heading element\n * @returns \"click\" handler\n */\nfunction onClick(heading) {\n    return () => {\n        heading.scrollIntoView();\n    };\n}\n/**\n * Processes an HTML element containing rendered Markdown and returns a list of headings.\n *\n * @private\n * @param node - HTML element\n * @param sanitizer - HTML sanitizer\n * @param dict - numbering dictionary\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getRenderedHeadings(node, sanitizer, dict, numbering = true, numberingH1 = true) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    let headings = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const heading = nodes[i];\n        let level = parseInt(heading.tagName[1], 10);\n        let text = heading.textContent ? heading.textContent : '';\n        let hide = !numbering;\n        // Show/hide numbering DOM element based on user settings:\n        if (heading.getElementsByClassName('numbering-entry').length > 0) {\n            heading.removeChild(heading.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(heading.innerHTML, sanitizerOptions);\n        html = html.replace('¶', ''); // remove the anchor symbol\n        // Generate a numbering string:\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        // Generate the numbering DOM element:\n        let nhtml = '';\n        if (!hide) {\n            nhtml = '<span class=\"numbering-entry\">' + nstr + '</span>';\n        }\n        // Append the numbering element to the document:\n        heading.innerHTML = nhtml + html;\n        headings.push({\n            level,\n            text: text.replace('¶', ''),\n            numbering: nstr,\n            html,\n            onClick: onClick(heading)\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHeadings };\n//# sourceMappingURL=get_rendered_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\nimport { getHeadings } from './get_headings';\nimport { getRenderedHeadings } from './get_rendered_headings';\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few Markdown variants:\n    return isMarkdown(editor.content.model.mimeType);\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @param options - manage Markdown ToC generator options\n * @returns a list of headings\n */\nfunction generate(editor, options) {\n    let dict = {};\n    let numberingH1 = true;\n    if (options !== undefined) {\n        numberingH1 = options.numberingH1;\n    }\n    return getHeadings(editor.content.model.value.text, onClick, dict, numberingH1);\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for Markdown files.\n *\n * @private\n * @param tracker - file editor tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing Markdown files\n */\nfunction createMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n}\n/**\n * Returns a ToC generator for rendered Markdown files.\n *\n * @param tracker - Markdown viewer tracker\n * @param sanitizer - HTML sanitizer\n * @param widget - table of contents widget\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing rendered Markdown files\n */\nfunction createRenderedMarkdownGenerator(tracker, widget, sanitizer, translator, settings) {\n    let numberingH1 = true;\n    if (settings) {\n        numberingH1 = settings.composite.numberingH1;\n    }\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        numberingH1: numberingH1,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    if (settings) {\n        settings.changed.connect(() => {\n            options.numberingH1 = settings.composite.numberingH1;\n        });\n    }\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param widget - Markdown document widget\n     * @returns a list of headings\n     */\n    function generate(widget) {\n        let dict = {};\n        return getRenderedHeadings(widget.content.node, sanitizer, dict, options.numbering, options.numberingH1);\n    }\n}\n/**\n * Exports.\n */\nexport { createMarkdownGenerator };\nexport { createRenderedMarkdownGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a provided string and returns a list of headings.\n *\n * @private\n * @param text - input text\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param numberingH1 - whether first level header should be numbered\n * @returns list of headings\n */\nfunction getHeadings(text, onClick, dict, numberingH1) {\n    // Split the text into lines:\n    const lines = text.split('\\n');\n    // Iterate over the lines to get the header level and text for each line:\n    let headings = [];\n    let FLG;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        // Don't check for Markdown headings if in a code block:\n        if (line.indexOf('```') === 0) {\n            FLG = !FLG;\n        }\n        if (FLG) {\n            continue;\n        }\n        line += lines[i + 1] ? '\\n' + lines[i + 1] : '';\n        const heading = parseHeading(line); // append the next line to capture alternative style Markdown headings\n        if (heading) {\n            let level = heading.level;\n            if (!numberingH1) {\n                level -= 1;\n            }\n            headings.push({\n                text: heading.text,\n                numbering: generateNumbering(dict, level),\n                level: heading.level,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getHeadings };\n//# sourceMappingURL=get_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Cell running status\n */\nexport var RunningStatus;\n(function (RunningStatus) {\n    /**\n     * Cell is idle\n     */\n    RunningStatus[RunningStatus[\"Idle\"] = -1] = \"Idle\";\n    /**\n     * Cell execution is scheduled\n     */\n    RunningStatus[RunningStatus[\"Scheduled\"] = 0] = \"Scheduled\";\n    /**\n     * Cell is running\n     */\n    RunningStatus[RunningStatus[\"Running\"] = 1] = \"Running\";\n})(RunningStatus || (RunningStatus = {}));\n/**\n * Tests whether a heading is a notebook heading.\n *\n * @param heading - heading to test\n * @returns boolean indicating whether a heading is a notebook heading\n */\nexport function isNotebookHeading(heading) {\n    return heading.type !== undefined && heading.cellRef !== undefined;\n}\n//# sourceMappingURL=headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a boolean indicating whether a heading is filtered out by selected tags.\n *\n * @private\n * @param heading - notebook heading\n * @param tags - list of tags\n * @returns boolean indicating whether a heading is filtered\n */\nfunction isHeadingFiltered(heading, tags) {\n    if (tags.length === 0) {\n        return false;\n    }\n    if (heading && heading.cellRef) {\n        let meta = heading.cellRef.model.metadata;\n        let ctags = meta.get('tags');\n        if (ctags) {\n            for (let j = 0; j < ctags.length; j++) {\n                let name = ctags[j];\n                for (let k = 0; k < tags.length; k++) {\n                    if (tags[k] === name) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * Exports.\n */\nexport { isHeadingFiltered };\n//# sourceMappingURL=is_heading_filtered.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @returns result tuple\n */\nexport function appendHeading(headings, heading, prev, collapseLevel, tags) {\n    if (heading && !isHeadingFiltered(heading, tags) && heading.text) {\n        // Determine whether this heading is a child of a \"header\" notebook heading...\n        if (prev && prev.type === 'header') {\n            for (let j = headings.length - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        if (collapseLevel < 0) {\n            headings.push(heading);\n        }\n        prev = heading;\n    }\n    return [headings, prev];\n}\n//# sourceMappingURL=append_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { appendCollapsibleHeading } from './append_collapsible_heading';\nimport { appendHeading } from './append_heading';\n/**\n * Appends a Markdown notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param showMarkdown - boolean indicating whether to show Markdown previews\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendMarkdownHeading(heading, headings, prev, collapseLevel, tags, collapsed, showMarkdown, cellCollapseMetadata) {\n    if (heading && heading.type === 'markdown' && showMarkdown) {\n        // Append a Markdown preview heading:\n        [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, tags);\n    }\n    else if (heading && heading.type === 'header') {\n        [headings, prev, collapseLevel] = appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata);\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendMarkdownHeading };\n//# sourceMappingURL=append_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a collapsible notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param cellCollapseMetadata - indicates which metadata string to use based on the cellSyncSetting\n * @returns result tuple\n */\nfunction appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed, cellCollapseMetadata) {\n    const len = headings.length;\n    if (!isHeadingFiltered(heading, tags)) {\n        // If the previous heading is a higher level heading, update the heading to note that it has a child heading...\n        if (prev && prev.type === 'header' && prev.level < heading.level) {\n            for (let j = len - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        // If the collapse level doesn't include the heading, or, if there is no collapsing, add to headings and adjust the collapse level...\n        if (collapseLevel >= heading.level || collapseLevel < 0) {\n            headings.push(heading);\n            collapseLevel = collapsed ? heading.level : -1;\n        }\n        prev = heading;\n    }\n    else if (prev && heading.level <= prev.level) {\n        // If the heading is filtered out and has a lower level previous heading, determine if the heading has a parent...\n        let parent = false;\n        let k = len - 1;\n        for (; k >= 0; k--) {\n            if (headings[k].level < heading.level) {\n                prev = headings[k];\n                parent = true;\n                break;\n            }\n        }\n        // If there is no parent, reset collapsing...\n        if (parent) {\n            const isCollapsed = headings[k + 1].cellRef.model.metadata.get(cellCollapseMetadata);\n            collapseLevel = isCollapsed ? headings[k + 1].level : -1;\n        }\n        else {\n            prev = null;\n            collapseLevel = -1;\n        }\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendCollapsibleHeading };\n//# sourceMappingURL=append_collapsible_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { RunningStatus } from '../../utils/headings';\n/**\n * Returns a code entry notebook heading from a code string.\n *\n * @private\n * @param text - code string\n * @param onClick - callback which returns a \"click\" handler\n * @param executionCount - execution count\n * @param lastLevel - last heading level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getCodeCellHeading(text, onClick, executionCount, lastLevel, cellRef, index = -1, isRunning = RunningStatus.Idle) {\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    if (text) {\n        const lines = text.split('\\n');\n        const len = Math.min(lines.length, 3);\n        let str = '';\n        let i = 0;\n        for (; i < len - 1; i++) {\n            str += lines[i] + '\\n';\n        }\n        str += lines[i];\n        headings.push({\n            text: str,\n            level: lastLevel + 1,\n            onClick: onClick(0),\n            type: 'code',\n            prompt: executionCount,\n            cellRef: cellRef,\n            hasChild: false,\n            index: index,\n            isRunning\n        });\n    }\n    return headings[0];\n}\n/**\n * Exports.\n */\nexport { getCodeCellHeading };\n//# sourceMappingURL=get_code_cell_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns the last heading level.\n *\n * @private\n * @param headings - list of notebook headings\n * @returns heading level\n */\nfunction getLastHeadingLevel(headings) {\n    if (headings.length > 0) {\n        let loc = headings.length - 1;\n        while (loc >= 0) {\n            if (headings[loc].type === 'header') {\n                return headings[loc].level;\n            }\n            loc -= 1;\n        }\n    }\n    return 0;\n}\n/**\n * Exports.\n */\nexport { getLastHeadingLevel };\n//# sourceMappingURL=get_last_heading_level.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { RunningStatus } from '../../utils/headings';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a Markdown string and returns a notebook heading.\n *\n * @private\n * @param text - Markdown string\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getMarkdownHeadings(text, onClick, dict, lastLevel, cellRef, index = -1, isRunning = RunningStatus.Idle) {\n    const callback = onClick(0);\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    for (const line of text.split('\\n')) {\n        const heading = parseHeading(line);\n        if (heading) {\n            headings.push({\n                text: heading.text,\n                level: heading.level,\n                numbering: generateNumbering(dict, heading.level),\n                onClick: callback,\n                type: 'header',\n                cellRef: cellRef,\n                hasChild: false,\n                isRunning,\n                index\n            });\n        }\n        else {\n            headings.push({\n                text: text,\n                level: lastLevel + 1,\n                onClick: callback,\n                type: 'markdown',\n                cellRef: cellRef,\n                hasChild: false,\n                isRunning,\n                index\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getMarkdownHeadings };\n//# sourceMappingURL=get_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { RunningStatus } from '../../utils/headings';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a notebook heading from an HTML element.\n *\n * @private\n * @param node - HTML element\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param numbering - boolean indicating whether to enable numbering\n * @param numberingH1 - boolean indicating whether to enable first level headers numbering\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getRenderedHTMLHeadings(node, onClick, sanitizer, dict, lastLevel, numbering = false, numberingH1 = true, cellRef, index = -1, isRunning = RunningStatus.Idle) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6, p');\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    let headings = [];\n    for (const el of nodes) {\n        if (el.classList.contains('jp-toc-ignore')) {\n            // skip this element if a special class name is included\n            continue;\n        }\n        if (el.nodeName.toLowerCase() === 'p') {\n            if (el.innerHTML) {\n                let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n                headings.push({\n                    level: lastLevel + 1,\n                    html: html.replace('¶', ''),\n                    text: el.textContent ? el.textContent : '',\n                    onClick: onClick(el),\n                    type: 'markdown',\n                    cellRef: cellRef,\n                    hasChild: false,\n                    index: index,\n                    isRunning\n                });\n            }\n            continue;\n        }\n        if (el.getElementsByClassName('numbering-entry').length > 0) {\n            el.removeChild(el.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n        html = html.replace('¶', '');\n        let level = parseInt(el.tagName[1], 10);\n        if (!numberingH1) {\n            level -= 1;\n        }\n        let nstr = generateNumbering(dict, level);\n        if (numbering) {\n            const nhtml = document.createElement('span');\n            nhtml.classList.add('numbering-entry');\n            nhtml.textContent = nstr !== null && nstr !== void 0 ? nstr : '';\n            el.insertBefore(nhtml, el.firstChild);\n        }\n        headings.push({\n            level: level,\n            text: el.textContent ? el.textContent : '',\n            numbering: nstr,\n            html: html,\n            onClick: onClick(el),\n            type: 'header',\n            cellRef: cellRef,\n            hasChild: false,\n            index: index,\n            isRunning\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHTMLHeadings };\n//# sourceMappingURL=get_rendered_html_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\n/**\n * Class for managing notebook ToC generator options.\n *\n * @private\n */\nclass OptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param notebook - notebook tracker\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, notebook, options) {\n        this._preRenderedToolbar = null;\n        this._filtered = [];\n        this._showCode = false;\n        this._showMarkdown = false;\n        this._showTags = false;\n        this._tagTool = null;\n        this._numbering = options.numbering;\n        this._numberingH1 = options.numberingH1;\n        this._includeOutput = options.includeOutput;\n        this._syncCollapseState = options.syncCollapseState;\n        this._widget = widget;\n        this._notebook = notebook;\n        this.sanitizer = options.sanitizer;\n        this.storeTags = [];\n        this.translator = options.translator || nullTranslator;\n        this._collapseChanged = new Signal(this);\n    }\n    /**\n     * Gets/sets the tag tool component.\n     */\n    set tagTool(tagTool) {\n        this._tagTool = tagTool;\n    }\n    get tagTool() {\n        return this._tagTool;\n    }\n    /**\n     * Sets notebook meta data.\n     */\n    set notebookMetadata(value) {\n        if (this._notebook.currentWidget != null) {\n            this._notebook.currentWidget.model.metadata.set(value[0], value[1]);\n        }\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n        this.notebookMetadata = ['toc-autonumbering', this._numbering];\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Gets/sets ToC generator numbering h1 headers.\n     */\n    set numberingH1(value) {\n        if (this._numberingH1 != value) {\n            this._numberingH1 = value;\n            this._widget.update();\n        }\n    }\n    get numberingH1() {\n        return this._numberingH1;\n    }\n    /**\n     * Toggles whether cell outputs should be included in headings.\n     */\n    set includeOutput(value) {\n        if (this._includeOutput != value) {\n            this._includeOutput = value;\n            this._widget.update();\n        }\n    }\n    get includeOutput() {\n        return this._includeOutput;\n    }\n    /**\n     * Gets/sets option for ToC heading collapsing to be reflected in Notebook and vice versa\n     */\n    set syncCollapseState(value) {\n        if (this._syncCollapseState != value) {\n            this._syncCollapseState = value;\n            this._widget.update();\n        }\n    }\n    get syncCollapseState() {\n        return this._syncCollapseState;\n    }\n    /**\n     * Toggles whether to show code previews in the table of contents.\n     */\n    set showCode(value) {\n        this._showCode = value;\n        this.notebookMetadata = ['toc-showcode', this._showCode];\n        this._widget.update();\n    }\n    get showCode() {\n        return this._showCode;\n    }\n    /**\n     * Toggles whether to show Markdown previews in the table of contents.\n     */\n    set showMarkdown(value) {\n        this._showMarkdown = value;\n        this.notebookMetadata = ['toc-showmarkdowntxt', this._showMarkdown];\n        this._widget.update();\n    }\n    get showMarkdown() {\n        return this._showMarkdown;\n    }\n    /**\n     * Signal emitted when a \"collapse\" twist button is pressed in the ToC\n     */\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n    /**\n     * Toggles whether to show tags in the table of contents.\n     */\n    set showTags(value) {\n        this._showTags = value;\n        this.notebookMetadata = ['toc-showtags', this._showTags];\n        this._widget.update();\n    }\n    get showTags() {\n        return this._showTags;\n    }\n    /**\n     * Returns a list of selected tags.\n     */\n    get filtered() {\n        if (this.tagTool) {\n            this._filtered = this.tagTool.filtered;\n        }\n        else if (this.storeTags.length > 0) {\n            this._filtered = this.storeTags;\n        }\n        else {\n            this._filtered = [];\n        }\n        return this._filtered;\n    }\n    /**\n     * Gets/sets a pre-rendered a toolbar.\n     */\n    set preRenderedToolbar(value) {\n        this._preRenderedToolbar = value;\n    }\n    get preRenderedToolbar() {\n        return this._preRenderedToolbar;\n    }\n    /**\n     * Updates a table of contents widget.\n     */\n    updateWidget() {\n        this._widget.update();\n    }\n    /**\n     * Updates a table of contents widget and\n     * emits a signal in case an extension wants\n     * to perform an action when the collapse button\n     * is pressed.\n     */\n    updateAndCollapse(args) {\n        this._collapseChanged.emit(args);\n        this._widget.update();\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     * @param numberingH1 - boolean indicating whether to number first level items\n     * @param includeOutput - boolean indicating whether cell outputs should be included in headings\n     * @param syncCollapseState - boolean indicating whether collapsing in ToC should be reflected in Notebook and vice versa\n     * @param showCode - boolean indicating whether to show code previews\n     * @param showMarkdown - boolean indicating whether to show Markdown previews\n     * @param showTags - boolean indicating whether to show tags\n     */\n    initializeOptions(numbering, numberingH1, includeOutput, syncCollapseState, showCode, showMarkdown, showTags) {\n        this._numbering = numbering;\n        this._numberingH1 = numberingH1;\n        this._includeOutput = includeOutput;\n        this._syncCollapseState = syncCollapseState;\n        this._showCode = showCode;\n        this._showMarkdown = showMarkdown;\n        this._showTags = showTags;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Class for rendering a code component.\n *\n * @private\n */\nclass CodeComponent extends React.Component {\n    /**\n     * Returns a code component.\n     *\n     * @param props - component properties\n     * @returns code component\n     */\n    constructor(props) {\n        super(props);\n        this.state = { heading: props.heading };\n    }\n    /**\n     * Updates code component state.\n     *\n     * @param props - component properties\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this.setState({ heading: nextProps.heading });\n    }\n    /**\n     * Renders a code component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        // Get the current rendered CodeMirror:\n        let html = this.state.heading.cellRef.editor.host.innerHTML;\n        // Sanitize the HTML:\n        html = this.props.sanitizer.sanitize(html, sanitizerOptions);\n        return (React.createElement(\"div\", { className: \"cm-toc\", dangerouslySetInnerHTML: { __html: html } }));\n    }\n}\n/**\n * Exports.\n */\nexport { CodeComponent };\n//# sourceMappingURL=codemirror.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { classes, ellipsesIcon } from '@jupyterlab/ui-components';\nimport { ElementExt } from '@lumino/domutils';\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\nimport { CodeComponent } from './codemirror';\n/**\n * Class name of the toc item list.\n *\n * @private\n */\nconst TOC_TREE_CLASS = 'jp-TableOfContents-content';\n/**\n * Renders a notebook table of contents item.\n *\n * @param options - generator options\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns rendered item\n */\nexport function render(options, tracker, widget, item, toc = []) {\n    if (item.type === 'markdown' || item.type === 'header') {\n        const fontSizeClass = item.type === 'header'\n            ? `toc-level-size-${item.level}`\n            : 'toc-level-size-default';\n        const numbering = item.numbering && options.numbering ? item.numbering : '';\n        const cellCollapseMetadata = options.syncCollapseState\n            ? MARKDOWN_HEADING_COLLAPSED\n            : 'toc-hr-collapsed';\n        if (item.type === 'header' || options.showMarkdown) {\n            const header = item.html ? (React.createElement(\"span\", { dangerouslySetInnerHTML: {\n                    __html: numbering +\n                        options.sanitizer.sanitize(item.html, sanitizerOptions)\n                }, className: `${item.type}-cell toc-cell-item` })) : (React.createElement(\"span\", { className: `${item.type}-cell toc-cell-item` }, numbering + item.text));\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has(cellCollapseMetadata)) {\n                    collapsed = item.cellRef.model.metadata.get(cellCollapseMetadata);\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(tracker, cellCollapseMetadata, item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : null;\n                return (React.createElement(NotebookHeading, { isActive: tracker.activeCell === item.cellRef ||\n                        previousHeader(tracker, item, toc), className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : ''), isRunning: item.isRunning, area: widget.node.querySelector(`.${TOC_TREE_CLASS}`) },\n                    button,\n                    header,\n                    ellipseButton));\n            }\n            else {\n                return header;\n            }\n        }\n    }\n    if (options.showCode && item.type === 'code') {\n        // Render code cells:\n        return (React.createElement(\"div\", { className: \"toc-code-cell-div\" },\n            React.createElement(\"div\", { className: \"toc-code-cell-prompt\" }, item.prompt),\n            React.createElement(\"span\", { className: 'toc-code-span' },\n                React.createElement(CodeComponent, { sanitizer: options.sanitizer, heading: item }))));\n    }\n    return null;\n    /**\n     * Callback invoked upon encountering a \"click\" event.\n     *\n     * @private\n     * @param heading - notebook heading that was clicked\n     */\n    function onClick(tracker, cellCollapseMetadata, heading) {\n        let collapsed = false;\n        let syncCollapseState = options.syncCollapseState;\n        if (heading.cellRef.model.metadata.get(cellCollapseMetadata)) {\n            collapsed = heading.cellRef.model.metadata.get(cellCollapseMetadata);\n        }\n        if (heading) {\n            if (syncCollapseState) {\n                // if collapse state is synced, update state here\n                if (tracker.currentWidget) {\n                    NotebookActions.setHeadingCollapse(heading.cellRef, !collapsed, tracker.currentWidget.content);\n                }\n            }\n            else {\n                if (collapsed) {\n                    heading.cellRef.model.metadata.delete(cellCollapseMetadata);\n                }\n                else {\n                    heading.cellRef.model.metadata.set(cellCollapseMetadata, true);\n                }\n            }\n            options.updateAndCollapse({\n                heading: heading,\n                collapsedState: collapsed,\n                tocType: 'notebook'\n            });\n        }\n        else {\n            options.updateWidget();\n        }\n    }\n}\n/**\n * Used to find the nearest above heading to an active notebook cell\n *\n * @private\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns true if heading is nearest above a selected cell, otherwise false\n */\nfunction previousHeader(tracker, item, toc) {\n    if (item.index > -1 || (toc === null || toc === void 0 ? void 0 : toc.length)) {\n        let activeCellIndex = tracker.currentWidget.content.activeCellIndex;\n        let headerIndex = item.index;\n        // header index has to be less than the active cell index\n        if (headerIndex < activeCellIndex) {\n            let tocIndexOfNextHeader = toc.indexOf(item) + 1;\n            // return true if header is the last header\n            if (tocIndexOfNextHeader >= toc.length) {\n                return true;\n            }\n            // return true if the next header cells index is greater than the active cells index\n            let nextHeaderIndex = toc === null || toc === void 0 ? void 0 : toc[tocIndexOfNextHeader].index;\n            if (nextHeaderIndex > activeCellIndex) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * React component for a single toc heading\n *\n * @private\n */\nfunction NotebookHeading(props) {\n    const itemRef = React.useRef(null);\n    const isActive = props.isActive;\n    React.useEffect(() => {\n        if (isActive && itemRef.current && props.area) {\n            ElementExt.scrollIntoViewIfNeeded(props.area, itemRef.current.parentElement);\n        }\n    }, [isActive]);\n    return (React.createElement(\"div\", { ref: itemRef, className: classes(props.className, isActive ? 'toc-active-cell' : ''), \"data-running\": props.isRunning }, props.children));\n}\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Abstract class defining a React component containing one tag label.\n *\n * @private\n */\nclass TagComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n    }\n    /**\n     * Renders a component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        const tag = this.props.tag;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"toc-tag-label\", key: new Date().toLocaleTimeString() }, tag)));\n    }\n}\n/**\n * Exports.\n */\nexport { TagComponent };\n//# sourceMappingURL=tag.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TagComponent } from './tag';\n/**\n * Class for a React component that renders all tags in a list.\n *\n * @private\n */\nclass TagListComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Toggles whether a tag is selected when clicked.\n         *\n         * @param name - tag name\n         */\n        this.selectedTagWithName = (name) => {\n            if (this.props.selectedTags.indexOf(name) >= 0) {\n                this.props.selectionStateHandler(name, false);\n            }\n            else {\n                this.props.selectionStateHandler(name, true);\n            }\n        };\n        /**\n         * Renders a tag component for each tag within a list of tags.\n         *\n         * @param tags - list of tags\n         */\n        this.renderTagComponents = (tags) => {\n            const selectedTags = this.props.selectedTags;\n            const selectedTagWithName = this.selectedTagWithName;\n            return tags.map((tag, index) => {\n                const tagClass = selectedTags.indexOf(tag) >= 0\n                    ? 'toc-selected-tag toc-tag'\n                    : 'toc-unselected-tag toc-tag';\n                return (React.createElement(\"div\", { key: tag, className: tagClass, onClick: event => {\n                        selectedTagWithName(tag);\n                    }, tabIndex: 0 },\n                    React.createElement(TagComponent, { selectionStateHandler: this.props.selectionStateHandler, selectedTags: this.props.selectedTags, tag: tag })));\n            });\n        };\n        this.state = { selected: this.props.selectedTags };\n    }\n    /**\n     * Renders the list of tags in the ToC tags dropdown.\n     *\n     * @returns rendered list\n     */\n    render() {\n        let tags = this.props.tags;\n        let jsx = null;\n        if (tags) {\n            jsx = this.renderTagComponents(tags);\n        }\n        return React.createElement(\"div\", { className: \"toc-tag-holder\" }, jsx);\n    }\n}\n/**\n * Exports.\n */\nexport { TagListComponent };\n//# sourceMappingURL=tag_list.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport * as React from 'react';\nimport { TagListComponent } from './tag_list';\n/**\n * Tag dropdown React component.\n *\n * @private\n */\nclass TagsToolComponent extends React.Component {\n    /**\n     * Returns a component.\n     *\n     * @param props - component properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Changes the dropdown selection state.\n         *\n         * @param newState - new state\n         * @param add - boolean indicating whether to add to selection\n         */\n        this.changeSelectionState = (newState, add) => {\n            let tags = this.state.selected;\n            if (add) {\n                tags.push(newState);\n                this.setState({ selected: tags });\n                this.filterTags(tags);\n            }\n            else {\n                let selected = [];\n                for (let i = 0; i < tags.length; i++) {\n                    if (tags[i] !== newState) {\n                        selected.push(tags[i]);\n                    }\n                }\n                this.setState({ selected: selected });\n                this.filterTags(selected);\n            }\n        };\n        /**\n         * De-selects all tags in the dropdown and clear filters in the ToC.\n         */\n        this.deselectAll = () => {\n            this.setState({ selected: [] });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Select all the cells that contains all of the current tags and activates the first of those cells.\n         */\n        this.selectAllCellsWithCurrentTags = () => {\n            const tags = this.state.selected;\n            const panel = this.props.tracker.currentWidget;\n            const widgets = panel === null || panel === void 0 ? void 0 : panel.content.widgets;\n            panel === null || panel === void 0 ? void 0 : panel.content.deselectAll();\n            let changedActive = false;\n            widgets === null || widgets === void 0 ? void 0 : widgets.forEach((cell, ix) => {\n                const hasAllCurrentTags = tags.every(tag => this.containsTag(tag, cell));\n                if (hasAllCurrentTags) {\n                    if (!changedActive) {\n                        if (panel) {\n                            panel.content.activeCellIndex = ix;\n                        }\n                        changedActive = true;\n                    }\n                    panel === null || panel === void 0 ? void 0 : panel.content.select(cell);\n                }\n            });\n        };\n        /**\n         * Filters the ToC by according to selected tags.\n         *\n         * @param selected - selected tags\n         */\n        this.filterTags = (selected) => {\n            this.setState({ selected });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Updates filters.\n         */\n        this.updateFilters = () => {\n            let tmp = [];\n            let idx = 0;\n            let update = false;\n            for (let i = 0; i < this.state.selected.length; i++) {\n                if (this.props.tags.indexOf(this.state.selected[i]) > -1) {\n                    tmp[idx] = this.state.selected[i];\n                    idx += 1;\n                }\n                else if (this.props.options.showTags === true) {\n                    update = true;\n                }\n            }\n            if (update) {\n                this.filterTags(tmp);\n                this.setState({ selected: tmp });\n            }\n        };\n        this.state = {\n            selected: this.props.inputFilter\n        };\n        const translator = this.props.translator || nullTranslator;\n        this._trans = translator.load('jupyterlab');\n    }\n    /**\n     * Returns a list of selected tags.\n     *\n     * @returns tag list\n     */\n    get filtered() {\n        return this.state.selected;\n    }\n    /**\n     * Checks whether a cell has a provided tag.\n     *\n     * @param tag - tag\n     * @param cell - cell reference\n     * @returns boolean indicating whether a cell has a provided tag\n     */\n    containsTag(tag, cell) {\n        if (cell === null) {\n            return false;\n        }\n        let tagList = cell.model.metadata.get('tags');\n        if (tagList) {\n            for (let i = 0; i < tagList.length; i++) {\n                if (tagList[i] === tag) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Updates filters.\n     */\n    UNSAFE_componentWillUpdate() {\n        this.updateFilters();\n    }\n    /**\n     * Renders the interior of the tag dropdown.\n     *\n     * @returns rendered component\n     */\n    render() {\n        let jsx = (React.createElement(\"div\", { className: \"toc-no-tags-div\" }, this._trans.__('No Tags Available')));\n        let text;\n        if (this.state.selected.length === 0) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button-na' }, this._trans.__('Clear Filters')));\n        }\n        else if (this.state.selected.length === 1) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear 1 Filter\",\n                ' '));\n        }\n        else {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear \",\n                this.state.selected.length,\n                \" Filters\",\n                ' '));\n        }\n        let command;\n        if (this.state.selected.length === 0) {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button-na', role: \"text\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags') }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        else {\n            command = (React.createElement(\"span\", { className: 'toc-filter-button', role: \"button\", \"aria-label\": this._trans.__('Select All Cells With Current Tags'), title: this._trans.__('Select All Cells With Current Tags'), onClick: this.selectAllCellsWithCurrentTags, onKeyDown: this.selectAllCellsWithCurrentTags }, this._trans.__('Select All Cells With Current Tags')));\n        }\n        if (this.props.tags && this.props.tags.length > 0) {\n            jsx = (React.createElement(\"div\", { className: 'toc-tags-container' },\n                React.createElement(TagListComponent, { tags: this.props.tags, selectionStateHandler: this.changeSelectionState, selectedTags: this.state.selected }),\n                text,\n                command));\n        }\n        return jsx;\n    }\n}\n/**\n * Exports.\n */\nexport { TagsToolComponent };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { MARKDOWN_HEADING_COLLAPSED } from '@jupyterlab/cells';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isDOM } from '../../utils/is_dom';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { appendHeading } from './append_heading';\nimport { appendMarkdownHeading } from './append_markdown_heading';\nimport { getCodeCellHeading } from './get_code_cell_heading';\nimport { getLastHeadingLevel } from './get_last_heading_level';\nimport { getMarkdownHeadings } from './get_markdown_heading';\nimport { getRenderedHTMLHeadings } from './get_rendered_html_heading';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\nimport { RunningStatus } from '../../utils/headings';\n/**\n * Returns a ToC generator for notebooks.\n *\n * @param tracker - notebook tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param translator - Language translator\n * @param settings - advanced settings for toc extension\n * @returns ToC generator capable of parsing notebooks\n */\nexport function createNotebookGenerator(tracker, widget, sanitizer, translator, settings) {\n    return new NotebookGenerator(tracker, widget, sanitizer, translator, settings);\n}\nclass NotebookGenerator {\n    /**\n     * Notebook Table of Content Generator constructor\n     *\n     * @param tracker - notebook tracker\n     * @param widget - table of contents widget\n     * @param sanitizer - HTML sanitizer\n     * @param translator - Language translator\n     * @param settings - advanced settings for toc extension\n     */\n    constructor(tracker, widget, sanitizer, translator, settings) {\n        /**\n         * Renders a table of contents item.\n         *\n         * @param item - heading to render\n         * @param toc - list of all headers to render\n         * @returns rendered item\n         */\n        this.itemRenderer = (item, toc = []) => {\n            return render(this.options, this.tracker, this.widget, item, toc);\n        };\n        this.sanitizer = sanitizer;\n        this.tracker = tracker;\n        this.widget = widget;\n        this._runningCells = new Array();\n        let numberingH1 = true;\n        let includeOutput = true;\n        let syncCollapseState = false;\n        if (settings) {\n            numberingH1 = settings.composite.numberingH1;\n            includeOutput = settings.composite.includeOutput;\n            syncCollapseState = settings.composite.syncCollapseState;\n        }\n        const options = (this.options = new OptionsManager(widget, tracker, {\n            numbering: false,\n            numberingH1: numberingH1,\n            includeOutput: includeOutput,\n            syncCollapseState: syncCollapseState,\n            sanitizer: sanitizer,\n            translator: translator || nullTranslator\n        }));\n        if (settings) {\n            settings.changed.connect(() => {\n                options.numberingH1 = settings.composite.numberingH1;\n                options.includeOutput = settings.composite.includeOutput;\n                options.syncCollapseState = settings.composite\n                    .syncCollapseState;\n            });\n        }\n        tracker.activeCellChanged.connect((sender, args) => {\n            widget.update();\n        });\n        NotebookActions.executionScheduled.connect((_, args) => {\n            if (!this._runningCells.includes(args.cell)) {\n                this._runningCells.push(args.cell);\n            }\n        });\n        NotebookActions.executed.connect((_, args) => {\n            this._runningCells.forEach((cell, index) => {\n                if (cell === args.cell) {\n                    this._runningCells.splice(index, 1);\n                }\n            });\n        });\n    }\n    /**\n     * Signal to indicate that a collapse event happened to this heading\n     * within the ToC.\n     */\n    get collapseChanged() {\n        return this.options.collapseChanged;\n    }\n    /**\n     * Returns a toolbar generator.\n     *\n     * @returns toolbar generator\n     */\n    toolbarGenerator() {\n        return toolbar(this.options, this.tracker);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @param panel - notebook widget\n     * @returns a list of headings\n     */\n    generate(panel) {\n        var _a;\n        let headings = [];\n        let collapseLevel = -1;\n        let dict = {};\n        // Initialize a variable for keeping track of the previous heading:\n        let prev = null;\n        // Generate headings by iterating through all notebook cells...\n        for (let i = 0; i < panel.content.widgets.length; i++) {\n            let cell = panel.content.widgets[i];\n            let model = cell.model;\n            let cellCollapseMetadata = this.options.syncCollapseState\n                ? MARKDOWN_HEADING_COLLAPSED\n                : 'toc-hr-collapsed';\n            const collapsed = (_a = model.metadata.get(cellCollapseMetadata)) !== null && _a !== void 0 ? _a : false;\n            const isRunning = this._runningCells.includes(cell)\n                ? this._runningCells[0] === cell\n                    ? RunningStatus.Running\n                    : RunningStatus.Scheduled\n                : RunningStatus.Idle;\n            switch (model.type) {\n                case 'code': {\n                    if (!this.widget || (this.widget && this.options.showCode)) {\n                        const onClick = (line) => {\n                            return () => {\n                                panel.content.activeCellIndex = i;\n                                cell.node.scrollIntoView();\n                            };\n                        };\n                        const count = cell.model.executionCount;\n                        const executionIndicator = count !== null && count !== void 0 ? count : (isRunning !== RunningStatus.Idle ? '*' : ' ');\n                        let executionCount = `[${executionIndicator}]: `;\n                        let heading = getCodeCellHeading(model.value.text, onClick, executionCount, getLastHeadingLevel(headings), cell, i, isRunning);\n                        [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, this.options.filtered);\n                    }\n                    if (this.options.includeOutput) {\n                        // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...\n                        for (let j = 0; j < model.outputs.length; j++) {\n                            const m = model.outputs.get(j);\n                            let dtypes = Object.keys(m.data);\n                            dtypes = dtypes.filter(t => isMarkdown(t) || isDOM(t));\n                            if (!dtypes.length) {\n                                continue;\n                            }\n                            const onClick = (el) => {\n                                return () => {\n                                    panel.content.activeCellIndex = i;\n                                    panel.content.mode = 'command';\n                                    el.scrollIntoView();\n                                };\n                            };\n                            let htmlHeadings = getRenderedHTMLHeadings(cell.outputArea.widgets[j].node, onClick, this.sanitizer, dict, getLastHeadingLevel(headings), this.options.numbering, this.options.numberingH1, cell, i, isRunning);\n                            for (const heading of htmlHeadings) {\n                                [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, this.options.filtered, collapsed, this.options.showMarkdown, cellCollapseMetadata);\n                            }\n                        }\n                    }\n                    break;\n                }\n                case 'markdown': {\n                    let mcell = cell;\n                    let heading;\n                    let lastLevel = getLastHeadingLevel(headings);\n                    // If the cell is rendered, generate the ToC items from the HTML...\n                    if (mcell.rendered && !mcell.inputHidden) {\n                        const onClick = (el) => {\n                            return () => {\n                                if (!mcell.rendered) {\n                                    panel.content.activeCellIndex = i;\n                                    el.scrollIntoView();\n                                }\n                                else {\n                                    panel.content.mode = 'command';\n                                    cell.node.scrollIntoView();\n                                    panel.content.activeCellIndex = i;\n                                }\n                            };\n                        };\n                        const htmlHeadings = getRenderedHTMLHeadings(cell.node, onClick, this.sanitizer, dict, lastLevel, this.options.numbering, this.options.numberingH1, cell, i, isRunning);\n                        for (heading of htmlHeadings) {\n                            [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, this.options.filtered, collapsed, this.options.showMarkdown, cellCollapseMetadata);\n                        }\n                        // If not rendered, generate ToC items from the cell text...\n                    }\n                    else {\n                        const onClick = (line) => {\n                            return () => {\n                                panel.content.activeCellIndex = i;\n                                cell.node.scrollIntoView();\n                            };\n                        };\n                        const markdownHeadings = getMarkdownHeadings(model.value.text, onClick, dict, lastLevel, cell, i, isRunning);\n                        for (heading of markdownHeadings) {\n                            [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, this.options.filtered, collapsed, this.options.showMarkdown, cellCollapseMetadata);\n                        }\n                    }\n                    break;\n                }\n            }\n            // Must be done afterwards as `heading.hasChild` needs to be up to date.\n            const lastHeading = headings[headings.length - 1];\n            if (lastHeading) {\n                lastHeading.isRunning = Math.max(lastHeading.isRunning, isRunning);\n            }\n        }\n        return headings;\n    }\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { codeIcon, markdownIcon, numberingIcon, tagIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { TagsToolComponent } from './tagstool';\n/**\n * Returns a component for rendering a notebook table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @returns toolbar component\n */\nfunction toolbar(options, tracker) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a notebook table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this._trans = options.translator.load('jupyterlab');\n            this.tagTool = null;\n            this.state = {\n                showCode: true,\n                showMarkdown: false,\n                showTags: false,\n                numbering: false\n            };\n            if (tracker.currentWidget) {\n                // Read saved user settings in notebook meta data:\n                void tracker.currentWidget.context.ready.then(() => {\n                    if (tracker.currentWidget) {\n                        tracker.currentWidget.content.activeCellChanged.connect(() => {\n                            options.updateWidget();\n                        });\n                        const numbering = tracker.currentWidget.model.metadata.get('toc-autonumbering');\n                        const showCode = tracker.currentWidget.model.metadata.get('toc-showcode');\n                        const showMarkdown = tracker.currentWidget.model.metadata.get('toc-showmarkdowntxt');\n                        const showTags = tracker.currentWidget.model.metadata.get('toc-showtags');\n                        options.initializeOptions(numbering || options.numbering, options.numberingH1, options.includeOutput, options.syncCollapseState, showCode || options.showCode, showMarkdown || options.showMarkdown, showTags || options.showTags);\n                        this.setState({\n                            showCode: options.showCode,\n                            showMarkdown: options.showMarkdown,\n                            showTags: options.showTags,\n                            numbering: options.numbering\n                        });\n                        this.tags = [];\n                    }\n                });\n            }\n        }\n        /**\n         * Toggle whether to show code previews.\n         */\n        toggleCode() {\n            options.showCode = !options.showCode;\n            this.setState({ showCode: options.showCode });\n        }\n        /**\n         * Toggle whether to show Markdown previews.\n         */\n        toggleMarkdown() {\n            options.showMarkdown = !options.showMarkdown;\n            this.setState({ showMarkdown: options.showMarkdown });\n        }\n        /**\n         * Toggle whether to number headings.\n         */\n        toggleNumbering() {\n            options.numbering = !options.numbering;\n            this.setState({ numbering: options.numbering });\n        }\n        /**\n         * Toggle tag dropdown.\n         */\n        toggleTagDropdown() {\n            if (options.showTags && this.tagTool) {\n                options.storeTags = this.tagTool.state.selected;\n            }\n            options.showTags = !options.showTags;\n            this.setState({ showTags: options.showTags });\n        }\n        /**\n         * Loads all document tags.\n         */\n        loadTags() {\n            const notebook = tracker.currentWidget;\n            if (notebook) {\n                const cells = notebook.model.cells;\n                const tags = new Set();\n                this.tags = [];\n                for (let i = 0; i < cells.length; i++) {\n                    const cell = cells.get(i);\n                    const list = cell.metadata.get('tags');\n                    if (Array.isArray(list)) {\n                        list.forEach((tag) => tag && tags.add(tag));\n                    }\n                }\n                this.tags = Array.from(tags);\n            }\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const codeToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleCode(), role: \"text\", \"aria-label\": this._trans.__('Toggle Code Cells'), title: this._trans.__('Toggle Code Cells'), className: this.state.showCode\n                    ? 'toc-toolbar-code-icon toc-toolbar-icon-selected'\n                    : 'toc-toolbar-code-icon toc-toolbar-icon' },\n                React.createElement(codeIcon.react, null)));\n            const markdownToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleMarkdown(), role: \"text\", \"aria-label\": this._trans.__('Toggle Markdown Text Cells'), title: this._trans.__('Toggle Markdown Text Cells'), className: this.state.showMarkdown\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(markdownIcon.react, null)));\n            const numberingToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            let tagDropdown = React.createElement(\"div\", null);\n            let tagToggleIcon = (React.createElement(\"div\", { role: \"text\", \"aria-label\": this._trans.__('Show Tags Menu'), title: this._trans.__('Show Tags Menu'), className: this.state.showTags\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(tagIcon.react, null)));\n            if (this.state.showTags) {\n                this.loadTags();\n                const tagTool = (React.createElement(TagsToolComponent, { tags: this.tags, tracker: tracker, options: options, inputFilter: options.storeTags, translator: options.translator, ref: tagTool => (this.tagTool = tagTool) }));\n                options.tagTool = this.tagTool;\n                tagDropdown = React.createElement(\"div\", { className: 'toc-tag-dropdown' },\n                    \" \",\n                    tagTool,\n                    \" \");\n            }\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' },\n                    codeToggleIcon,\n                    markdownToggleIcon,\n                    numberingToggleIcon,\n                    React.createElement(\"div\", { className: 'toc-tag-dropdown-button', onClick: event => this.toggleTagDropdown() }, tagToggleIcon)),\n                tagDropdown));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to either HTML or virtual DOM.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to either HTML or virtual DOM\n *\n * @example\n * const bool = isDOM('text/html');\n * // returns true\n *\n * @example\n * const bool = isDOM('text/plain');\n * // returns false\n */\nfunction isDOM(mime) {\n    return mime === 'application/vdom.v1+json' || mime === 'text/html';\n}\n/**\n * Exports.\n */\nexport { isDOM };\n//# sourceMappingURL=is_dom.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Renders a Python table of contents item.\n *\n * @private\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    return (React.createElement(\"div\", { className: fontSizeClass + ' toc-entry-holder' },\n        React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\" },\n            React.createElement(\"div\", { className: \"toc-Collapser-child\" })),\n        React.createElement(\"span\", { className: \"header-cell toc-cell-item\" },\n            \" \",\n            item.text,\n            \" \")));\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { render } from './render';\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    let processingImports = false;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim();\n        if (line.indexOf('def ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('class ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 1,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('import ') == 0 && !processingImports) {\n            processingImports = true;\n            headings.push({\n                text: line,\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    let mime = editor.content.model.mimeType;\n    return mime === 'application/x-python-code' || mime === 'text/x-python';\n}\n/**\n * Returns a ToC generator for Python files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing Python files\n */\nfunction createPythonGenerator(tracker) {\n    return {\n        tracker,\n        isEnabled: isEnabled,\n        itemRenderer: render,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createPythonGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * Table of contents registry token.\n */\nexport const ITableOfContentsRegistry = new Token('@jupyterlab/toc:ITableOfContentsRegistry');\n/* tslint:enable */\n/**\n * Class for registering widgets for which we can generate a table of contents.\n */\nexport class TableOfContentsRegistry {\n    constructor() {\n        this._collapseChanged = new Signal(this);\n        this._generators = [];\n    }\n    /**\n     * Finds a table of contents generator for a widget.\n     *\n     * ## Notes\n     *\n     * -   If unable to find a table of contents generator, the method return `undefined`.\n     *\n     * @param widget - widget\n     * @returns table of contents generator\n     */\n    find(widget) {\n        for (let i = 0; i < this._generators.length; i++) {\n            const gen = this._generators[i];\n            if (gen.tracker.has(widget)) {\n                if (gen.isEnabled && !gen.isEnabled(widget)) {\n                    continue;\n                }\n                return gen;\n            }\n        }\n    }\n    /**\n     * Adds a table of contents generator to the registry.\n     *\n     * @param generator - table of contents generator\n     */\n    add(generator) {\n        if (generator.collapseChanged) {\n            // If there is a collapseChanged for a given generator, propagate the arguments through the registry's signal\n            generator.collapseChanged.connect((sender, args) => {\n                this._collapseChanged.emit(args);\n            });\n        }\n        this._generators.push(generator);\n    }\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n}\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for a table of contents entry.\n *\n * @private\n */\nclass TOCItem extends React.Component {\n    /**\n     * Renders a table of contents entry.\n     *\n     * @returns rendered entry\n     */\n    render() {\n        const { heading, toc } = this.props;\n        // Create an onClick handler for the TOC item\n        // that scrolls the anchor into view.\n        const onClick = (event) => {\n            var _a;\n            event.preventDefault();\n            event.stopPropagation();\n            (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n            heading.onClick();\n        };\n        let content = this.props.itemRenderer(heading, toc);\n        if (!content) {\n            return null;\n        }\n        return (React.createElement(\"li\", { className: \"jp-tocItem\", onClick: onClick, onContextMenu: (event) => {\n                var _a;\n                (_a = this.props.entryClicked) === null || _a === void 0 ? void 0 : _a.emit(this);\n                heading.onClick();\n            } }, content));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCItem };\n//# sourceMappingURL=toc_item.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TOCItem } from './toc_item';\n/**\n * React component for a table of contents tree.\n *\n * @private\n */\nclass TOCTree extends React.Component {\n    /**\n     * Renders a table of contents tree.\n     */\n    render() {\n        const Toolbar = this.props.toolbar;\n        // Map the heading objects onto a list of JSX elements...\n        let i = 0;\n        let list = this.props.toc.map(el => {\n            return (React.createElement(TOCItem, { heading: el, toc: this.props.toc, entryClicked: this.props.entryClicked, itemRenderer: this.props.itemRenderer, key: `${el.text}-${el.level}-${i++}` }));\n        });\n        return (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, this.props.title),\n            Toolbar && React.createElement(Toolbar, null),\n            React.createElement(\"ul\", { className: \"jp-TableOfContents-content\" }, list)));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCTree };\n//# sourceMappingURL=toc_tree.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ActivityMonitor, PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { TOCTree } from './toc_tree';\nimport { Signal } from '@lumino/signaling';\n/**\n * Timeout for throttling ToC rendering.\n *\n * @private\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * Widget for hosting a notebook table of contents.\n */\nexport class TableOfContents extends Widget {\n    /**\n     * Returns a new table of contents.\n     *\n     * @param options - options\n     * @returns widget\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._docmanager = options.docmanager;\n        this._rendermime = options.rendermime;\n        this._trans = this.translator.load('jupyterlab');\n        this._headings = [];\n        this._entryClicked = new Signal(this);\n        this._entryClicked.connect((toc, item) => {\n            this.activeEntry = item.props.heading;\n        });\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n        }\n    }\n    /**\n     * Current widget-generator tuple for the ToC.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(value) {\n        // If they are the same as previously, do nothing...\n        if (value &&\n            this._current &&\n            this._current.widget === value.widget &&\n            this._current.generator === value.generator) {\n            return;\n        }\n        this._current = value;\n        if (this.generator) {\n            if (this.generator.toolbarGenerator) {\n                this._toolbar = this.generator.toolbarGenerator();\n            }\n            else {\n                this._toolbar = null;\n            }\n        }\n        // Dispose an old activity monitor if one existed...\n        if (this._monitor) {\n            this._monitor.dispose();\n            this._monitor = null;\n        }\n        // If we are wiping the ToC, update and return...\n        if (!this._current) {\n            this.update();\n            return;\n        }\n        // Find the document model associated with the widget:\n        const context = this._docmanager.contextForWidget(this._current.widget);\n        if (!context || !context.model) {\n            throw Error('Could not find a context for the Table of Contents');\n        }\n        // Throttle the rendering rate of the table of contents:\n        this._monitor = new ActivityMonitor({\n            signal: context.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(this.update, this);\n        this.update();\n    }\n    /**\n     * Current table of contents generator.\n     *\n     * @returns table of contents generator\n     */\n    get generator() {\n        if (this._current) {\n            return this._current.generator;\n        }\n        return null;\n    }\n    /**\n     * Callback invoked upon an update request.\n     *\n     * @param msg - message\n     */\n    onUpdateRequest(msg) {\n        if (this.isHidden) {\n            // Bail early\n            return;\n        }\n        let title = this._trans.__('Table of Contents');\n        if (this._current) {\n            this._headings = this._current.generator.generate(this._current.widget, this._current.generator.options);\n            const context = this._docmanager.contextForWidget(this._current.widget);\n            if (context) {\n                title = PathExt.basename(context.localPath);\n            }\n        }\n        let itemRenderer = (item) => {\n            return React.createElement(\"span\", null, item.text);\n        };\n        if (this._current && this._current.generator.itemRenderer) {\n            itemRenderer = this._current.generator.itemRenderer;\n        }\n        let jsx = (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, title)));\n        if (this._current && this._current.generator) {\n            jsx = (React.createElement(TOCTree, { title: title, toc: this._headings, entryClicked: this._entryClicked, generator: this.generator, itemRenderer: itemRenderer, toolbar: this._toolbar }));\n        }\n        ReactDOM.render(jsx, this.node, () => {\n            if (this._current &&\n                this._current.generator.usesLatex === true &&\n                this._rendermime.latexTypesetter) {\n                this._rendermime.latexTypesetter.typeset(this.node);\n            }\n        });\n    }\n    /**\n     * Current active entry.\n     *\n     * @returns table of contents active entry\n     */\n    get activeEntry() {\n        return this._activeEntry;\n    }\n    set activeEntry(value) {\n        this._activeEntry = value;\n    }\n    /**\n     * List of headings.\n     *\n     * @returns table of contents list of headings\n     */\n    get headings() {\n        return this._headings;\n    }\n    /**\n     * Callback invoked to re-render after showing a table of contents.\n     *\n     * @param msg - message\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n}\n//# sourceMappingURL=toc.js.map"],"names":["LATEX_LEVELS","part","chapter","section","subsection","subsubsection","paragraph","subparagraph","isEnabled","editor","mime","content","model","mimeType","generate","lines","value","text","split","arr","i","length","toEntries","headings","RE","match","push","level","onClick","line","setCursorPosition","column","createLatexGenerator","tracker","usesLatex","isMarkdown","OptionsManager","constructor","widget","options","this","_numbering","numbering","_numberingH1","numberingH1","_widget","translator","nullTranslator","sanitizer","update","initializeOptions","sanitizerOptions","allowedTags","allowedAttributes","code","span","div","p","pre","render","item","jsx","fontSizeClass","html","sanitize","dangerouslySetInnerHTML","__html","className","toolbar","props","super","state","_trans","load","toggleNumbering","setState","icon","event","role","__","title","numberingIcon","generateNumbering","dict","l","j","parseHeading","str","replace","type","parseInt","heading","scrollIntoView","undefined","FLG","indexOf","getHeadings","createMarkdownGenerator","settings","composite","changed","connect","toolbarGenerator","itemRenderer","createRenderedMarkdownGenerator","node","nodes","querySelectorAll","tagName","textContent","hide","getElementsByClassName","removeChild","innerHTML","nstr","nhtml","getRenderedHeadings","RunningStatus","isHeadingFiltered","tags","cellRef","ctags","metadata","get","name","k","appendHeading","prev","collapseLevel","hasChild","appendMarkdownHeading","collapsed","showMarkdown","cellCollapseMetadata","len","parent","appendCollapsibleHeading","isNotebookHeading","getCodeCellHeading","executionCount","lastLevel","index","isRunning","Idle","console","warn","Math","min","prompt","getLastHeadingLevel","loc","getMarkdownHeadings","callback","getRenderedHTMLHeadings","el","classList","contains","nodeName","toLowerCase","document","createElement","add","insertBefore","firstChild","notebook","_preRenderedToolbar","_filtered","_showCode","_showMarkdown","_showTags","_tagTool","_includeOutput","includeOutput","_syncCollapseState","syncCollapseState","_notebook","storeTags","_collapseChanged","Signal","tagTool","notebookMetadata","currentWidget","set","showCode","collapseChanged","showTags","filtered","preRenderedToolbar","updateWidget","updateAndCollapse","args","emit","CodeComponent","UNSAFE_componentWillReceiveProps","nextProps","host","previousHeader","toc","activeCellIndex","tocIndexOfNextHeader","NotebookHeading","itemRef","isActive","current","area","ElementExt","parentElement","ref","classes","children","TagComponent","tag","key","Date","toLocaleTimeString","TagListComponent","selectedTagWithName","selectedTags","selectionStateHandler","renderTagComponents","map","tagClass","tabIndex","selected","TagsToolComponent","changeSelectionState","newState","filterTags","deselectAll","selectAllCellsWithCurrentTags","panel","widgets","changedActive","forEach","cell","ix","every","containsTag","select","updateFilters","tmp","idx","inputFilter","tagList","UNSAFE_componentWillUpdate","command","onKeyDown","createNotebookGenerator","NotebookGenerator","MARKDOWN_HEADING_COLLAPSED","header","button","stopPropagation","has","ellipseButton","ellipsesIcon","activeCell","querySelector","NotebookActions","delete","collapsedState","tocType","_runningCells","Array","activeCellChanged","sender","_","includes","splice","context","ready","then","toggleCode","toggleMarkdown","toggleTagDropdown","loadTags","cells","Set","list","isArray","from","codeToggleIcon","codeIcon","markdownToggleIcon","markdownIcon","numberingToggleIcon","tagDropdown","tagToggleIcon","tagIcon","_a","Running","Scheduled","count","outputs","m","dtypes","Object","keys","data","filter","t","mode","htmlHeadings","outputArea","mcell","rendered","inputHidden","markdownHeadings","lastHeading","max","processingImports","trim","slice","createPythonGenerator","ITableOfContentsRegistry","Token","TableOfContentsRegistry","_generators","find","gen","generator","TOCItem","preventDefault","entryClicked","onContextMenu","TOCTree","Toolbar","TableOfContents","Widget","_docmanager","docmanager","_rendermime","rendermime","_headings","_entryClicked","activeEntry","_current","_toolbar","_monitor","dispose","contextForWidget","Error","ActivityMonitor","signal","contentChanged","timeout","activityStopped","onUpdateRequest","msg","isHidden","PathExt","localPath","latexTypesetter","typeset","_activeEntry","onAfterShow"],"sourceRoot":""}