{"version":3,"file":"4940.5d37390.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/csvviewer-extension/lib/searchprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/csvviewer-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CSVViewer } from '@jupyterlab/csvviewer';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { Signal } from '@lumino/signaling';\nexport class CSVSearchProvider {\n    constructor() {\n        /**\n         * The same list of matches provided by the startQuery promise resolution\n         */\n        this.matches = [];\n        /**\n         * The current index of the selected match.\n         */\n        this.currentMatchIndex = null;\n        /**\n         * Set to true if the widget under search is read-only, false\n         * if it is editable.  Will be used to determine whether to show\n         * the replace option.\n         */\n        this.isReadOnly = true;\n        this._changed = new Signal(this);\n    }\n    /**\n     * Report whether or not this provider has the ability to search on the given object\n     */\n    static canSearchOn(domain) {\n        // check to see if the CSVSearchProvider can search on the\n        // first cell, false indicates another editor is present\n        return (domain instanceof DocumentWidget && domain.content instanceof CSVViewer);\n    }\n    /**\n     * Get an initial query value if applicable so that it can be entered\n     * into the search box as an initial query\n     *\n     * @returns Initial value used to populate the search box.\n     */\n    getInitialQuery(searchTarget) {\n        // CSV Viewer does not support selection\n        return null;\n    }\n    /**\n     * Initialize the search using the provided options.  Should update the UI\n     * to highlight all matches and \"select\" whatever the first match should be.\n     *\n     * @param query A RegExp to be use to perform the search\n     * @param searchTarget The widget to be searched\n     *\n     * @returns A promise that resolves with a list of all matches\n     */\n    async startQuery(query, searchTarget) {\n        this._target = searchTarget;\n        this._query = query;\n        searchTarget.content.searchService.find(query);\n        return this.matches;\n    }\n    /**\n     * Clears state of a search provider to prepare for startQuery to be called\n     * in order to start a new query or refresh an existing one.\n     *\n     * @returns A promise that resolves when the search provider is ready to\n     * begin a new search.\n     */\n    async endQuery() {\n        this._target.content.searchService.clear();\n    }\n    /**\n     * Resets UI state as it was before the search process began.  Cleans up and\n     * disposes of all internal state.\n     *\n     * @returns A promise that resolves when all state has been cleaned up.\n     */\n    async endSearch() {\n        this._target.content.searchService.clear();\n    }\n    /**\n     * Move the current match indicator to the next match.\n     *\n     * @returns A promise that resolves once the action has completed.\n     */\n    async highlightNext() {\n        this._target.content.searchService.find(this._query);\n        return undefined;\n    }\n    /**\n     * Move the current match indicator to the previous match.\n     *\n     * @returns A promise that resolves once the action has completed.\n     */\n    async highlightPrevious() {\n        this._target.content.searchService.find(this._query, true);\n        return undefined;\n    }\n    /**\n     * Replace the currently selected match with the provided text\n     * Not implemented in the CSV viewer as it is read-only.\n     *\n     * @returns A promise that resolves once the action has completed.\n     */\n    async replaceCurrentMatch(newText) {\n        return false;\n    }\n    /**\n     * Replace all matches in the notebook with the provided text\n     * Not implemented in the CSV viewer as it is read-only.\n     *\n     * @returns A promise that resolves once the action has completed.\n     */\n    async replaceAllMatches(newText) {\n        return false;\n    }\n    /**\n     * Signal indicating that something in the search has changed, so the UI should update\n     */\n    get changed() {\n        return this._changed;\n    }\n}\n//# sourceMappingURL=searchprovider.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module csvviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, InputDialog, IThemeManager, IToolbarWidgetRegistry, WidgetTracker } from '@jupyterlab/apputils';\nimport { CSVDelimiter, CSVViewerFactory, TSVViewerFactory } from '@jupyterlab/csvviewer';\nimport { ISearchProviderRegistry } from '@jupyterlab/documentsearch';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { DataGrid } from '@lumino/datagrid';\nimport { CSVSearchProvider } from './searchprovider';\n/**\n * The name of the factories that creates widgets.\n */\nconst FACTORY_CSV = 'CSVTable';\nconst FACTORY_TSV = 'TSVTable';\n/**\n * The CSV file handler extension.\n */\nconst csv = {\n    activate: activateCsv,\n    id: '@jupyterlab/csvviewer-extension:csv',\n    requires: [ITranslator],\n    optional: [\n        ILayoutRestorer,\n        IThemeManager,\n        IMainMenu,\n        ISearchProviderRegistry,\n        ISettingRegistry,\n        IToolbarWidgetRegistry\n    ],\n    autoStart: true\n};\n/**\n * The TSV file handler extension.\n */\nconst tsv = {\n    activate: activateTsv,\n    id: '@jupyterlab/csvviewer-extension:tsv',\n    requires: [ITranslator],\n    optional: [\n        ILayoutRestorer,\n        IThemeManager,\n        IMainMenu,\n        ISearchProviderRegistry,\n        ISettingRegistry,\n        IToolbarWidgetRegistry\n    ],\n    autoStart: true\n};\n/**\n * Connect menu entries for find and go to line.\n */\nfunction addMenuEntries(mainMenu, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    // Add go to line capability to the edit menu.\n    mainMenu.editMenu.goToLiners.add({\n        tracker,\n        goToLine: (widget) => {\n            return InputDialog.getNumber({\n                title: trans.__('Go to Line'),\n                value: 0\n            }).then(value => {\n                if (value.button.accept && value.value !== null) {\n                    widget.content.goToLine(value.value);\n                }\n            });\n        }\n    });\n}\n/**\n * Activate cssviewer extension for CSV files\n */\nfunction activateCsv(app, translator, restorer, themeManager, mainMenu, searchregistry, settingRegistry, toolbarRegistry) {\n    let toolbarFactory;\n    if (toolbarRegistry) {\n        toolbarRegistry.registerFactory(FACTORY_CSV, 'delimiter', widget => new CSVDelimiter({\n            widget: widget.content,\n            translator\n        }));\n        if (settingRegistry) {\n            toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY_CSV, csv.id, translator);\n        }\n    }\n    const factory = new CSVViewerFactory({\n        name: FACTORY_CSV,\n        fileTypes: ['csv'],\n        defaultFor: ['csv'],\n        readOnly: true,\n        toolbarFactory,\n        translator\n    });\n    const tracker = new WidgetTracker({\n        namespace: 'csvviewer'\n    });\n    // The current styles for the data grids.\n    let style = Private.LIGHT_STYLE;\n    let rendererConfig = Private.LIGHT_TEXT_CONFIG;\n    if (restorer) {\n        // Handle state restoration.\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY_CSV }),\n            name: widget => widget.context.path\n        });\n    }\n    app.docRegistry.addWidgetFactory(factory);\n    const ft = app.docRegistry.getFileType('csv');\n    factory.widgetCreated.connect((sender, widget) => {\n        // Track the widget.\n        void tracker.add(widget);\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        if (ft) {\n            widget.title.icon = ft.icon;\n            widget.title.iconClass = ft.iconClass;\n            widget.title.iconLabel = ft.iconLabel;\n        }\n        // Set the theme for the new widget.\n        widget.content.style = style;\n        widget.content.rendererConfig = rendererConfig;\n    });\n    // Keep the themes up-to-date.\n    const updateThemes = () => {\n        const isLight = themeManager && themeManager.theme\n            ? themeManager.isLight(themeManager.theme)\n            : true;\n        style = isLight ? Private.LIGHT_STYLE : Private.DARK_STYLE;\n        rendererConfig = isLight\n            ? Private.LIGHT_TEXT_CONFIG\n            : Private.DARK_TEXT_CONFIG;\n        tracker.forEach(grid => {\n            grid.content.style = style;\n            grid.content.rendererConfig = rendererConfig;\n        });\n    };\n    if (themeManager) {\n        themeManager.themeChanged.connect(updateThemes);\n    }\n    if (mainMenu) {\n        addMenuEntries(mainMenu, tracker, translator);\n    }\n    if (searchregistry) {\n        searchregistry.register('csv', CSVSearchProvider);\n    }\n}\n/**\n * Activate cssviewer extension for TSV files\n */\nfunction activateTsv(app, translator, restorer, themeManager, mainMenu, searchregistry, settingRegistry, toolbarRegistry) {\n    let toolbarFactory;\n    if (toolbarRegistry) {\n        toolbarRegistry.registerFactory(FACTORY_TSV, 'delimiter', widget => new CSVDelimiter({\n            widget: widget.content,\n            translator\n        }));\n        if (settingRegistry) {\n            toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY_TSV, tsv.id, translator);\n        }\n    }\n    const factory = new TSVViewerFactory({\n        name: FACTORY_TSV,\n        fileTypes: ['tsv'],\n        defaultFor: ['tsv'],\n        readOnly: true,\n        toolbarFactory,\n        translator\n    });\n    const tracker = new WidgetTracker({\n        namespace: 'tsvviewer'\n    });\n    // The current styles for the data grids.\n    let style = Private.LIGHT_STYLE;\n    let rendererConfig = Private.LIGHT_TEXT_CONFIG;\n    if (restorer) {\n        // Handle state restoration.\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY_TSV }),\n            name: widget => widget.context.path\n        });\n    }\n    app.docRegistry.addWidgetFactory(factory);\n    const ft = app.docRegistry.getFileType('tsv');\n    factory.widgetCreated.connect((sender, widget) => {\n        // Track the widget.\n        void tracker.add(widget);\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        if (ft) {\n            widget.title.icon = ft.icon;\n            widget.title.iconClass = ft.iconClass;\n            widget.title.iconLabel = ft.iconLabel;\n        }\n        // Set the theme for the new widget.\n        widget.content.style = style;\n        widget.content.rendererConfig = rendererConfig;\n    });\n    // Keep the themes up-to-date.\n    const updateThemes = () => {\n        const isLight = themeManager && themeManager.theme\n            ? themeManager.isLight(themeManager.theme)\n            : true;\n        style = isLight ? Private.LIGHT_STYLE : Private.DARK_STYLE;\n        rendererConfig = isLight\n            ? Private.LIGHT_TEXT_CONFIG\n            : Private.DARK_TEXT_CONFIG;\n        tracker.forEach(grid => {\n            grid.content.style = style;\n            grid.content.rendererConfig = rendererConfig;\n        });\n    };\n    if (themeManager) {\n        themeManager.themeChanged.connect(updateThemes);\n    }\n    if (mainMenu) {\n        addMenuEntries(mainMenu, tracker, translator);\n    }\n    if (searchregistry) {\n        searchregistry.register('tsv', CSVSearchProvider);\n    }\n}\n/**\n * Export the plugins as default.\n */\nconst plugins = [csv, tsv];\nexport default plugins;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The light theme for the data grid.\n     */\n    Private.LIGHT_STYLE = Object.assign(Object.assign({}, DataGrid.defaultStyle), { voidColor: '#F3F3F3', backgroundColor: 'white', headerBackgroundColor: '#EEEEEE', gridLineColor: 'rgba(20, 20, 20, 0.15)', headerGridLineColor: 'rgba(20, 20, 20, 0.25)', rowBackgroundColor: i => (i % 2 === 0 ? '#F5F5F5' : 'white') });\n    /**\n     * The dark theme for the data grid.\n     */\n    Private.DARK_STYLE = Object.assign(Object.assign({}, DataGrid.defaultStyle), { voidColor: 'black', backgroundColor: '#111111', headerBackgroundColor: '#424242', gridLineColor: 'rgba(235, 235, 235, 0.15)', headerGridLineColor: 'rgba(235, 235, 235, 0.25)', rowBackgroundColor: i => (i % 2 === 0 ? '#212121' : '#111111') });\n    /**\n     * The light config for the data grid renderer.\n     */\n    Private.LIGHT_TEXT_CONFIG = {\n        textColor: '#111111',\n        matchBackgroundColor: '#FFFFE0',\n        currentMatchBackgroundColor: '#FFFF00',\n        horizontalAlignment: 'right'\n    };\n    /**\n     * The dark config for the data grid renderer.\n     */\n    Private.DARK_TEXT_CONFIG = {\n        textColor: '#F5F5F5',\n        matchBackgroundColor: '#838423',\n        currentMatchBackgroundColor: '#A3807A',\n        horizontalAlignment: 'right'\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["CSVSearchProvider","constructor","this","matches","currentMatchIndex","isReadOnly","_changed","Signal","static","domain","DocumentWidget","content","CSVViewer","getInitialQuery","searchTarget","async","query","_target","_query","searchService","find","clear","newText","changed","FACTORY_CSV","FACTORY_TSV","csv","activate","app","translator","restorer","themeManager","mainMenu","searchregistry","settingRegistry","toolbarRegistry","toolbarFactory","registerFactory","widget","CSVDelimiter","createToolbarFactory","id","factory","CSVViewerFactory","name","fileTypes","defaultFor","readOnly","tracker","WidgetTracker","namespace","style","Private","LIGHT_STYLE","rendererConfig","LIGHT_TEXT_CONFIG","restore","command","args","path","context","docRegistry","addWidgetFactory","ft","getFileType","widgetCreated","connect","sender","add","pathChanged","save","title","icon","iconClass","iconLabel","themeChanged","isLight","theme","DARK_STYLE","DARK_TEXT_CONFIG","forEach","grid","addMenuEntries","register","requires","ITranslator","optional","ILayoutRestorer","IThemeManager","IMainMenu","ISearchProviderRegistry","ISettingRegistry","IToolbarWidgetRegistry","autoStart","tsv","TSVViewerFactory","trans","load","editMenu","goToLiners","goToLine","InputDialog","__","value","then","button","accept","Object","assign","DataGrid","voidColor","backgroundColor","headerBackgroundColor","gridLineColor","headerGridLineColor","rowBackgroundColor","i","textColor","matchBackgroundColor","currentMatchBackgroundColor","horizontalAlignment"],"sourceRoot":""}