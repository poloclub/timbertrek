{"version":3,"file":"4030.e9e5a6a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/palette.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingsplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/themesplugins.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/toolbarregistryplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/workspacesplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ModalCommandPalette } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { CommandPaletteSvg, paletteIcon } from '@jupyterlab/ui-components';\nimport { find } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { CommandPalette } from '@lumino/widgets';\n/**\n * The command IDs used by the apputils extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activate = 'apputils:activate-command-palette';\n})(CommandIDs || (CommandIDs = {}));\nconst PALETTE_PLUGIN_ID = '@jupyterlab/apputils-extension:palette';\n/**\n * A thin wrapper around the `CommandPalette` class to conform with the\n * JupyterLab interface for the application-wide command palette.\n */\nexport class Palette {\n    /**\n     * Create a palette instance.\n     */\n    constructor(palette, translator) {\n        this.translator = translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        this._palette = palette;\n        this._palette.title.label = '';\n        this._palette.title.caption = trans.__('Command Palette');\n    }\n    /**\n     * The placeholder text of the command palette's search input.\n     */\n    set placeholder(placeholder) {\n        this._palette.inputNode.placeholder = placeholder;\n    }\n    get placeholder() {\n        return this._palette.inputNode.placeholder;\n    }\n    /**\n     * Activate the command palette for user input.\n     */\n    activate() {\n        this._palette.activate();\n    }\n    /**\n     * Add a command item to the command palette.\n     *\n     * @param options - The options for creating the command item.\n     *\n     * @returns A disposable that will remove the item from the palette.\n     */\n    addItem(options) {\n        const item = this._palette.addItem(options);\n        return new DisposableDelegate(() => {\n            this._palette.removeItem(item);\n        });\n    }\n}\n/**\n * A namespace for `Palette` statics.\n */\n(function (Palette) {\n    /**\n     * Activate the command palette.\n     */\n    function activate(app, translator, settingRegistry) {\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const palette = Private.createPalette(app, translator);\n        const modalPalette = new ModalCommandPalette({ commandPalette: palette });\n        let modal = false;\n        palette.node.setAttribute('role', 'region');\n        palette.node.setAttribute('aria-label', trans.__('Command Palette Section'));\n        shell.add(palette, 'left', { rank: 300 });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(PALETTE_PLUGIN_ID);\n            const updateSettings = (settings) => {\n                const newModal = settings.get('modal').composite;\n                if (modal && !newModal) {\n                    palette.parent = null;\n                    modalPalette.detach();\n                    shell.add(palette, 'left', { rank: 300 });\n                }\n                else if (!modal && newModal) {\n                    palette.parent = null;\n                    modalPalette.palette = palette;\n                    palette.show();\n                    modalPalette.attach();\n                }\n                modal = newModal;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        // Show the current palette shortcut in its title.\n        const updatePaletteTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.activate);\n            if (binding) {\n                const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n                palette.title.caption = trans.__('Commands (%1)', ks);\n            }\n            else {\n                palette.title.caption = trans.__('Commands');\n            }\n        };\n        updatePaletteTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updatePaletteTitle();\n        });\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                if (modal) {\n                    modalPalette.activate();\n                }\n                else {\n                    shell.activateById(palette.id);\n                }\n            },\n            label: trans.__('Activate Command Palette')\n        });\n        palette.inputNode.placeholder = trans.__('SEARCH');\n        return new Palette(palette, translator);\n    }\n    Palette.activate = activate;\n    /**\n     * Restore the command palette.\n     */\n    function restore(app, restorer, translator) {\n        const palette = Private.createPalette(app, translator);\n        // Let the application restorer track the command palette for restoration of\n        // application state (e.g. setting the command palette as the current side bar\n        // widget).\n        restorer.add(palette, 'command-palette');\n    }\n    Palette.restore = restore;\n})(Palette || (Palette = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The private command palette instance.\n     */\n    let palette;\n    /**\n     * Create the application-wide command palette.\n     */\n    function createPalette(app, translator) {\n        if (!palette) {\n            // use a renderer tweaked to use inline svg icons\n            palette = new CommandPalette({\n                commands: app.commands,\n                renderer: CommandPaletteSvg.defaultRenderer\n            });\n            palette.id = 'command-palette';\n            palette.title.icon = paletteIcon;\n            const trans = translator.load('jupyterlab');\n            palette.title.label = trans.__('Commands');\n        }\n        return palette;\n    }\n    Private.createPalette = createPalette;\n})(Private || (Private = {}));\n//# sourceMappingURL=palette.js.map","import { PageConfig } from '@jupyterlab/coreutils';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { Throttler } from '@lumino/polling';\n/**\n * A data connector for fetching settings.\n *\n * #### Notes\n * This connector adds a query parameter to the base services setting manager.\n */\nexport class SettingConnector extends DataConnector {\n    constructor(connector) {\n        super();\n        this._throttlers = Object.create(null);\n        this._connector = connector;\n    }\n    /**\n     * Fetch settings for a plugin.\n     * @param id - The plugin ID\n     *\n     * #### Notes\n     * The REST API requests are throttled at one request per plugin per 100ms.\n     */\n    fetch(id) {\n        const throttlers = this._throttlers;\n        if (!(id in throttlers)) {\n            throttlers[id] = new Throttler(() => this._connector.fetch(id), 100);\n        }\n        return throttlers[id].invoke();\n    }\n    async list(query = 'all') {\n        const { isDeferred, isDisabled } = PageConfig.Extension;\n        const { ids, values } = await this._connector.list();\n        if (query === 'all') {\n            return { ids, values };\n        }\n        return {\n            ids: ids.filter(id => !isDeferred(id) && !isDisabled(id)),\n            values: values.filter(({ id }) => !isDeferred(id) && !isDisabled(id))\n        };\n    }\n    async save(id, raw) {\n        await this._connector.save(id, raw);\n    }\n}\n//# sourceMappingURL=settingconnector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { SettingConnector } from './settingconnector';\n/**\n * The default setting registry provider.\n */\nexport const settingsPlugin = {\n    id: '@jupyterlab/apputils-extension:settings',\n    activate: async (app) => {\n        const { isDisabled } = PageConfig.Extension;\n        const connector = new SettingConnector(app.serviceManager.settings);\n        const registry = new SettingRegistry({\n            connector,\n            plugins: (await connector.list('active')).values\n        });\n        // If there are plugins that have schemas that are not in the setting\n        // registry after the application has restored, try to load them manually\n        // because otherwise, its settings will never become available in the\n        // setting registry.\n        void app.restored.then(async () => {\n            const plugins = await connector.list('all');\n            plugins.ids.forEach(async (id, index) => {\n                if (isDisabled(id) || id in registry.plugins) {\n                    return;\n                }\n                try {\n                    await registry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                    if (plugins.values[index].schema['jupyter.lab.transform']) {\n                        console.warn(`This may happen if {autoStart: false} in (${id}) ` +\n                            `or if it is one of the deferredExtensions in page config.`);\n                    }\n                }\n            });\n        });\n        return registry;\n    },\n    autoStart: true,\n    provides: ISettingRegistry\n};\n//# sourceMappingURL=settingsplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ICommandPalette, ISplashScreen, IThemeManager, ThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n    CommandIDs.changeFont = 'apputils:change-font';\n    CommandIDs.incrFontSize = 'apputils:incr-font-size';\n    CommandIDs.decrFontSize = 'apputils:decr-font-size';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default theme manager provider.\n */\nexport const themesPlugin = {\n    id: '@jupyterlab/apputils-extension:themes',\n    requires: [ISettingRegistry, JupyterFrontEnd.IPaths, ITranslator],\n    optional: [ISplashScreen],\n    activate: (app, settings, paths, translator, splash) => {\n        const trans = translator.load('jupyterlab');\n        const host = app.shell;\n        const commands = app.commands;\n        const url = URLExt.join(PageConfig.getBaseUrl(), paths.urls.themes);\n        const key = themesPlugin.id;\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        // Keep a synchronously set reference to the current theme,\n        // since the asynchronous setting of the theme in `changeTheme`\n        // can lead to an incorrect toggle on the currently used theme.\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            // Set data attributes on the application shell for the current theme.\n            currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n            }\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette']\n                    ? trans.__('Use Theme: %1', displayName)\n                    : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: trans.__('Theme Scrollbars'),\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        commands.addCommand(CommandIDs.changeFont, {\n            label: args => args['enabled'] ? `${args['font']}` : trans.__('waiting for fonts'),\n            isEnabled: args => args['enabled'],\n            isToggled: args => manager.getCSS(args['key']) === args['font'],\n            execute: args => manager.setCSSOverride(args['key'], args['font'])\n        });\n        commands.addCommand(CommandIDs.incrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Increase Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Increase Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Increase UI Font Size');\n                    default:\n                        return trans.__('Increase Font Size');\n                }\n            },\n            execute: args => manager.incrFontSize(args['key'])\n        });\n        commands.addCommand(CommandIDs.decrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Decrease Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Decrease Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Decrease UI Font Size');\n                    default:\n                        return trans.__('Decrease Font Size');\n                }\n            },\n            execute: args => manager.decrFontSize(args['key'])\n        });\n        return manager;\n    },\n    autoStart: true,\n    provides: IThemeManager\n};\n/**\n * The default theme manager's UI command palette and main menu functionality.\n *\n * #### Notes\n * This plugin loads separately from the theme manager plugin in order to\n * prevent blocking of the theme manager while it waits for the command palette\n * and main menu to become available.\n */\nexport const themesPaletteMenuPlugin = {\n    id: '@jupyterlab/apputils-extension:themes-palette-menu',\n    requires: [IThemeManager, ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, manager, translator, palette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        // If we have a main menu, add the theme manager to the settings menu.\n        if (mainMenu) {\n            void app.restored.then(() => {\n                var _a;\n                const isPalette = false;\n                const themeMenu = (_a = mainMenu.settingsMenu.items.find(item => {\n                    var _a;\n                    return item.type === 'submenu' &&\n                        ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-settings-apputilstheme';\n                })) === null || _a === void 0 ? void 0 : _a.submenu;\n                // choose a theme\n                if (themeMenu) {\n                    manager.themes.forEach((theme, index) => {\n                        themeMenu.insertItem(index, {\n                            command: CommandIDs.changeTheme,\n                            args: { isPalette, theme }\n                        });\n                    });\n                }\n            });\n        }\n        // If we have a command palette, add theme switching options to it.\n        if (palette) {\n            void app.restored.then(() => {\n                const category = trans.__('Theme');\n                const command = CommandIDs.changeTheme;\n                const isPalette = true;\n                // choose a theme\n                manager.themes.forEach(theme => {\n                    palette.addItem({ command, args: { isPalette, theme }, category });\n                });\n                // toggle scrollbar theming\n                palette.addItem({ command: CommandIDs.themeScrollbars, category });\n                // increase/decrease code font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                // increase/decrease content font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                // increase/decrease ui font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n            });\n        }\n    },\n    autoStart: true\n};\n//# sourceMappingURL=themesplugins.js.map","import { createDefaultFactory, IToolbarWidgetRegistry, ToolbarWidgetRegistry } from '@jupyterlab/apputils';\n/**\n * The default toolbar registry.\n */\nexport const toolbarRegistry = {\n    id: '@jupyterlab/apputils-extension:toolbar-registry',\n    autoStart: true,\n    provides: IToolbarWidgetRegistry,\n    activate: (app) => {\n        const registry = new ToolbarWidgetRegistry({\n            defaultFactory: createDefaultFactory(app.commands)\n        });\n        return registry;\n    }\n};\n//# sourceMappingURL=toolbarregistryplugin.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, IWindowResolver, showDialog } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.saveWorkspace = 'workspace-ui:save';\n    CommandIDs.saveWorkspaceAs = 'workspace-ui:save-as';\n})(CommandIDs || (CommandIDs = {}));\nconst WORKSPACE_NAME = 'jupyterlab-workspace';\nconst WORKSPACE_EXT = '.' + WORKSPACE_NAME;\nconst LAST_SAVE_ID = 'workspace-ui:lastSave';\nconst ICON_NAME = 'jp-JupyterIcon';\n/**\n * The workspace MIME renderer and save plugin.\n */\nexport const workspacesPlugin = {\n    id: '@jupyterlab/apputils-extension:workspaces',\n    autoStart: true,\n    requires: [\n        IFileBrowserFactory,\n        IWindowResolver,\n        IStateDB,\n        ITranslator,\n        JupyterFrontEnd.IPaths\n    ],\n    optional: [IRouter],\n    activate: (app, fbf, resolver, state, translator, paths, router) => {\n        // The workspace factory creates dummy widgets to load a new workspace.\n        const factory = new Private.WorkspaceFactory({\n            workspaces: app.serviceManager.workspaces,\n            router,\n            state,\n            translator,\n            paths\n        });\n        const trans = translator.load('jupyterlab');\n        app.docRegistry.addFileType({\n            name: WORKSPACE_NAME,\n            contentType: 'file',\n            fileFormat: 'text',\n            displayName: trans.__('JupyterLab workspace File'),\n            extensions: [WORKSPACE_EXT],\n            mimeTypes: ['text/json'],\n            iconClass: ICON_NAME\n        });\n        app.docRegistry.addWidgetFactory(factory);\n        app.commands.addCommand(CommandIDs.saveWorkspaceAs, {\n            label: trans.__('Save Current Workspace As…'),\n            execute: async () => {\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                await Private.saveAs(fbf.defaultBrowser, app.serviceManager.contents, data, state, translator);\n            }\n        });\n        app.commands.addCommand(CommandIDs.saveWorkspace, {\n            label: trans.__('Save Current Workspace'),\n            execute: async () => {\n                const { contents } = app.serviceManager;\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                const lastSave = (await state.fetch(LAST_SAVE_ID));\n                if (lastSave === undefined) {\n                    await Private.saveAs(fbf.defaultBrowser, contents, data, state, translator);\n                }\n                else {\n                    await Private.save(lastSave, contents, data, state);\n                }\n            }\n        });\n    }\n};\nvar Private;\n(function (Private) {\n    /**\n     * Save workspace to a user provided location\n     */\n    async function save(userPath, contents, data, state) {\n        let name = userPath.split('/').pop();\n        // Add extension if not provided or remove extension from name if it was.\n        if (name !== undefined && name.includes('.')) {\n            name = name.split('.')[0];\n        }\n        else {\n            userPath = userPath + WORKSPACE_EXT;\n        }\n        // Save last save location, for save button to work\n        await state.save(LAST_SAVE_ID, userPath);\n        const resolvedData = await data;\n        resolvedData.metadata.id = `${name}`;\n        await contents.save(userPath, {\n            type: 'file',\n            format: 'text',\n            content: JSON.stringify(resolvedData)\n        });\n    }\n    Private.save = save;\n    /**\n     * Ask user for location, and save workspace.\n     * Default location is the current directory in the file browser\n     */\n    async function saveAs(browser, contents, data, state, translator) {\n        var _a;\n        translator = translator || nullTranslator;\n        const lastSave = await state.fetch(LAST_SAVE_ID);\n        let defaultName;\n        if (lastSave === undefined) {\n            defaultName = 'new-workspace';\n        }\n        else {\n            defaultName = (_a = lastSave.split('/').pop()) === null || _a === void 0 ? void 0 : _a.split('.')[0];\n        }\n        const defaultPath = browser.model.path + '/' + defaultName + WORKSPACE_EXT;\n        const userPath = await getSavePath(defaultPath, translator);\n        if (userPath) {\n            await save(userPath, contents, data, state);\n        }\n    }\n    Private.saveAs = saveAs;\n    /**\n     * This widget factory is used to handle double click on workspace\n     */\n    class WorkspaceFactory extends ABCWidgetFactory {\n        /**\n         * Construct a widget factory that uploads a workspace and navigates to it.\n         *\n         * @param options - The instantiation options for a `WorkspaceFactory`.\n         */\n        constructor(options) {\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            super({\n                name: trans.__('Workspace loader'),\n                fileTypes: [WORKSPACE_NAME],\n                defaultFor: [WORKSPACE_NAME],\n                readOnly: true\n            });\n            this._application = options.paths.urls.app;\n            this._router = options.router;\n            this._state = options.state;\n            this._workspaces = options.workspaces;\n        }\n        /**\n         * Loads the workspace into load, and jump to it\n         * @param context This is used queried to query the workspace content\n         */\n        createNewWidget(context) {\n            // Save a file's contents as a workspace and navigate to that workspace.\n            void context.ready.then(async () => {\n                const file = context.model;\n                const workspace = file.toJSON();\n                const path = context.path;\n                const id = workspace.metadata.id;\n                // Save the file contents as a workspace.\n                await this._workspaces.save(id, workspace);\n                // Save last save location for the save command.\n                await this._state.save(LAST_SAVE_ID, path);\n                // Navigate to new workspace.\n                const url = URLExt.join(this._application, 'workspaces', id);\n                if (this._router) {\n                    this._router.navigate(url, { hard: true });\n                }\n                else {\n                    document.location.href = url;\n                }\n            });\n            return dummyWidget(context);\n        }\n    }\n    Private.WorkspaceFactory = WorkspaceFactory;\n    /**\n     * Returns a dummy widget with disposed content that doesn't render in the UI.\n     *\n     * @param context - The file context.\n     */\n    function dummyWidget(context) {\n        const widget = new DocumentWidget({ content: new Widget(), context });\n        widget.content.dispose();\n        return widget;\n    }\n    /**\n     * Ask user for a path to save to.\n     * @param defaultPath Path already present when the dialog is shown\n     */\n    async function getSavePath(defaultPath, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const saveBtn = Dialog.okButton({ label: trans.__('Save') });\n        const result = await showDialog({\n            title: trans.__('Save Current Workspace As…'),\n            body: new SaveWidget(defaultPath),\n            buttons: [Dialog.cancelButton({ label: trans.__('Cancel') }), saveBtn]\n        });\n        if (result.button.label === trans.__('Save')) {\n            return result.value;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * A widget that gets a file path from a user.\n     */\n    class SaveWidget extends Widget {\n        /**\n         * Gets a modal node for getting save location. Will have a default to the current opened directory\n         * @param path Default location\n         */\n        constructor(path) {\n            super({ node: createSaveNode(path) });\n        }\n        /**\n         * Gets the save path entered by the user\n         */\n        getValue() {\n            return this.node.value;\n        }\n    }\n    /**\n     * Create the node for a save widget.\n     */\n    function createSaveNode(path) {\n        const input = document.createElement('input');\n        input.value = path;\n        return input;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=workspacesplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module apputils-extension\n */\nimport { ILayoutRestorer, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { defaultSanitizer, Dialog, ICommandPalette, ISanitizer, ISessionContextDialogs, ISplashScreen, IWindowResolver, MainAreaWidget, Printing, sessionContextDialogs, WindowResolver } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB, StateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { jupyterFaviconIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Debouncer, Throttler } from '@lumino/polling';\nimport { Palette } from './palette';\nimport { settingsPlugin } from './settingsplugin';\nimport { themesPaletteMenuPlugin, themesPlugin } from './themesplugins';\nimport { toolbarRegistry } from './toolbarregistryplugin';\nimport { workspacesPlugin } from './workspacesplugin';\n/**\n * The interval in milliseconds before recover options appear during splash.\n */\nconst SPLASH_RECOVER_TIMEOUT = 12000;\n/**\n * The command IDs used by the apputils plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.loadState = 'apputils:load-statedb';\n    CommandIDs.print = 'apputils:print';\n    CommandIDs.reset = 'apputils:reset';\n    CommandIDs.resetOnLoad = 'apputils:reset-on-load';\n    CommandIDs.runFirstEnabled = 'apputils:run-first-enabled';\n    CommandIDs.runAllEnabled = 'apputils:run-all-enabled';\n    CommandIDs.toggleHeader = 'apputils:toggle-header';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default command palette extension.\n */\nconst palette = {\n    id: '@jupyterlab/apputils-extension:palette',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ICommandPalette,\n    optional: [ISettingRegistry],\n    activate: (app, translator, settingRegistry) => {\n        return Palette.activate(app, translator, settingRegistry);\n    }\n};\n/**\n * The default command palette's restoration extension.\n *\n * #### Notes\n * The command palette's restoration logic is handled separately from the\n * command palette provider extension because the layout restorer dependency\n * causes the command palette to be unavailable to other extensions earlier\n * in the application load cycle.\n */\nconst paletteRestorer = {\n    id: '@jupyterlab/apputils-extension:palette-restorer',\n    autoStart: true,\n    requires: [ILayoutRestorer, ITranslator],\n    activate: (app, restorer, translator) => {\n        Palette.restore(app, restorer, translator);\n    }\n};\n/**\n * The default window name resolver provider.\n */\nconst resolver = {\n    id: '@jupyterlab/apputils-extension:resolver',\n    autoStart: true,\n    provides: IWindowResolver,\n    requires: [JupyterFrontEnd.IPaths, IRouter],\n    activate: async (app, paths, router) => {\n        const { hash, search } = router.current;\n        const query = URLExt.queryStringToObject(search || '');\n        const solver = new WindowResolver();\n        const workspace = PageConfig.getOption('workspace');\n        const treePath = PageConfig.getOption('treePath');\n        const mode = PageConfig.getOption('mode') === 'multiple-document' ? 'lab' : 'doc';\n        // This is used as a key in local storage to refer to workspaces, either the name\n        // of the workspace or the string PageConfig.defaultWorkspace. Both lab and doc modes share the same workspace.\n        const candidate = workspace ? workspace : PageConfig.defaultWorkspace;\n        const rest = treePath ? URLExt.join('tree', treePath) : '';\n        try {\n            await solver.resolve(candidate);\n            return solver;\n        }\n        catch (error) {\n            // Window resolution has failed so the URL must change. Return a promise\n            // that never resolves to prevent the application from loading plugins\n            // that rely on `IWindowResolver`.\n            return new Promise(() => {\n                const { base } = paths.urls;\n                const pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n                const random = pool[Math.floor(Math.random() * pool.length)];\n                let path = URLExt.join(base, mode, 'workspaces', `auto-${random}`);\n                path = rest ? URLExt.join(path, URLExt.encodeParts(rest)) : path;\n                // Reset the workspace on load.\n                query['reset'] = '';\n                const url = path + URLExt.objectToQueryString(query) + (hash || '');\n                router.navigate(url, { hard: true });\n            });\n        }\n    }\n};\n/**\n * The default splash screen provider.\n */\nconst splash = {\n    id: '@jupyterlab/apputils-extension:splash',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ISplashScreen,\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, restored } = app;\n        // Create splash element and populate it.\n        const splash = document.createElement('div');\n        const galaxy = document.createElement('div');\n        const logo = document.createElement('div');\n        splash.id = 'jupyterlab-splash';\n        galaxy.id = 'galaxy';\n        logo.id = 'main-logo';\n        jupyterFaviconIcon.element({\n            container: logo,\n            stylesheet: 'splash'\n        });\n        galaxy.appendChild(logo);\n        ['1', '2', '3'].forEach(id => {\n            const moon = document.createElement('div');\n            const planet = document.createElement('div');\n            moon.id = `moon${id}`;\n            moon.className = 'moon orbit';\n            planet.id = `planet${id}`;\n            planet.className = 'planet';\n            moon.appendChild(planet);\n            galaxy.appendChild(moon);\n        });\n        splash.appendChild(galaxy);\n        // Create debounced recovery dialog function.\n        let dialog;\n        const recovery = new Throttler(async () => {\n            if (dialog) {\n                return;\n            }\n            dialog = new Dialog({\n                title: trans.__('Loading…'),\n                body: trans.__(`The loading screen is taking a long time.\nWould you like to clear the workspace or keep waiting?`),\n                buttons: [\n                    Dialog.cancelButton({ label: trans.__('Keep Waiting') }),\n                    Dialog.warnButton({ label: trans.__('Clear Workspace') })\n                ]\n            });\n            try {\n                const result = await dialog.launch();\n                dialog.dispose();\n                dialog = null;\n                if (result.button.accept && commands.hasCommand(CommandIDs.reset)) {\n                    return commands.execute(CommandIDs.reset);\n                }\n                // Re-invoke the recovery timer in the next frame.\n                requestAnimationFrame(() => {\n                    // Because recovery can be stopped, handle invocation rejection.\n                    void recovery.invoke().catch(_ => undefined);\n                });\n            }\n            catch (error) {\n                /* no-op */\n            }\n        }, { limit: SPLASH_RECOVER_TIMEOUT, edge: 'trailing' });\n        // Return ISplashScreen.\n        let splashCount = 0;\n        return {\n            show: (light = true) => {\n                splash.classList.remove('splash-fade');\n                splash.classList.toggle('light', light);\n                splash.classList.toggle('dark', !light);\n                splashCount++;\n                document.body.appendChild(splash);\n                // Because recovery can be stopped, handle invocation rejection.\n                void recovery.invoke().catch(_ => undefined);\n                return new DisposableDelegate(async () => {\n                    await restored;\n                    if (--splashCount === 0) {\n                        void recovery.stop();\n                        if (dialog) {\n                            dialog.dispose();\n                            dialog = null;\n                        }\n                        splash.classList.add('splash-fade');\n                        window.setTimeout(() => {\n                            document.body.removeChild(splash);\n                        }, 200);\n                    }\n                });\n            }\n        };\n    }\n};\nconst print = {\n    id: '@jupyterlab/apputils-extension:print',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        app.commands.addCommand(CommandIDs.print, {\n            label: trans.__('Print…'),\n            isEnabled: () => {\n                const widget = app.shell.currentWidget;\n                return Printing.getPrintFunction(widget) !== null;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                const printFunction = Printing.getPrintFunction(widget);\n                if (printFunction) {\n                    await printFunction();\n                }\n            }\n        });\n    }\n};\nexport const toggleHeader = {\n    id: '@jupyterlab/apputils-extension:toggle-header',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        app.commands.addCommand(CommandIDs.toggleHeader, {\n            label: trans.__('Show Header Above Content'),\n            isEnabled: () => app.shell.currentWidget instanceof MainAreaWidget &&\n                app.shell.currentWidget.contentHeader.widgets.length > 0,\n            isToggled: () => {\n                const widget = app.shell.currentWidget;\n                return widget instanceof MainAreaWidget\n                    ? !widget.contentHeader.isHidden\n                    : false;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                if (widget instanceof MainAreaWidget) {\n                    widget.contentHeader.setHidden(!widget.contentHeader.isHidden);\n                }\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleHeader, category });\n        }\n    }\n};\n/**\n * Update the browser title based on the workspace and the current\n * active item.\n */\nasync function updateTabTitle(workspace, db, name) {\n    var _a, _b;\n    const data = await db.toJSON();\n    let current = (_b = (_a = data['layout-restorer:data']) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.current;\n    if (current === undefined) {\n        document.title = `${PageConfig.getOption('appName') || 'JupyterLab'}${workspace.startsWith('auto-') ? ` (${workspace})` : ``}`;\n    }\n    else {\n        // File name from current path\n        let currentFile = PathExt.basename(current.split(':')[1]);\n        // Truncate to first 12 characters of current document name + ... if length > 15\n        currentFile =\n            currentFile.length > 15\n                ? currentFile.slice(0, 12).concat(`…`)\n                : currentFile;\n        // Number of restorable items that are either notebooks or editors\n        const count = Object.keys(data).filter(item => item.startsWith('notebook') || item.startsWith('editor')).length;\n        if (workspace.startsWith('auto-')) {\n            document.title = `${currentFile} (${workspace}${count > 1 ? ` : ${count}` : ``}) - ${name}`;\n        }\n        else {\n            document.title = `${currentFile}${count > 1 ? ` (${count})` : ``} - ${name}`;\n        }\n    }\n}\n/**\n * The default state database for storing application state.\n *\n * #### Notes\n * If this extension is loaded with a window resolver, it will automatically add\n * state management commands, URL support for `clone` and `reset`, and workspace\n * auto-saving. Otherwise, it will return a simple in-memory state database.\n */\nconst state = {\n    id: '@jupyterlab/apputils-extension:state',\n    autoStart: true,\n    provides: IStateDB,\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    optional: [IWindowResolver],\n    activate: (app, paths, router, translator, resolver) => {\n        const trans = translator.load('jupyterlab');\n        if (resolver === null) {\n            return new StateDB();\n        }\n        let resolved = false;\n        const { commands, name, serviceManager } = app;\n        const { workspaces } = serviceManager;\n        const workspace = resolver.name;\n        const transform = new PromiseDelegate();\n        const db = new StateDB({ transform: transform.promise });\n        const save = new Debouncer(async () => {\n            const id = workspace;\n            const metadata = { id };\n            const data = await db.toJSON();\n            await workspaces.save(id, { data, metadata });\n        });\n        // Any time the local state database changes, save the workspace.\n        db.changed.connect(() => void save.invoke(), db);\n        db.changed.connect(() => updateTabTitle(workspace, db, name));\n        commands.addCommand(CommandIDs.loadState, {\n            execute: async (args) => {\n                // Since the command can be executed an arbitrary number of times, make\n                // sure it is safe to call multiple times.\n                if (resolved) {\n                    return;\n                }\n                const { hash, path, search } = args;\n                const { urls } = paths;\n                const query = URLExt.queryStringToObject(search || '');\n                const clone = typeof query['clone'] === 'string'\n                    ? query['clone'] === ''\n                        ? URLExt.join(urls.base, urls.app)\n                        : URLExt.join(urls.base, urls.app, 'workspaces', query['clone'])\n                    : null;\n                const source = clone || workspace || null;\n                if (source === null) {\n                    console.error(`${CommandIDs.loadState} cannot load null workspace.`);\n                    return;\n                }\n                try {\n                    const saved = await workspaces.fetch(source);\n                    // If this command is called after a reset, the state database\n                    // will already be resolved.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'overwrite', contents: saved.data });\n                    }\n                }\n                catch ({ message }) {\n                    console.warn(`Fetching workspace \"${workspace}\" failed.`, message);\n                    // If the workspace does not exist, cancel the data transformation\n                    // and save a workspace with the current user state data.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'cancel', contents: null });\n                    }\n                }\n                if (source === clone) {\n                    // Maintain the query string parameters but remove `clone`.\n                    delete query['clone'];\n                    const url = path + URLExt.objectToQueryString(query) + hash;\n                    const cloned = save.invoke().then(() => router.stop);\n                    // After the state has been cloned, navigate to the URL.\n                    void cloned.then(() => {\n                        router.navigate(url);\n                    });\n                    return cloned;\n                }\n                // After the state database has finished loading, save it.\n                await save.invoke();\n            }\n        });\n        commands.addCommand(CommandIDs.reset, {\n            label: trans.__('Reset Application State'),\n            execute: async ({ reload }) => {\n                await db.clear();\n                await save.invoke();\n                if (reload) {\n                    router.reload();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.resetOnLoad, {\n            execute: (args) => {\n                const { hash, path, search } = args;\n                const query = URLExt.queryStringToObject(search || '');\n                const reset = 'reset' in query;\n                const clone = 'clone' in query;\n                if (!reset) {\n                    return;\n                }\n                // If the state database has already been resolved, resetting is\n                // impossible without reloading.\n                if (resolved) {\n                    return router.reload();\n                }\n                // Empty the state database.\n                resolved = true;\n                transform.resolve({ type: 'clear', contents: null });\n                // Maintain the query string parameters but remove `reset`.\n                delete query['reset'];\n                const url = path + URLExt.objectToQueryString(query) + hash;\n                const cleared = db.clear().then(() => save.invoke());\n                // After the state has been reset, navigate to the URL.\n                if (clone) {\n                    void cleared.then(() => {\n                        router.navigate(url, { hard: true });\n                    });\n                }\n                else {\n                    void cleared.then(() => {\n                        router.navigate(url);\n                    });\n                }\n                return cleared;\n            }\n        });\n        router.register({\n            command: CommandIDs.loadState,\n            pattern: /.?/,\n            rank: 30 // High priority: 30:100.\n        });\n        router.register({\n            command: CommandIDs.resetOnLoad,\n            pattern: /(\\?reset|\\&reset)($|&)/,\n            rank: 20 // High priority: 20:100.\n        });\n        return db;\n    }\n};\n/**\n * The default session context dialogs extension.\n */\nconst sessionDialogs = {\n    id: '@jupyterlab/apputils-extension:sessionDialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => {\n        return sessionContextDialogs;\n    }\n};\n/**\n * Utility commands\n */\nconst utilityCommands = {\n    id: '@jupyterlab/apputils-extension:utilityCommands',\n    requires: [ITranslator],\n    autoStart: true,\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        commands.addCommand(CommandIDs.runFirstEnabled, {\n            label: trans.__('Run First Enabled Command'),\n            execute: args => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        return app.commands.execute(cmd, arg);\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.runAllEnabled, {\n            label: trans.__('Run All Enabled Commands Passed as Args'),\n            execute: async (args) => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                const errorIfNotEnabled = args.errorIfNotEnabled;\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        await app.commands.execute(cmd, arg);\n                    }\n                    else {\n                        if (errorIfNotEnabled) {\n                            console.error(`${cmd} is not enabled.`);\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n/**\n * The default HTML sanitizer.\n */\nconst sanitizer = {\n    id: '@jupyter/apputils-extension:sanitizer',\n    autoStart: true,\n    provides: ISanitizer,\n    activate: () => {\n        return defaultSanitizer;\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    palette,\n    paletteRestorer,\n    print,\n    resolver,\n    sanitizer,\n    settingsPlugin,\n    state,\n    splash,\n    sessionDialogs,\n    themesPlugin,\n    themesPaletteMenuPlugin,\n    toggleHeader,\n    toolbarRegistry,\n    utilityCommands,\n    workspacesPlugin\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","Private","activate","Palette","constructor","palette","translator","this","nullTranslator","trans","load","_palette","title","label","caption","__","placeholder","inputNode","addItem","options","item","DisposableDelegate","removeItem","app","settingRegistry","commands","shell","createPalette","modalPalette","ModalCommandPalette","commandPalette","modal","node","setAttribute","add","rank","loadSettings","updateSettings","settings","newModal","get","composite","parent","detach","show","attach","Promise","all","restored","then","changed","connect","catch","reason","console","error","message","updatePaletteTitle","binding","find","keyBindings","b","command","ks","CommandRegistry","keys","join","keyBindingChanged","addCommand","execute","activateById","id","restore","restorer","CommandPalette","renderer","CommandPaletteSvg","icon","paletteIcon","SettingConnector","DataConnector","connector","super","_throttlers","Object","create","_connector","fetch","throttlers","Throttler","invoke","async","query","isDeferred","isDisabled","PageConfig","ids","values","list","filter","raw","save","settingsPlugin","serviceManager","registry","SettingRegistry","plugins","forEach","index","warn","schema","autoStart","provides","ISettingRegistry","changeTheme","themeScrollbars","changeFont","incrFontSize","decrFontSize","themesPlugin","requires","JupyterFrontEnd","ITranslator","optional","ISplashScreen","paths","splash","host","url","URLExt","urls","themes","key","manager","ThemeManager","undefined","currentTheme","themeChanged","sender","args","newValue","document","body","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","notifyCommandChanged","theme","displayName","getDisplayName","isToggled","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars","isEnabled","getCSS","setCSSOverride","IThemeManager","themesPaletteMenuPlugin","ICommandPalette","IMainMenu","mainMenu","_a","themeMenu","settingsMenu","items","type","submenu","insertItem","isPalette","category","toolbarRegistry","IToolbarWidgetRegistry","ToolbarWidgetRegistry","defaultFactory","createDefaultFactory","saveWorkspace","saveWorkspaceAs","WORKSPACE_NAME","WORKSPACE_EXT","LAST_SAVE_ID","workspacesPlugin","IFileBrowserFactory","IWindowResolver","IStateDB","IRouter","fbf","resolver","state","router","factory","WorkspaceFactory","workspaces","docRegistry","addFileType","name","contentType","fileFormat","extensions","mimeTypes","iconClass","addWidgetFactory","data","saveAs","defaultBrowser","contents","lastSave","userPath","split","pop","includes","resolvedData","metadata","format","content","JSON","stringify","browser","defaultName","defaultPath","model","path","saveBtn","Dialog","result","showDialog","SaveWidget","buttons","button","value","getSavePath","ABCWidgetFactory","fileTypes","defaultFor","readOnly","_application","_router","_state","_workspaces","createNewWidget","context","ready","workspace","toJSON","navigate","hard","location","href","widget","DocumentWidget","Widget","dispose","dummyWidget","createSaveNode","getValue","input","createElement","loadState","print","reset","resetOnLoad","runFirstEnabled","runAllEnabled","toggleHeader","paletteRestorer","ILayoutRestorer","hash","search","current","solver","WindowResolver","treePath","mode","candidate","rest","resolve","base","pool","random","Math","floor","length","galaxy","logo","dialog","jupyterFaviconIcon","container","stylesheet","appendChild","moon","planet","className","recovery","launch","accept","hasCommand","requestAnimationFrame","_","limit","edge","splashCount","light","classList","remove","toggle","stop","window","setTimeout","removeChild","currentWidget","Printing","printFunction","MainAreaWidget","contentHeader","widgets","isHidden","setHidden","StateDB","resolved","transform","PromiseDelegate","db","promise","Debouncer","_b","main","startsWith","currentFile","PathExt","slice","concat","count","updateTabTitle","clone","source","saved","cloned","reload","clear","cleared","register","pattern","sessionDialogs","ISessionContextDialogs","sessionContextDialogs","utilityCommands","commandArgs","argList","Array","isArray","i","cmd","arg","errorIfNotEnabled","ISanitizer","defaultSanitizer"],"sourceRoot":""}