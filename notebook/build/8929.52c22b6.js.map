{"version":3,"file":"8929.52c22b6.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/datagrid/dist/index.es6.js"],"sourcesContent":["import { Platform, ClipboardExt, ElementExt } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Drag } from '@lumino/dragdrop';\nimport { some, iter, ArrayExt, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, ScrollBar, GridLayout } from '@lumino/widgets';\nimport { MessageLoop, ConflatableMessage } from '@lumino/messaging';\nimport { JSONExt } from '@lumino/coreutils';\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nvar BasicKeyHandler = /** @class */ (function () {\n    function BasicKeyHandler() {\n        this._disposed = false;\n    }\n    Object.defineProperty(BasicKeyHandler.prototype, \"isDisposed\", {\n        /**\n         * Whether the key handler is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the resources held by the key handler.\n     */\n    BasicKeyHandler.prototype.dispose = function () {\n        this._disposed = true;\n    };\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    BasicKeyHandler.prototype.onKeyDown = function (grid, event) {\n        // if grid is editable and cell selection available, start cell editing\n        // on key press (letters, numbers and space only)\n        if (grid.editable &&\n            grid.selectionModel.cursorRow !== -1 &&\n            grid.selectionModel.cursorColumn !== -1) {\n            var input = String.fromCharCode(event.keyCode);\n            if (/[a-zA-Z0-9-_ ]/.test(input)) {\n                var row = grid.selectionModel.cursorRow;\n                var column = grid.selectionModel.cursorColumn;\n                var cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n                if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                return;\n            }\n        }\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'ArrowLeft':\n                this.onArrowLeft(grid, event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRight(grid, event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUp(grid, event);\n                break;\n            case 'ArrowDown':\n                this.onArrowDown(grid, event);\n                break;\n            case 'PageUp':\n                this.onPageUp(grid, event);\n                break;\n            case 'PageDown':\n                this.onPageDown(grid, event);\n                break;\n            case 'Escape':\n                this.onEscape(grid, event);\n                break;\n            case 'Delete':\n                this.onDelete(grid, event);\n                break;\n            case 'C':\n                this.onKeyC(grid, event);\n                break;\n            case 'Enter':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'up' : 'down');\n                    grid.scrollToCursor();\n                }\n                break;\n            case 'Tab':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'left' : 'right');\n                    grid.scrollToCursor();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                break;\n        }\n    };\n    /**\n     * Handle the `'ArrowLeft'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowLeft = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the row selection mode with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 - 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = 0;\n            c2 = 0;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c - 1;\n            c2 = c - 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowRight'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowRight = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the row selection model with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = Infinity;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 + 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = Infinity;\n            c2 = Infinity;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c + 1;\n            c2 = c + 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowUp = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = 0;\n            r2 = 0;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r - 1;\n            r2 = r - 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'ArrowDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onArrowDown = function (grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = Infinity;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = Infinity;\n            r2 = Infinity;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r + 1;\n            r2 = r + 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    };\n    /**\n     * Handle the `'PageUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onPageUp = function (grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('up');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        var n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 - n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    };\n    /**\n     * Handle the `'PageDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onPageDown = function (grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('down');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        var n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        var r = model.cursorRow;\n        var c = model.cursorColumn;\n        var cs = model.currentSelection();\n        // Set up the selection variables.\n        var r1;\n        var r2;\n        var c1;\n        var c2;\n        var cr;\n        var cc;\n        var clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 + n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cr, cursorColumn: cc, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    };\n    /**\n     * Handle the `'Escape'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onEscape = function (grid, event) {\n        if (grid.selectionModel) {\n            grid.selectionModel.clear();\n        }\n    };\n    /**\n     * Handle the `'Delete'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onDelete = function (grid, event) {\n        if (grid.editable && !grid.selectionModel.isEmpty) {\n            var dataModel = grid.dataModel;\n            // Fetch the max row and column.\n            var maxRow = dataModel.rowCount('body') - 1;\n            var maxColumn = dataModel.columnCount('body') - 1;\n            var it = grid.selectionModel.selections();\n            var s = void 0;\n            while ((s = it.next()) !== undefined) {\n                // Clamp the cell to the model bounds.\n                var sr1 = Math.max(0, Math.min(s.r1, maxRow));\n                var sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n                var sr2 = Math.max(0, Math.min(s.r2, maxRow));\n                var sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n                for (var r = sr1; r <= sr2; ++r) {\n                    for (var c = sc1; c <= sc2; ++c) {\n                        dataModel.setData('body', r, c, null);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Handle the `'C'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    BasicKeyHandler.prototype.onKeyC = function (grid, event) {\n        // Bail early if the modifiers aren't correct for copy.\n        if (event.shiftKey || !Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Copy the current selection to the clipboard.\n        grid.copyToClipboard();\n    };\n    return BasicKeyHandler;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer() {\n    }\n    return CellRenderer;\n}());\n/**\n * The namespace for the `CellRenderer` class statics.\n */\n(function (CellRenderer) {\n    /**\n     * Resolve a config option for a cell renderer.\n     *\n     * @param option - The config option to resolve.\n     *\n     * @param config - The cell config object.\n     *\n     * @returns The resolved value for the option.\n     */\n    function resolveOption(option, config) {\n        return typeof option === 'function'\n            ? option(config)\n            : option;\n    }\n    CellRenderer.resolveOption = resolveOption;\n})(CellRenderer || (CellRenderer = {}));\n\n/**\n * A cell renderer which renders data values as text.\n */\nvar TextRenderer = /** @class */ (function (_super) {\n    __extends(TextRenderer, _super);\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    function TextRenderer(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.font = options.font || '12px sans-serif';\n        _this.textColor = options.textColor || '#000000';\n        _this.backgroundColor = options.backgroundColor || '';\n        _this.verticalAlignment = options.verticalAlignment || 'center';\n        _this.horizontalAlignment = options.horizontalAlignment || 'left';\n        _this.format = options.format || TextRenderer.formatGeneric();\n        _this.elideDirection = options.elideDirection || 'right';\n        _this.wrapText = options.wrapText || false;\n        return _this;\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.paint = function (gc, config) {\n        this.drawBackground(gc, config);\n        this.drawText(gc, config);\n    };\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.drawBackground = function (gc, config) {\n        // Resolve the background color for the cell.\n        var color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    };\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    TextRenderer.prototype.drawText = function (gc, config) {\n        // Resolve the font for the cell.\n        var font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        var color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        // Format the cell value to text.\n        var format = this.format;\n        var text = format(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        var vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        var hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        var elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        var wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        var boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        var textHeight = TextRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        var textX;\n        var textY;\n        var boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // The current text width in pixels.\n        var textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            var wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            var curY = textY;\n            var textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                var curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (var i = textInCurrentLine.length; i > 0; i--) {\n                        var curSubString = textInCurrentLine.substring(0, i);\n                        var curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            var nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    var curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    var incrementedText = [textInCurrentLine, curWord].join(' ');\n                    var incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        var elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, text.length / 2 + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring(text.length / 2);\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    };\n    return TextRenderer;\n}(CellRenderer));\n/**\n * The namespace for the `TextRenderer` class statics.\n */\n(function (TextRenderer) {\n    /**\n     * Create a generic text format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new generic text format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `String()` to coerce any value\n     * to a string.\n     */\n    function formatGeneric(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return String(value);\n        };\n    }\n    TextRenderer.formatGeneric = formatGeneric;\n    /**\n     * Create a fixed decimal format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new fixed decimal format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toFixed()` to\n     * coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatFixed(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toFixed(digits);\n        };\n    }\n    TextRenderer.formatFixed = formatFixed;\n    /**\n     * Create a significant figure format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new significant figure format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toPrecision()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatPrecision(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toPrecision(digits);\n        };\n    }\n    TextRenderer.formatPrecision = formatPrecision;\n    /**\n     * Create a scientific notation format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new scientific notation format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toExponential()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatExponential(options) {\n        if (options === void 0) { options = {}; }\n        var digits = options.digits;\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toExponential(digits);\n        };\n    }\n    TextRenderer.formatExponential = formatExponential;\n    /**\n     * Create an international number format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international number format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.NumberFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) number formatter.\n     */\n    function formatIntlNumber(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        var nft = new Intl.NumberFormat(options.locales, options.options);\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return nft.format(value);\n        };\n    }\n    TextRenderer.formatIntlNumber = formatIntlNumber;\n    /**\n     * Create a date format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new date format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toDateString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatDate(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toDateString();\n            }\n            return new Date(value).toDateString();\n        };\n    }\n    TextRenderer.formatDate = formatDate;\n    /**\n     * Create a time format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new time format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toTimeString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toTimeString();\n            }\n            return new Date(value).toTimeString();\n        };\n    }\n    TextRenderer.formatTime = formatTime;\n    /**\n     * Create an ISO datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new ISO datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toISOString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatISODateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toISOString();\n            }\n            return new Date(value).toISOString();\n        };\n    }\n    TextRenderer.formatISODateTime = formatISODateTime;\n    /**\n     * Create a UTC datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new UTC datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toUTCString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatUTCDateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toUTCString();\n            }\n            return new Date(value).toUTCString();\n        };\n    }\n    TextRenderer.formatUTCDateTime = formatUTCDateTime;\n    /**\n     * Create an international datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international datetime format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.DateTimeFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) datetime formatter.\n     */\n    function formatIntlDateTime(options) {\n        if (options === void 0) { options = {}; }\n        var missing = options.missing || '';\n        var dtf = new Intl.DateTimeFormat(options.locales, options.options);\n        return function (_a) {\n            var value = _a.value;\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return dtf.format(value);\n        };\n    }\n    TextRenderer.formatIntlDateTime = formatIntlDateTime;\n    /**\n     * Measure the height of a font.\n     *\n     * @param font - The CSS font string of interest.\n     *\n     * @returns The height of the font bounding box.\n     *\n     * #### Notes\n     * This function uses a temporary DOM node to measure the text box\n     * height for the specified font. The first call for a given font\n     * will incur a DOM reflow, but the return value is cached, so any\n     * subsequent call for the same font will return the cached value.\n     */\n    function measureFontHeight(font) {\n        // Look up the cached font height.\n        var height = Private$7.fontHeightCache[font];\n        // Return the cached font height if it exists.\n        if (height !== undefined) {\n            return height;\n        }\n        // Normalize the font.\n        Private$7.fontMeasurementGC.font = font;\n        var normFont = Private$7.fontMeasurementGC.font;\n        // Set the font on the measurement node.\n        Private$7.fontMeasurementNode.style.font = normFont;\n        // Add the measurement node to the document.\n        document.body.appendChild(Private$7.fontMeasurementNode);\n        // Measure the node height.\n        height = Private$7.fontMeasurementNode.offsetHeight;\n        // Remove the measurement node from the document.\n        document.body.removeChild(Private$7.fontMeasurementNode);\n        // Cache the measured height for the font and norm font.\n        Private$7.fontHeightCache[font] = height;\n        Private$7.fontHeightCache[normFont] = height;\n        // Return the measured height.\n        return height;\n    }\n    TextRenderer.measureFontHeight = measureFontHeight;\n})(TextRenderer || (TextRenderer = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$7;\n(function (Private) {\n    /**\n     * A cache of measured font heights.\n     */\n    Private.fontHeightCache = Object.create(null);\n    /**\n     * The DOM node used for font height measurement.\n     */\n    Private.fontMeasurementNode = (function () {\n        var node = document.createElement('div');\n        node.style.position = 'absolute';\n        node.style.top = '-99999px';\n        node.style.left = '-99999px';\n        node.style.visibility = 'hidden';\n        node.textContent = 'M';\n        return node;\n    })();\n    /**\n     * The GC used for font measurement.\n     */\n    Private.fontMeasurementGC = (function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas.getContext('2d');\n    })();\n})(Private$7 || (Private$7 = {}));\n\n/**\n * A cell renderer which renders data values as text.\n */\nvar HyperlinkRenderer = /** @class */ (function (_super) {\n    __extends(HyperlinkRenderer, _super);\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    function HyperlinkRenderer(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        // Set default parameters before passing over the super.\n        options.textColor = options.textColor || 'navy';\n        options.font = options.font || 'bold 12px sans-serif';\n        _this = _super.call(this, options) || this;\n        _this.url = options.url;\n        _this.urlName = options.urlName;\n        return _this;\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    HyperlinkRenderer.prototype.drawText = function (gc, config) {\n        // Resolve the font for the cell.\n        var font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve for the friendly URL name.\n        var urlName = CellRenderer.resolveOption(this.urlName, config);\n        // Resolve the text color for the cell.\n        var color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        var format = this.format;\n        var text;\n        // If we have a friendly URL name, use that.\n        if (urlName) {\n            text = format(__assign(__assign({}, config), { value: urlName }));\n        }\n        else {\n            // Otherwise use the raw value attribute.\n            text = format(config);\n        }\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        var vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        var hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        var elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        var wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        var boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        var textHeight = HyperlinkRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        var textX;\n        var textY;\n        var boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // The current text width in pixels.\n        var textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            var wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            var curY = textY;\n            var textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                var curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (var i = textInCurrentLine.length; i > 0; i--) {\n                        var curSubString = textInCurrentLine.substring(0, i);\n                        var curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            var nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    var curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    var incrementedText = [textInCurrentLine, curWord].join(' ');\n                    var incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        var elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, text.length / 2 + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring(text.length / 2);\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    };\n    return HyperlinkRenderer;\n}(TextRenderer));\n\n/**\n * A collection of helper functions relating to merged cell groups\n */\nvar CellGroup;\n(function (CellGroup) {\n    function areCellsMerged(dataModel, rgn, cell1, cell2) {\n        var numGroups = dataModel.groupCount(rgn);\n        var row1 = cell1[0], column1 = cell1[1];\n        var row2 = cell2[0], column2 = cell2[1];\n        for (var i = 0; i < numGroups; i++) {\n            var group = dataModel.group(rgn, i);\n            if (row1 >= group.r1 &&\n                row1 <= group.r2 &&\n                column1 >= group.c1 &&\n                column1 <= group.c2 &&\n                row2 >= group.r1 &&\n                row2 <= group.r2 &&\n                column2 >= group.c1 &&\n                column2 <= group.c2) {\n                return true;\n            }\n        }\n        return false;\n    }\n    CellGroup.areCellsMerged = areCellsMerged;\n    /**\n     * Calculates the cell boundary offsets needed for\n     * a row or column at the given index by taking\n     * into account merged cell groups in the region.\n     * @param dataModel\n     * @param regions\n     * @param axis\n     * @param sectionList\n     * @param index\n     */\n    function calculateMergeOffsets(dataModel, regions, axis, sectionList, index) {\n        var mergeStartOffset = 0;\n        var mergeEndOffset = 0;\n        var mergedCellGroups = [];\n        for (var _i = 0, regions_1 = regions; _i < regions_1.length; _i++) {\n            var region = regions_1[_i];\n            mergedCellGroups = mergedCellGroups.concat(getCellGroupsAtRegion(dataModel, region));\n        }\n        var groupsAtAxis = [];\n        if (axis === 'row') {\n            for (var _a = 0, regions_2 = regions; _a < regions_2.length; _a++) {\n                var region = regions_2[_a];\n                groupsAtAxis = groupsAtAxis.concat(getCellGroupsAtRow(dataModel, region, index));\n            }\n        }\n        else {\n            for (var _b = 0, regions_3 = regions; _b < regions_3.length; _b++) {\n                var region = regions_3[_b];\n                groupsAtAxis = groupsAtAxis.concat(getCellGroupsAtColumn(dataModel, region, index));\n            }\n        }\n        if (groupsAtAxis.length === 0) {\n            return [0, 0, { r1: -1, r2: -1, c1: -1, c2: -1 }];\n        }\n        var joinedGroup = groupsAtAxis[0];\n        for (var g = 0; g < mergedCellGroups.length; g++) {\n            var group = mergedCellGroups[g];\n            if (areCellGroupsIntersectingAtAxis(joinedGroup, group, axis)) {\n                joinedGroup = joinCellGroups([group, joinedGroup]);\n                mergedCellGroups.splice(g, 1);\n                g = 0;\n            }\n        }\n        var minRow = joinedGroup.r1;\n        var maxRow = joinedGroup.r2;\n        for (var r = index - 1; r >= minRow; r--) {\n            mergeStartOffset += sectionList.sizeOf(r);\n        }\n        for (var r = index + 1; r <= maxRow; r++) {\n            mergeEndOffset += sectionList.sizeOf(r);\n        }\n        return [mergeStartOffset, mergeEndOffset, joinedGroup];\n    }\n    CellGroup.calculateMergeOffsets = calculateMergeOffsets;\n    /**\n     * Checks if two cell-groups are intersecting\n     * in the given axis.\n     * @param group1\n     * @param group2\n     * @param axis\n     */\n    function areCellGroupsIntersectingAtAxis(group1, group2, axis) {\n        if (axis === 'row') {\n            return ((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n                (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n                (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n                (group2.r2 >= group1.r1 && group2.r2 <= group1.r2));\n        }\n        return ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n            (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n            (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n            (group2.c2 >= group1.c1 && group2.c2 <= group1.c2));\n    }\n    CellGroup.areCellGroupsIntersectingAtAxis = areCellGroupsIntersectingAtAxis;\n    /**\n     * Checks if cell-groups are intersecting.\n     * @param group1\n     * @param group2\n     */\n    function areCellGroupsIntersecting(group1, group2) {\n        return (((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n            (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n            (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n            (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)) &&\n            ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n                (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n                (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n                (group2.c2 >= group1.c1 && group2.c2 <= group1.c2)));\n    }\n    CellGroup.areCellGroupsIntersecting = areCellGroupsIntersecting;\n    /**\n     * Retrieves the index of the cell-group to which\n     * the cell at the given row, column belongs.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroupIndex(dataModel, rgn, row, column) {\n        var numGroups = dataModel.groupCount(rgn);\n        for (var i = 0; i < numGroups; i++) {\n            var group = dataModel.group(rgn, i);\n            if (row >= group.r1 &&\n                row <= group.r2 &&\n                column >= group.c1 &&\n                column <= group.c2) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    CellGroup.getGroupIndex = getGroupIndex;\n    /**\n     * Returns a cell-group for the given row/index coordinates.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroup(dataModel, rgn, row, column) {\n        var groupIndex = getGroupIndex(dataModel, rgn, row, column);\n        if (groupIndex === -1) {\n            return null;\n        }\n        return dataModel.group(rgn, groupIndex);\n    }\n    CellGroup.getGroup = getGroup;\n    /**\n     * Returns all cell groups which belong to\n     * a given cell cell region.\n     * @param dataModel\n     * @param rgn\n     */\n    function getCellGroupsAtRegion(dataModel, rgn) {\n        var groupsAtRegion = [];\n        var numGroups = dataModel.groupCount(rgn);\n        for (var i = 0; i < numGroups; i++) {\n            var group = dataModel.group(rgn, i);\n            groupsAtRegion.push(group);\n        }\n        return groupsAtRegion;\n    }\n    CellGroup.getCellGroupsAtRegion = getCellGroupsAtRegion;\n    /**\n     * Calculates and returns a merged cell-group from\n     * two cell-group objects.\n     * @param groups\n     */\n    function joinCellGroups(groups) {\n        var startRow = Number.MAX_VALUE;\n        var endRow = Number.MIN_VALUE;\n        var startColumn = Number.MAX_VALUE;\n        var endColumn = Number.MIN_VALUE;\n        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n            var group = groups_1[_i];\n            startRow = Math.min(startRow, group.r1);\n            endRow = Math.max(endRow, group.r2);\n            startColumn = Math.min(startColumn, group.c1);\n            endColumn = Math.max(endColumn, group.c2);\n        }\n        return { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn };\n    }\n    CellGroup.joinCellGroups = joinCellGroups;\n    /**\n     * Merges a cell group with other cells groups in the\n     * same region if they intersect.\n     * @param dataModel the data model of the grid.\n     * @param group the target cell group.\n     * @param region the region of the cell group.\n     * @returns a new cell group after merging has happened.\n     */\n    function joinCellGroupWithMergedCellGroups(dataModel, group, region) {\n        var joinedGroup = __assign({}, group);\n        var mergedCellGroups = getCellGroupsAtRegion(dataModel, region);\n        for (var g = 0; g < mergedCellGroups.length; g++) {\n            var mergedGroup = mergedCellGroups[g];\n            if (areCellGroupsIntersecting(joinedGroup, mergedGroup)) {\n                joinedGroup = joinCellGroups([joinedGroup, mergedGroup]);\n            }\n        }\n        return joinedGroup;\n    }\n    CellGroup.joinCellGroupWithMergedCellGroups = joinCellGroupWithMergedCellGroups;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given row.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param row the target row to look for intersections at.\n     * @returns all cell groups intersecting with the row.\n     */\n    function getCellGroupsAtRow(dataModel, rgn, row) {\n        var groupsAtRow = [];\n        var numGroups = dataModel.groupCount(rgn);\n        for (var i = 0; i < numGroups; i++) {\n            var group = dataModel.group(rgn, i);\n            if (row >= group.r1 && row <= group.r2) {\n                groupsAtRow.push(group);\n            }\n        }\n        return groupsAtRow;\n    }\n    CellGroup.getCellGroupsAtRow = getCellGroupsAtRow;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given column.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param column the target column to look for intersections at.\n     * @returns all cell groups intersecting with the column.\n     */\n    function getCellGroupsAtColumn(dataModel, rgn, column) {\n        var groupsAtColumn = [];\n        var numGroups = dataModel.groupCount(rgn);\n        for (var i = 0; i < numGroups; i++) {\n            var group = dataModel.group(rgn, i);\n            if (column >= group.c1 && column <= group.c2) {\n                groupsAtColumn.push(group);\n            }\n        }\n        return groupsAtColumn;\n    }\n    CellGroup.getCellGroupsAtColumn = getCellGroupsAtColumn;\n    /**\n     * Checks if cell group 1 is above cell group 2.\n     * @param group1 cell group 1.\n     * @param group2 cell group 2.\n     * @returns boolean.\n     */\n    function isCellGroupAbove(group1, group2) {\n        return group2.r2 >= group1.r1;\n    }\n    CellGroup.isCellGroupAbove = isCellGroupAbove;\n    /**\n     * Checks if cell group 1 is below cell group 2.\n     */\n    function isCellGroupBelow(group1, group2) {\n        return group2.r1 <= group1.r2;\n    }\n    CellGroup.isCellGroupBelow = isCellGroupBelow;\n    /**\n     * Merges a target cell group with any cell groups\n     * it intersects with at a given row or column.\n     * @param dataModel data model of the grid.\n     * @param regions list of cell regions.\n     * @param axis row or column.\n     * @param group the target cell group.\n     * @returns a new merged cell group.\n     */\n    function joinCellGroupsIntersectingAtAxis(dataModel, regions, axis, group) {\n        var groupsAtAxis = [];\n        if (axis === 'row') {\n            for (var _i = 0, regions_4 = regions; _i < regions_4.length; _i++) {\n                var region = regions_4[_i];\n                for (var r = group.r1; r <= group.r2; r++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtRow(dataModel, region, r));\n                }\n            }\n        }\n        else {\n            for (var _a = 0, regions_5 = regions; _a < regions_5.length; _a++) {\n                var region = regions_5[_a];\n                for (var c = group.c1; c <= group.c2; c++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtColumn(dataModel, region, c));\n                }\n            }\n        }\n        var mergedGroupAtAxis = CellGroup.joinCellGroups(groupsAtAxis);\n        if (groupsAtAxis.length > 0) {\n            var mergedCellGroups = [];\n            for (var _b = 0, regions_6 = regions; _b < regions_6.length; _b++) {\n                var region = regions_6[_b];\n                mergedCellGroups = mergedCellGroups.concat(CellGroup.getCellGroupsAtRegion(dataModel, region));\n            }\n            for (var g = 0; g < mergedCellGroups.length; g++) {\n                var group_1 = mergedCellGroups[g];\n                if (CellGroup.areCellGroupsIntersectingAtAxis(mergedGroupAtAxis, group_1, axis)) {\n                    mergedGroupAtAxis = CellGroup.joinCellGroups([\n                        group_1,\n                        mergedGroupAtAxis\n                    ]);\n                    mergedCellGroups.splice(g, 1);\n                    g = 0;\n                }\n            }\n        }\n        return mergedGroupAtAxis;\n    }\n    CellGroup.joinCellGroupsIntersectingAtAxis = joinCellGroupsIntersectingAtAxis;\n})(CellGroup || (CellGroup = {}));\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nvar BasicMouseHandler = /** @class */ (function () {\n    function BasicMouseHandler() {\n        this._disposed = false;\n        this._pressData = null;\n    }\n    /**\n     * Dispose of the resources held by the mouse handler.\n     */\n    BasicMouseHandler.prototype.dispose = function () {\n        // Bail early if the handler is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Release any held resources.\n        this.release();\n        // Mark the handler as disposed.\n        this._disposed = true;\n    };\n    Object.defineProperty(BasicMouseHandler.prototype, \"isDisposed\", {\n        /**\n         * Whether the mouse handler is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Release the resources held by the handler.\n     */\n    BasicMouseHandler.prototype.release = function () {\n        // Bail early if the is no press data.\n        if (!this._pressData) {\n            return;\n        }\n        // Clear the autoselect timeout.\n        if (this._pressData.type === 'select') {\n            this._pressData.timeout = -1;\n        }\n        // Clear the press data.\n        this._pressData.override.dispose();\n        this._pressData = null;\n    };\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseHover = function (grid, event) {\n        // Hit test the grid.\n        var hit = grid.hitTest(event.clientX, event.clientY);\n        // Get the resize handle for the hit test.\n        var handle = Private$6.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        var cursor = this.cursorForHandle(handle);\n        // Hyperlink logic.\n        var config = Private$6.createCellConfigObject(grid, hit);\n        if (config) {\n            // Retrieve renderer for hovered cell.\n            var renderer = grid.cellRenderers.get(config);\n            if (renderer instanceof HyperlinkRenderer) {\n                cursor = this.cursorForHandle('hyperlink');\n            }\n        }\n        // Update the viewport cursor based on the part.\n        grid.viewport.node.style.cursor = cursor;\n        // TODO support user-defined hover items\n    };\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseLeave = function (grid, event) {\n        // TODO support user-defined hover popups.\n        // Clear the viewport cursor.\n        grid.viewport.node.style.cursor = '';\n    };\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseDown = function (grid, event) {\n        // Unpack the event.\n        var clientX = event.clientX, clientY = event.clientY;\n        // Hit test the grid.\n        var hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        var region = hit.region, row = hit.row, column = hit.column;\n        // Bail if the hit test is on an uninteresting region.\n        if (region === 'void') {\n            return;\n        }\n        // Fetch the modifier flags.\n        var shift = event.shiftKey;\n        var accel = Platform.accelKey(event);\n        // Hyperlink logic.\n        if (grid) {\n            // Create cell config object.\n            var config = Private$6.createCellConfigObject(grid, hit);\n            // Retrieve cell renderer.\n            var renderer = grid.cellRenderers.get(config);\n            // Only process hyperlink renderers.\n            if (renderer instanceof HyperlinkRenderer) {\n                // Use the url param if it exists.\n                var url = CellRenderer.resolveOption(renderer.url, config);\n                // Otherwise assume cell value is the URL.\n                if (!url) {\n                    var format = TextRenderer.formatGeneric();\n                    url = format(config);\n                }\n                // Open the hyperlink only if user hit Ctrl+Click.\n                if (accel) {\n                    window.open(url);\n                    // Reset cursor default after clicking\n                    var cursor_1 = this.cursorForHandle('none');\n                    grid.viewport.node.style.cursor = cursor_1;\n                    // Not applying selections if navigating away.\n                    return;\n                }\n            }\n        }\n        // If the hit test is the body region, the only option is select.\n        if (region === 'body') {\n            // Fetch the selection model.\n            var model_1 = grid.selectionModel;\n            // Bail early if there is no selection model.\n            if (!model_1) {\n                return;\n            }\n            // Override the document cursor.\n            var override_1 = Drag.overrideCursor('default');\n            // Set up the press data.\n            this._pressData = {\n                type: 'select',\n                region: region,\n                row: row,\n                column: column,\n                override: override_1,\n                localX: -1,\n                localY: -1,\n                timeout: -1\n            };\n            // Set up the selection variables.\n            var r1_1;\n            var c1_1;\n            var r2_1;\n            var c2_1;\n            var cursorRow_1;\n            var cursorColumn_1;\n            var clear_1;\n            // Accel == new selection, keep old selections.\n            if (accel) {\n                r1_1 = row;\n                r2_1 = row;\n                c1_1 = column;\n                c2_1 = column;\n                cursorRow_1 = row;\n                cursorColumn_1 = column;\n                clear_1 = 'none';\n            }\n            else if (shift) {\n                r1_1 = model_1.cursorRow;\n                r2_1 = row;\n                c1_1 = model_1.cursorColumn;\n                c2_1 = column;\n                cursorRow_1 = model_1.cursorRow;\n                cursorColumn_1 = model_1.cursorColumn;\n                clear_1 = 'current';\n            }\n            else {\n                r1_1 = row;\n                r2_1 = row;\n                c1_1 = column;\n                c2_1 = column;\n                cursorRow_1 = row;\n                cursorColumn_1 = column;\n                clear_1 = 'all';\n            }\n            // Make the selection.\n            model_1.select({ r1: r1_1, c1: c1_1, r2: r2_1, c2: c2_1, cursorRow: cursorRow_1, cursorColumn: cursorColumn_1, clear: clear_1 });\n            // Done.\n            return;\n        }\n        // Otherwise, the hit test is on a header region.\n        // Convert the hit test into a part.\n        var handle = Private$6.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        var cursor = this.cursorForHandle(handle);\n        // Handle horizontal resize.\n        if (handle === 'left' || handle === 'right') {\n            // Set up the resize data type.\n            var type = 'column-resize';\n            // Determine the column region.\n            var rgn = region === 'column-header' ? 'body' : 'row-header';\n            // Determine the section index.\n            var index = handle === 'left' ? column - 1 : column;\n            // Fetch the section size.\n            var size = grid.columnSize(rgn, index);\n            // Override the document cursor.\n            var override_2 = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type: type, region: rgn, index: index, size: size, clientX: clientX, override: override_2 };\n            // Done.\n            return;\n        }\n        // Handle vertical resize\n        if (handle === 'top' || handle === 'bottom') {\n            // Set up the resize data type.\n            var type = 'row-resize';\n            // Determine the row region.\n            var rgn = region === 'row-header' ? 'body' : 'column-header';\n            // Determine the section index.\n            var index = handle === 'top' ? row - 1 : row;\n            // Fetch the section size.\n            var size = grid.rowSize(rgn, index);\n            // Override the document cursor.\n            var override_3 = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type: type, region: rgn, index: index, size: size, clientY: clientY, override: override_3 };\n            // Done.\n            return;\n        }\n        // Otherwise, the only option is select.\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail if there is no selection model.\n        if (!model) {\n            return;\n        }\n        // Override the document cursor.\n        var override = Drag.overrideCursor('default');\n        // Set up the press data.\n        this._pressData = {\n            type: 'select',\n            region: region,\n            row: row,\n            column: column,\n            override: override,\n            localX: -1,\n            localY: -1,\n            timeout: -1\n        };\n        // Set up the selection variables.\n        var r1;\n        var c1;\n        var r2;\n        var c2;\n        var cursorRow;\n        var cursorColumn;\n        var clear;\n        // Compute the selection based on the pressed region.\n        if (region === 'corner-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'row-header') {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            var selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            var joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = joinedGroup.r1;\n                r2 = joinedGroup.r2;\n            }\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'column-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            var selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            var joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        // Make the selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n    };\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseMove = function (grid, event) {\n        // Fetch the press data.\n        var data = this._pressData;\n        // Bail early if there is no press data.\n        if (!data) {\n            return;\n        }\n        // Handle a row resize.\n        if (data.type === 'row-resize') {\n            var dy = event.clientY - data.clientY;\n            grid.resizeRow(data.region, data.index, data.size + dy);\n            return;\n        }\n        // Handle a column resize.\n        if (data.type === 'column-resize') {\n            var dx = event.clientX - data.clientX;\n            grid.resizeColumn(data.region, data.index, data.size + dx);\n            return;\n        }\n        // Otherwise, it's a select.\n        // Mouse moves during a corner header press are a no-op.\n        if (data.region === 'corner-header') {\n            return;\n        }\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail early if the selection model was removed.\n        if (!model) {\n            return;\n        }\n        // Map to local coordinates.\n        var _a = grid.mapToLocal(event.clientX, event.clientY), lx = _a.lx, ly = _a.ly;\n        // Update the local mouse coordinates in the press data.\n        data.localX = lx;\n        data.localY = ly;\n        // Fetch the grid geometry.\n        var hw = grid.headerWidth;\n        var hh = grid.headerHeight;\n        var vpw = grid.viewportWidth;\n        var vph = grid.viewportHeight;\n        var sx = grid.scrollX;\n        var sy = grid.scrollY;\n        var msx = grid.maxScrollY;\n        var msy = grid.maxScrollY;\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Set up the timeout variable.\n        var timeout = -1;\n        // Compute the timemout based on hit region and mouse position.\n        if (data.region === 'row-header' || mode === 'row') {\n            if (ly < hh && sy > 0) {\n                timeout = Private$6.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$6.computeTimeout(ly - vph);\n            }\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            if (lx < hw && sx > 0) {\n                timeout = Private$6.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$6.computeTimeout(lx - vpw);\n            }\n        }\n        else {\n            if (lx < hw && sx > 0) {\n                timeout = Private$6.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$6.computeTimeout(lx - vpw);\n            }\n            else if (ly < hh && sy > 0) {\n                timeout = Private$6.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$6.computeTimeout(ly - vph);\n            }\n        }\n        // Update or initiate the autoselect if needed.\n        if (timeout >= 0) {\n            if (data.timeout < 0) {\n                data.timeout = timeout;\n                setTimeout(function () {\n                    Private$6.autoselect(grid, data);\n                }, timeout);\n            }\n            else {\n                data.timeout = timeout;\n            }\n            return;\n        }\n        // Otherwise, clear the autoselect timeout.\n        data.timeout = -1;\n        // Map the position to virtual coordinates.\n        var _b = grid.mapToVirtual(event.clientX, event.clientY), vx = _b.vx, vy = _b.vy;\n        // Clamp the coordinates to the limits.\n        vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n        vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n        // Set up the selection variables.\n        var r1;\n        var c1;\n        var r2;\n        var c2;\n        var cursorRow = model.cursorRow;\n        var cursorColumn = model.cursorColumn;\n        var clear = 'current';\n        // Compute the selection based pressed region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r1 = data.row;\n            r2 = grid.rowAt('body', vy);\n            var selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            var joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = Math.min(r1, joinedGroup.r1);\n                r2 = Math.max(r2, joinedGroup.r2);\n            }\n            c1 = 0;\n            c2 = Infinity;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = data.column;\n            c2 = grid.columnAt('body', vx);\n            var selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            var joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n        }\n        else {\n            r1 = cursorRow;\n            r2 = grid.rowAt('body', vy);\n            c1 = cursorColumn;\n            c2 = grid.columnAt('body', vx);\n        }\n        // Make the selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n    };\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseUp = function (grid, event) {\n        this.release();\n    };\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    BasicMouseHandler.prototype.onMouseDoubleClick = function (grid, event) {\n        if (!grid.dataModel) {\n            this.release();\n            return;\n        }\n        // Unpack the event.\n        var clientX = event.clientX, clientY = event.clientY;\n        // Hit test the grid.\n        var hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        var region = hit.region, row = hit.row, column = hit.column;\n        if (region === 'void') {\n            this.release();\n            return;\n        }\n        if (region === 'body') {\n            if (grid.editable) {\n                var cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n            }\n        }\n        this.release();\n    };\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    BasicMouseHandler.prototype.onContextMenu = function (grid, event) {\n        // TODO support user-defined context menus\n    };\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    BasicMouseHandler.prototype.onWheel = function (grid, event) {\n        // Bail if a mouse press is in progress.\n        if (this._pressData) {\n            return;\n        }\n        // Extract the delta X and Y movement.\n        var dx = event.deltaX;\n        var dy = event.deltaY;\n        // Convert the delta values to pixel values.\n        switch (event.deltaMode) {\n            case 0: // DOM_DELTA_PIXEL\n                break;\n            case 1: // DOM_DELTA_LINE\n                var ds = grid.defaultSizes;\n                dx *= ds.columnWidth;\n                dy *= ds.rowHeight;\n                break;\n            case 2: // DOM_DELTA_PAGE\n                dx *= grid.pageWidth;\n                dy *= grid.pageHeight;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Scroll by the desired amount.\n        grid.scrollBy(dx, dy);\n    };\n    /**\n     * Convert a resize handle into a cursor.\n     */\n    BasicMouseHandler.prototype.cursorForHandle = function (handle) {\n        return Private$6.cursorMap[handle];\n    };\n    Object.defineProperty(BasicMouseHandler.prototype, \"pressData\", {\n        /**\n         * Get the current pressData\n         */\n        get: function () {\n            return this._pressData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BasicMouseHandler;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$6;\n(function (Private) {\n    /**\n     * Creates a CellConfig object from a hit region.\n     */\n    function createCellConfigObject(grid, hit) {\n        var region = hit.region, row = hit.row, column = hit.column;\n        // Terminate call if region is void.\n        if (region === 'void') {\n            return undefined;\n        }\n        // Augment hit region params with value and metadata.\n        var value = grid.dataModel.data(region, row, column);\n        var metadata = grid.dataModel.metadata(region, row, column);\n        // Create cell config object to retrieve cell renderer.\n        var config = __assign(__assign({}, hit), { value: value, metadata: metadata });\n        return config;\n    }\n    Private.createCellConfigObject = createCellConfigObject;\n    /**\n     * Get the resize handle for a grid hit test.\n     */\n    function resizeHandleForHitTest(hit) {\n        // Fetch the row and column.\n        var r = hit.row;\n        var c = hit.column;\n        // Fetch the leading and trailing sizes.\n        var lw = hit.x;\n        var lh = hit.y;\n        var tw = hit.width - hit.x;\n        var th = hit.height - hit.y;\n        // Set up the result variable.\n        var result;\n        // Dispatch based on hit test region.\n        switch (hit.region) {\n            case 'corner-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'column-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'row-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'body':\n                result = 'none';\n                break;\n            case 'void':\n                result = 'none';\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Return the result.\n        return result;\n    }\n    Private.resizeHandleForHitTest = resizeHandleForHitTest;\n    /**\n     * A timer callback for the autoselect loop.\n     *\n     * @param grid - The datagrid of interest.\n     *\n     * @param data - The select data of interest.\n     */\n    function autoselect(grid, data) {\n        // Bail early if the timeout has been reset.\n        if (data.timeout < 0) {\n            return;\n        }\n        // Fetch the selection model.\n        var model = grid.selectionModel;\n        // Bail early if the selection model has been removed.\n        if (!model) {\n            return;\n        }\n        // Fetch the current selection.\n        var cs = model.currentSelection();\n        // Bail early if there is no current selection.\n        if (!cs) {\n            return;\n        }\n        // Fetch local X and Y coordinates of the mouse.\n        var lx = data.localX;\n        var ly = data.localY;\n        // Set up the selection variables.\n        var r1 = cs.r1;\n        var c1 = cs.c1;\n        var r2 = cs.r2;\n        var c2 = cs.c2;\n        var cursorRow = model.cursorRow;\n        var cursorColumn = model.cursorColumn;\n        var clear = 'current';\n        // Fetch the grid geometry.\n        var hw = grid.headerWidth;\n        var hh = grid.headerHeight;\n        var vpw = grid.viewportWidth;\n        var vph = grid.viewportHeight;\n        // Fetch the selection mode.\n        var mode = model.selectionMode;\n        // Update the selection based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        else {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        // Update the current selection.\n        model.select({ r1: r1, c1: c1, r2: r2, c2: c2, cursorRow: cursorRow, cursorColumn: cursorColumn, clear: clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else if (data.region === 'column-header' || mode == 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else if (mode === 'cell') {\n            grid.scrollToCell(cs.r2, cs.c2);\n        }\n        // Schedule the next call with the current timeout.\n        setTimeout(function () {\n            autoselect(grid, data);\n        }, data.timeout);\n    }\n    Private.autoselect = autoselect;\n    /**\n     * Compute the scroll timeout for the given delta distance.\n     *\n     * @param delta - The delta pixels from the origin.\n     *\n     * @returns The scaled timeout in milliseconds.\n     */\n    function computeTimeout(delta) {\n        return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n    }\n    Private.computeTimeout = computeTimeout;\n    /**\n     * A mapping of resize handle to cursor.\n     */\n    Private.cursorMap = {\n        top: 'ns-resize',\n        left: 'ew-resize',\n        right: 'ew-resize',\n        bottom: 'ns-resize',\n        hyperlink: 'pointer',\n        none: 'default'\n    };\n})(Private$6 || (Private$6 = {}));\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nvar SelectionModel = /** @class */ (function () {\n    /**\n     * Construct a new selection model.\n     *\n     * @param options - The options for initializing the model.\n     */\n    function SelectionModel(options) {\n        this._changed = new Signal(this);\n        this._selectionMode = 'cell';\n        this.dataModel = options.dataModel;\n        this._selectionMode = options.selectionMode || 'cell';\n        this.dataModel.changed.connect(this.onDataModelChanged, this);\n    }\n    Object.defineProperty(SelectionModel.prototype, \"changed\", {\n        /**\n         * A signal emitted when the selection model has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionModel.prototype, \"selectionMode\", {\n        /**\n         * Get the selection mode for the model.\n         */\n        get: function () {\n            return this._selectionMode;\n        },\n        /**\n         * Set the selection mode for the model.\n         *\n         * #### Notes\n         * This will clear the selection model.\n         */\n        set: function (value) {\n            // Bail early if the mode does not change.\n            if (this._selectionMode === value) {\n                return;\n            }\n            // Update the internal mode.\n            this._selectionMode = value;\n            // Clear the current selections.\n            this.clear();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Test whether any selection intersects a row.\n     *\n     * @param index - The row index of interest.\n     *\n     * @returns Whether any selection intersects the row.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isRowSelected = function (index) {\n        return some(this.selections(), function (s) { return Private$5.containsRow(s, index); });\n    };\n    /**\n     * Test whether any selection intersects a column.\n     *\n     * @param index - The column index of interest.\n     *\n     * @returns Whether any selection intersects the column.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isColumnSelected = function (index) {\n        return some(this.selections(), function (s) { return Private$5.containsColumn(s, index); });\n    };\n    /**\n     * Test whether any selection intersects a cell.\n     *\n     * @param row - The row index of interest.\n     *\n     * @param column - The column index of interest.\n     *\n     * @returns Whether any selection intersects the cell.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    SelectionModel.prototype.isCellSelected = function (row, column) {\n        return some(this.selections(), function (s) { return Private$5.containsCell(s, row, column); });\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     *\n     * #### Notes\n     * Selection model implementations should update their selections\n     * in a manner that is relevant for the changes to the data model.\n     *\n     * The default implementation of this method is a no-op.\n     */\n    SelectionModel.prototype.onDataModelChanged = function (sender, args) {\n        // pass\n    };\n    /**\n     * Emit the `changed` signal for the selection model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the selection model\n     * has changed so that attached data grids can update themselves.\n     */\n    SelectionModel.prototype.emitChanged = function () {\n        this._changed.emit(undefined);\n    };\n    return SelectionModel;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$5;\n(function (Private) {\n    /**\n     * Test whether a selection contains a given row.\n     */\n    function containsRow(selection, row) {\n        var r1 = selection.r1, r2 = selection.r2;\n        return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n    }\n    Private.containsRow = containsRow;\n    /**\n     * Test whether a selection contains a given column.\n     */\n    function containsColumn(selection, column) {\n        var c1 = selection.c1, c2 = selection.c2;\n        return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n    }\n    Private.containsColumn = containsColumn;\n    /**\n     * Test whether a selection contains a given cell.\n     */\n    function containsCell(selection, row, column) {\n        return containsRow(selection, row) && containsColumn(selection, column);\n    }\n    Private.containsCell = containsCell;\n})(Private$5 || (Private$5 = {}));\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nvar BasicSelectionModel = /** @class */ (function (_super) {\n    __extends(BasicSelectionModel, _super);\n    function BasicSelectionModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._cursorRow = -1;\n        _this._cursorColumn = -1;\n        _this._cursorRectIndex = -1;\n        _this._selections = [];\n        return _this;\n    }\n    Object.defineProperty(BasicSelectionModel.prototype, \"isEmpty\", {\n        /**\n         * Whether the selection model is empty.\n         */\n        get: function () {\n            return this._selections.length === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BasicSelectionModel.prototype, \"cursorRow\", {\n        /**\n         * The row index of the cursor.\n         */\n        get: function () {\n            return this._cursorRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BasicSelectionModel.prototype, \"cursorColumn\", {\n        /**\n         * The column index of the cursor.\n         */\n        get: function () {\n            return this._cursorColumn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    BasicSelectionModel.prototype.moveCursorWithinSelections = function (direction) {\n        var _this = this;\n        // Bail early if there are no selections or no existing cursor\n        if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n            return;\n        }\n        // Bail early if only single cell is selected\n        var firstSelection = this._selections[0];\n        if (this._selections.length === 1 &&\n            firstSelection.r1 === firstSelection.r2 &&\n            firstSelection.c1 === firstSelection.c2) {\n            return;\n        }\n        // start from last selection rectangle\n        if (this._cursorRectIndex === -1) {\n            this._cursorRectIndex = this._selections.length - 1;\n        }\n        var cursorRect = this._selections[this._cursorRectIndex];\n        var dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        var dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        var newRow = this._cursorRow + dr;\n        var newColumn = this._cursorColumn + dc;\n        var r1 = Math.min(cursorRect.r1, cursorRect.r2);\n        var r2 = Math.max(cursorRect.r1, cursorRect.r2);\n        var c1 = Math.min(cursorRect.c1, cursorRect.c2);\n        var c2 = Math.max(cursorRect.c1, cursorRect.c2);\n        var moveToNextRect = function () {\n            _this._cursorRectIndex =\n                (_this._cursorRectIndex + 1) % _this._selections.length;\n            cursorRect = _this._selections[_this._cursorRectIndex];\n            newRow = Math.min(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n        };\n        var moveToPreviousRect = function () {\n            _this._cursorRectIndex =\n                _this._cursorRectIndex === 0\n                    ? _this._selections.length - 1\n                    : _this._cursorRectIndex - 1;\n            cursorRect = _this._selections[_this._cursorRectIndex];\n            newRow = Math.max(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n        };\n        if (newRow > r2) {\n            newRow = r1;\n            newColumn += 1;\n            if (newColumn > c2) {\n                moveToNextRect();\n            }\n        }\n        else if (newRow < r1) {\n            newRow = r2;\n            newColumn -= 1;\n            if (newColumn < c1) {\n                moveToPreviousRect();\n            }\n        }\n        else if (newColumn > c2) {\n            newColumn = c1;\n            newRow += 1;\n            if (newRow > r2) {\n                moveToNextRect();\n            }\n        }\n        else if (newColumn < c1) {\n            newColumn = c2;\n            newRow -= 1;\n            if (newRow < r1) {\n                moveToPreviousRect();\n            }\n        }\n        this._cursorRow = newRow;\n        this._cursorColumn = newColumn;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * Get the current selection in the selection model.\n     *\n     * @returns The current selection or `null`.\n     *\n     * #### Notes\n     * This is the selection which holds the cursor.\n     */\n    BasicSelectionModel.prototype.currentSelection = function () {\n        return this._selections[this._selections.length - 1] || null;\n    };\n    /**\n     * Get an iterator of the selections in the model.\n     *\n     * @returns A new iterator of the current selections.\n     *\n     * #### Notes\n     * The data grid will render the selections in order.\n     */\n    BasicSelectionModel.prototype.selections = function () {\n        return iter(this._selections);\n    };\n    /**\n     * Select the specified cells.\n     *\n     * @param args - The arguments for the selection.\n     */\n    BasicSelectionModel.prototype.select = function (args) {\n        // Fetch the current row and column counts;\n        var rowCount = this.dataModel.rowCount('body');\n        var columnCount = this.dataModel.columnCount('body');\n        // Bail early if there is no content.\n        if (rowCount <= 0 || columnCount <= 0) {\n            return;\n        }\n        // Unpack the arguments.\n        var r1 = args.r1, c1 = args.c1, r2 = args.r2, c2 = args.c2, cursorRow = args.cursorRow, cursorColumn = args.cursorColumn, clear = args.clear;\n        // Clear the necessary selections.\n        if (clear === 'all') {\n            this._selections.length = 0;\n        }\n        else if (clear === 'current') {\n            this._selections.pop();\n        }\n        // Clamp to the data model bounds.\n        r1 = Math.max(0, Math.min(r1, rowCount - 1));\n        r2 = Math.max(0, Math.min(r2, rowCount - 1));\n        c1 = Math.max(0, Math.min(c1, columnCount - 1));\n        c2 = Math.max(0, Math.min(c2, columnCount - 1));\n        // Indicate if a row/column has already been selected.\n        var alreadySelected = false;\n        // Handle the selection mode.\n        if (this.selectionMode === 'row') {\n            c1 = 0;\n            c2 = columnCount - 1;\n            alreadySelected =\n                this._selections.filter(function (selection) { return selection.r1 === r1; }).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(function (selection) { return selection.r1 !== r1; })\n                : this._selections;\n        }\n        else if (this.selectionMode === 'column') {\n            r1 = 0;\n            r2 = rowCount - 1;\n            alreadySelected =\n                this._selections.filter(function (selection) { return selection.c1 === c1; }).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(function (selection) { return selection.c1 !== c1; })\n                : this._selections;\n        }\n        // Alias the cursor row and column.\n        var cr = cursorRow;\n        var cc = cursorColumn;\n        // Compute the new cursor location.\n        if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n            cr = r1;\n        }\n        if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n            cc = c1;\n        }\n        // Update the cursor.\n        this._cursorRow = cr;\n        this._cursorColumn = cc;\n        this._cursorRectIndex = this._selections.length;\n        // Add the new selection if it wasn't already selected.\n        if (!alreadySelected) {\n            this._selections.push({ r1: r1, c1: c1, r2: r2, c2: c2 });\n        }\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * Clear all selections in the selection model.\n     */\n    BasicSelectionModel.prototype.clear = function () {\n        // Bail early if there are no selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Reset the internal state.\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections.length = 0;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     */\n    BasicSelectionModel.prototype.onDataModelChanged = function (sender, args) {\n        // Bail early if the model has no current selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Bail early if the cells have changed in place.\n        if (args.type === 'cells-changed') {\n            return;\n        }\n        // Bail early if there is no change to the row or column count.\n        if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n            return;\n        }\n        // Fetch the last row and column index.\n        var lr = sender.rowCount('body') - 1;\n        var lc = sender.columnCount('body') - 1;\n        // Bail early if the data model is empty.\n        if (lr < 0 || lc < 0) {\n            this._selections.length = 0;\n            this.emitChanged();\n            return;\n        }\n        // Fetch the selection mode.\n        var mode = this.selectionMode;\n        // Set up the assignment index variable.\n        var j = 0;\n        // Iterate over the current selections.\n        for (var i = 0, n = this._selections.length; i < n; ++i) {\n            // Unpack the selection.\n            var _a = this._selections[i], r1 = _a.r1, c1 = _a.c1, r2 = _a.r2, c2 = _a.c2;\n            // Skip the selection if it will disappear.\n            if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n                continue;\n            }\n            // Modify the bounds based on the selection mode.\n            if (mode === 'row') {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = 0;\n                c2 = lc;\n            }\n            else if (mode === 'column') {\n                r1 = 0;\n                r2 = lr;\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            else {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            // Assign the modified selection to the array.\n            this._selections[j++] = { r1: r1, c1: c1, r2: r2, c2: c2 };\n        }\n        // Remove the stale selections.\n        this._selections.length = j;\n        // Emit the changed signal.\n        this.emitChanged();\n    };\n    return BasicSelectionModel;\n}(SelectionModel));\n\n// Copyright (c) Jupyter Development Team.\n/**\n * A widget which implements a notification popup.\n */\nvar Notification = /** @class */ (function (_super) {\n    __extends(Notification, _super);\n    /**\n     * Construct a new notification.\n     *\n     * @param options - The options for initializing the notification.\n     */\n    function Notification(options) {\n        var _this = _super.call(this, { node: Private$4.createNode() }) || this;\n        _this._message = '';\n        _this.addClass('lm-DataGrid-notification');\n        _this.setFlag(Widget.Flag.DisallowLayout);\n        _this._target = options.target;\n        _this._message = options.message || '';\n        _this._placement = options.placement || 'bottom';\n        Widget.attach(_this, document.body);\n        if (options.timeout && options.timeout > 0) {\n            setTimeout(function () {\n                _this.close();\n            }, options.timeout);\n        }\n        return _this;\n    }\n    /**\n     * Handle the DOM events for the notification.\n     *\n     * @param event - The DOM event sent to the notification.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notification's DOM node.\n     *\n     * This should not be called directly by user code.\n     */\n    Notification.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'contextmenu':\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    };\n    Object.defineProperty(Notification.prototype, \"placement\", {\n        /**\n         * Get the placement of the notification.\n         */\n        get: function () {\n            return this._placement;\n        },\n        /**\n         * Set the placement of the notification.\n         */\n        set: function (value) {\n            // Do nothing if the placement does not change.\n            if (this._placement === value) {\n                return;\n            }\n            // Update the internal placement.\n            this._placement = value;\n            // Schedule an update for notification.\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Notification.prototype, \"message\", {\n        /**\n         * Get the current value of the message.\n         */\n        get: function () {\n            return this._message;\n        },\n        /**\n         * Set the current value of the message.\n         *\n         */\n        set: function (value) {\n            // Do nothing if the value does not change.\n            if (this._message === value) {\n                return;\n            }\n            // Update the internal value.\n            this._message = value;\n            // Schedule an update for notification.\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Notification.prototype, \"messageNode\", {\n        /**\n         * Get the node presenting the message.\n         */\n        get: function () {\n            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * A method invoked on a 'before-attach' message.\n     */\n    Notification.prototype.onBeforeAttach = function (msg) {\n        this.node.addEventListener('mousedown', this);\n        this.update();\n    };\n    /**\n     * A method invoked on an 'after-detach' message.\n     */\n    Notification.prototype.onAfterDetach = function (msg) {\n        this.node.removeEventListener('mousedown', this);\n    };\n    /**\n     * A method invoked on an 'update-request' message.\n     */\n    Notification.prototype.onUpdateRequest = function (msg) {\n        var targetRect = this._target.getBoundingClientRect();\n        var style = this.node.style;\n        switch (this._placement) {\n            case 'bottom':\n                style.left = targetRect.left + 'px';\n                style.top = targetRect.bottom + 'px';\n                break;\n            case 'top':\n                style.left = targetRect.left + 'px';\n                style.height = targetRect.top + 'px';\n                style.top = '0';\n                style.alignItems = 'flex-end';\n                style.justifyContent = 'flex-end';\n                break;\n            case 'left':\n                style.left = '0';\n                style.width = targetRect.left + 'px';\n                style.top = targetRect.top + 'px';\n                style.alignItems = 'flex-end';\n                style.justifyContent = 'flex-end';\n                break;\n            case 'right':\n                style.left = targetRect.right + 'px';\n                style.top = targetRect.top + 'px';\n                break;\n        }\n        this.messageNode.innerHTML = this._message;\n    };\n    /**\n     * Handle the `'mousedown'` event for the notification.\n     */\n    Notification.prototype._evtMouseDown = function (event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    };\n    return Notification;\n}(Widget));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$4;\n(function (Private) {\n    /**\n     * Create the DOM node for notification.\n     */\n    function createNode() {\n        var node = document.createElement('div');\n        var container = document.createElement('div');\n        container.className = 'lm-DataGrid-notificationContainer';\n        var message = document.createElement('span');\n        message.className = 'lm-DataGrid-notificationMessage';\n        container.appendChild(message);\n        node.appendChild(container);\n        return node;\n    }\n    Private.createNode = createNode;\n})(Private$4 || (Private$4 = {}));\n\n// default validation error message\nvar DEFAULT_INVALID_INPUT_MESSAGE = 'Invalid input!';\n/**\n * A cell input validator object which always returns valid.\n */\nvar PassInputValidator = /** @class */ (function () {\n    function PassInputValidator() {\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    PassInputValidator.prototype.validate = function (cell, value) {\n        return { valid: true };\n    };\n    return PassInputValidator;\n}());\n/**\n * Text cell input validator.\n */\nvar TextInputValidator = /** @class */ (function () {\n    function TextInputValidator() {\n        /**\n         * Minimum text length\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.minLength = Number.NaN;\n        /**\n         * Maximum text length\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.maxLength = Number.NaN;\n        /**\n         * Required text pattern as regular expression\n         *\n         * The default is null, meaning no pattern constraint\n         */\n        this.pattern = null;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    TextInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (typeof value !== 'string') {\n            return {\n                valid: false,\n                message: 'Input must be valid text'\n            };\n        }\n        if (!isNaN(this.minLength) && value.length < this.minLength) {\n            return {\n                valid: false,\n                message: \"Text length must be greater than \" + this.minLength\n            };\n        }\n        if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n            return {\n                valid: false,\n                message: \"Text length must be less than \" + this.maxLength\n            };\n        }\n        if (this.pattern && !this.pattern.test(value)) {\n            return {\n                valid: false,\n                message: \"Text doesn't match the required pattern\"\n            };\n        }\n        return { valid: true };\n    };\n    return TextInputValidator;\n}());\n/**\n * Integer cell input validator.\n */\nvar IntegerInputValidator = /** @class */ (function () {\n    function IntegerInputValidator() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    IntegerInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value) || value % 1 !== 0) {\n            return {\n                valid: false,\n                message: 'Input must be valid integer'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: \"Input must be greater than \" + this.min\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: \"Input must be less than \" + this.max\n            };\n        }\n        return { valid: true };\n    };\n    return IntegerInputValidator;\n}());\n/**\n * Real number cell input validator.\n */\nvar NumberInputValidator = /** @class */ (function () {\n    function NumberInputValidator() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    NumberInputValidator.prototype.validate = function (cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value)) {\n            return {\n                valid: false,\n                message: 'Input must be valid number'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: \"Input must be greater than \" + this.min\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: \"Input must be less than \" + this.max\n            };\n        }\n        return { valid: true };\n    };\n    return NumberInputValidator;\n}());\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nvar CellEditor = /** @class */ (function () {\n    /**\n     * Construct a new cell editor.\n     */\n    function CellEditor() {\n        var _this = this;\n        /**\n         * A signal emitted when input changes.\n         */\n        this.inputChanged = new Signal(this);\n        /**\n         * Notification popup used to show validation error messages.\n         */\n        this.validityNotification = null;\n        /**\n         * Whether the cell editor is disposed.\n         */\n        this._disposed = false;\n        /**\n         * Whether the value input is valid.\n         */\n        this._validInput = true;\n        /**\n         * Grid wheel event handler.\n         */\n        this._gridWheelEventHandler = null;\n        this.inputChanged.connect(function () {\n            _this.validate();\n        });\n    }\n    Object.defineProperty(CellEditor.prototype, \"isDisposed\", {\n        /**\n         * Whether the cell editor is disposed.\n         */\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    CellEditor.prototype.dispose = function () {\n        if (this._disposed) {\n            return;\n        }\n        if (this._gridWheelEventHandler) {\n            this.cell.grid.node.removeEventListener('wheel', this._gridWheelEventHandler);\n            this._gridWheelEventHandler = null;\n        }\n        this._closeValidityNotification();\n        this._disposed = true;\n        this.cell.grid.node.removeChild(this.viewportOccluder);\n    };\n    /**\n     * Start editing the cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    CellEditor.prototype.edit = function (cell, options) {\n        var _this = this;\n        this.cell = cell;\n        this.onCommit = options && options.onCommit;\n        this.onCancel = options && options.onCancel;\n        this.validator =\n            options && options.validator\n                ? options.validator\n                : this.createValidatorBasedOnType();\n        this._gridWheelEventHandler = function () {\n            _this._closeValidityNotification();\n            _this.updatePosition();\n        };\n        cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n        this._addContainer();\n        this.updatePosition();\n        this.startEditing();\n    };\n    /**\n     * Cancel editing the cell.\n     */\n    CellEditor.prototype.cancel = function () {\n        if (this._disposed) {\n            return;\n        }\n        this.dispose();\n        if (this.onCancel) {\n            this.onCancel();\n        }\n    };\n    Object.defineProperty(CellEditor.prototype, \"validInput\", {\n        /**\n         * Whether the value input is valid.\n         */\n        get: function () {\n            return this._validInput;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Validate the cell input. Shows validation error notification when input is invalid.\n     */\n    CellEditor.prototype.validate = function () {\n        var value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(\"Input error: \" + error.message);\n            this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            return;\n        }\n        if (this.validator) {\n            var result = this.validator.validate(this.cell, value);\n            if (result.valid) {\n                this.setValidity(true);\n            }\n            else {\n                this.setValidity(false, result.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            }\n        }\n        else {\n            this.setValidity(true);\n        }\n    };\n    /**\n     * Set validity flag.\n     *\n     * @param valid - Whether the input is valid.\n     *\n     * @param message - Notification message to show.\n     *\n     * If message is set to empty string (which is the default)\n     * existing notification popup is removed if any.\n     */\n    CellEditor.prototype.setValidity = function (valid, message) {\n        if (message === void 0) { message = ''; }\n        this._validInput = valid;\n        this._closeValidityNotification();\n        if (valid) {\n            this.editorContainer.classList.remove('lm-mod-invalid');\n        }\n        else {\n            this.editorContainer.classList.add('lm-mod-invalid');\n            // show a notification popup\n            if (message !== '') {\n                this.validityNotification = new Notification({\n                    target: this.editorContainer,\n                    message: message,\n                    placement: 'bottom',\n                    timeout: 5000\n                });\n                this.validityNotification.show();\n            }\n        }\n    };\n    /**\n     * Create and return a cell input validator based on configuration of the\n     * cell being edited. If no suitable validator can be found, it returns undefined.\n     */\n    CellEditor.prototype.createValidatorBasedOnType = function () {\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        switch (metadata && metadata.type) {\n            case 'string':\n                {\n                    var validator = new TextInputValidator();\n                    if (typeof metadata.format === 'string') {\n                        var format = metadata.format;\n                        switch (format) {\n                            case 'email':\n                                validator.pattern = new RegExp('^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$');\n                                break;\n                            case 'uuid':\n                                validator.pattern = new RegExp('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}');\n                                break;\n                        }\n                    }\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minLength !== undefined) {\n                            validator.minLength = metadata.constraint.minLength;\n                        }\n                        if (metadata.constraint.maxLength !== undefined) {\n                            validator.maxLength = metadata.constraint.maxLength;\n                        }\n                        if (typeof metadata.constraint.pattern === 'string') {\n                            validator.pattern = new RegExp(metadata.constraint.pattern);\n                        }\n                    }\n                    return validator;\n                }\n            case 'number':\n                {\n                    var validator = new NumberInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n            case 'integer':\n                {\n                    var validator = new IntegerInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n        }\n        return undefined;\n    };\n    /**\n     * Compute cell rectangle and return with other cell properties.\n     */\n    CellEditor.prototype.getCellInfo = function (cell) {\n        var grid = cell.grid, row = cell.row, column = cell.column;\n        var data, columnX, rowY, width, height;\n        var cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            columnX =\n                grid.headerWidth -\n                    grid.scrollX +\n                    grid.columnOffset('body', cellGroup.c1);\n            rowY =\n                grid.headerHeight - grid.scrollY + grid.rowOffset('body', cellGroup.r1);\n            width = 0;\n            height = 0;\n            for (var r = cellGroup.r1; r <= cellGroup.r2; r++) {\n                height += grid.rowSize('body', r);\n            }\n            for (var c = cellGroup.c1; c <= cellGroup.c2; c++) {\n                width += grid.columnSize('body', c);\n            }\n            data = grid.dataModel.data('body', cellGroup.r1, cellGroup.c1);\n        }\n        else {\n            columnX =\n                grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n            rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n            width = grid.columnSize('body', column);\n            height = grid.rowSize('body', row);\n            data = grid.dataModel.data('body', row, column);\n        }\n        return {\n            grid: grid,\n            row: row,\n            column: column,\n            data: data,\n            x: columnX,\n            y: rowY,\n            width: width,\n            height: height\n        };\n    };\n    /**\n     * Reposition cell editor by moving viewport occluder and cell editor container.\n     */\n    CellEditor.prototype.updatePosition = function () {\n        var grid = this.cell.grid;\n        var cellInfo = this.getCellInfo(this.cell);\n        var headerHeight = grid.headerHeight;\n        var headerWidth = grid.headerWidth;\n        this.viewportOccluder.style.top = headerHeight + 'px';\n        this.viewportOccluder.style.left = headerWidth + 'px';\n        this.viewportOccluder.style.width = grid.viewportWidth - headerWidth + 'px';\n        this.viewportOccluder.style.height =\n            grid.viewportHeight - headerHeight + 'px';\n        this.viewportOccluder.style.position = 'absolute';\n        this.editorContainer.style.left = cellInfo.x - 1 - headerWidth + 'px';\n        this.editorContainer.style.top = cellInfo.y - 1 - headerHeight + 'px';\n        this.editorContainer.style.width = cellInfo.width + 1 + 'px';\n        this.editorContainer.style.height = cellInfo.height + 1 + 'px';\n        this.editorContainer.style.visibility = 'visible';\n        this.editorContainer.style.position = 'absolute';\n    };\n    /**\n     * Commit the edited value.\n     *\n     * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n     *\n     * @returns true on valid input, false otherwise.\n     */\n    CellEditor.prototype.commit = function (cursorMovement) {\n        if (cursorMovement === void 0) { cursorMovement = 'none'; }\n        this.validate();\n        if (!this._validInput) {\n            return false;\n        }\n        var value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(\"Input error: \" + error.message);\n            return false;\n        }\n        this.dispose();\n        if (this.onCommit) {\n            this.onCommit({\n                cell: this.cell,\n                value: value,\n                cursorMovement: cursorMovement\n            });\n        }\n        return true;\n    };\n    /**\n     * Create container elements needed to prevent editor widget overflow\n     * beyond viewport and to position cell editor widget.\n     */\n    CellEditor.prototype._addContainer = function () {\n        var _this = this;\n        this.viewportOccluder = document.createElement('div');\n        this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n        this.cell.grid.node.appendChild(this.viewportOccluder);\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n        this.viewportOccluder.appendChild(this.editorContainer);\n        // update mouse event pass-through state based on input validity\n        this.editorContainer.addEventListener('mouseleave', function (event) {\n            _this.viewportOccluder.style.pointerEvents = _this._validInput\n                ? 'none'\n                : 'auto';\n        });\n        this.editorContainer.addEventListener('mouseenter', function (event) {\n            _this.viewportOccluder.style.pointerEvents = 'none';\n        });\n    };\n    /**\n     * Remove validity notification popup.\n     */\n    CellEditor.prototype._closeValidityNotification = function () {\n        if (this.validityNotification) {\n            this.validityNotification.close();\n            this.validityNotification = null;\n        }\n    };\n    return CellEditor;\n}());\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nvar InputCellEditor = /** @class */ (function (_super) {\n    __extends(InputCellEditor, _super);\n    function InputCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    InputCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n            case 'input':\n                this._onInput(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    InputCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    InputCellEditor.prototype.startEditing = function () {\n        this.createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this.input.value = this.deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this.input);\n        this.input.focus();\n        this.input.select();\n        this.bindEvents();\n    };\n    InputCellEditor.prototype.deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    InputCellEditor.prototype.createWidget = function () {\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        input.spellcheck = false;\n        input.type = this.inputType;\n        this.input = input;\n    };\n    InputCellEditor.prototype.bindEvents = function () {\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('blur', this);\n        this.input.addEventListener('input', this);\n    };\n    InputCellEditor.prototype._unbindEvents = function () {\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('blur', this);\n        this.input.removeEventListener('input', this);\n    };\n    InputCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    InputCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.input.focus();\n        }\n    };\n    InputCellEditor.prototype._onInput = function (event) {\n        this.inputChanged.emit(void 0);\n    };\n    return InputCellEditor;\n}(CellEditor));\n/**\n * Cell editor for text cells.\n */\nvar TextCellEditor = /** @class */ (function (_super) {\n    __extends(TextCellEditor, _super);\n    function TextCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'text';\n        return _this;\n    }\n    /**\n     * Return the current text input entered.\n     */\n    TextCellEditor.prototype.getInput = function () {\n        return this.input.value;\n    };\n    return TextCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for real number cells.\n */\nvar NumberCellEditor = /** @class */ (function (_super) {\n    __extends(NumberCellEditor, _super);\n    function NumberCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'number';\n        return _this;\n    }\n    /**\n     * Start editing the cell.\n     */\n    NumberCellEditor.prototype.startEditing = function () {\n        _super.prototype.startEditing.call(this);\n        this.input.step = 'any';\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    };\n    /**\n     * Return the current number input entered. This method throws exception\n     * if input is invalid.\n     */\n    NumberCellEditor.prototype.getInput = function () {\n        var value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        var floatValue = parseFloat(value);\n        if (isNaN(floatValue)) {\n            throw new Error('Invalid input');\n        }\n        return floatValue;\n    };\n    return NumberCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for integer cells.\n */\nvar IntegerCellEditor = /** @class */ (function (_super) {\n    __extends(IntegerCellEditor, _super);\n    function IntegerCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputType = 'number';\n        return _this;\n    }\n    /**\n     * Start editing the cell.\n     */\n    IntegerCellEditor.prototype.startEditing = function () {\n        _super.prototype.startEditing.call(this);\n        this.input.step = '1';\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    };\n    /**\n     * Return the current integer input entered. This method throws exception\n     * if input is invalid.\n     */\n    IntegerCellEditor.prototype.getInput = function () {\n        var value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        var intValue = parseInt(value);\n        if (isNaN(intValue)) {\n            throw new Error('Invalid input');\n        }\n        return intValue;\n    };\n    return IntegerCellEditor;\n}(InputCellEditor));\n/**\n * Cell editor for date cells.\n */\nvar DateCellEditor = /** @class */ (function (_super) {\n    __extends(DateCellEditor, _super);\n    function DateCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    DateCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    DateCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    DateCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    };\n    /**\n     * Return the current date input entered.\n     */\n    DateCellEditor.prototype.getInput = function () {\n        return this._input.value;\n    };\n    DateCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    DateCellEditor.prototype._createWidget = function () {\n        var input = document.createElement('input');\n        input.type = 'date';\n        input.pattern = 'd{4}-d{2}-d{2}';\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        this._input = input;\n    };\n    DateCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    };\n    DateCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    DateCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    DateCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return DateCellEditor;\n}(CellEditor));\n/**\n * Cell editor for boolean cells.\n */\nvar BooleanCellEditor = /** @class */ (function (_super) {\n    __extends(BooleanCellEditor, _super);\n    function BooleanCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    BooleanCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'mousedown':\n                // fix focus loss problem in Safari and Firefox\n                this._input.focus();\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    BooleanCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    BooleanCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.checked = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    };\n    /**\n     * Return the current boolean input entered.\n     */\n    BooleanCellEditor.prototype.getInput = function () {\n        return this._input.checked;\n    };\n    BooleanCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return value == true;\n    };\n    BooleanCellEditor.prototype._createWidget = function () {\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorCheckbox');\n        input.type = 'checkbox';\n        input.spellcheck = false;\n        this._input = input;\n    };\n    BooleanCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('mousedown', this);\n        this._input.addEventListener('blur', this);\n    };\n    BooleanCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('mousedown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    BooleanCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    BooleanCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return BooleanCellEditor;\n}(CellEditor));\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nvar OptionCellEditor = /** @class */ (function (_super) {\n    __extends(OptionCellEditor, _super);\n    function OptionCellEditor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._isMultiSelect = false;\n        return _this;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    OptionCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        _super.prototype.dispose.call(this);\n        if (this._isMultiSelect) {\n            document.body.removeChild(this._select);\n        }\n    };\n    /**\n     * Start editing the cell.\n     */\n    OptionCellEditor.prototype.startEditing = function () {\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        this._isMultiSelect = metadata.type === 'array';\n        this._createWidget();\n        if (this._isMultiSelect) {\n            this._select.multiple = true;\n            var values = this._deserialize(cellInfo.data);\n            for (var i = 0; i < this._select.options.length; ++i) {\n                var option = this._select.options.item(i);\n                option.selected = values.indexOf(option.value) !== -1;\n            }\n            document.body.appendChild(this._select);\n        }\n        else {\n            this._select.value = this._deserialize(cellInfo.data);\n            this.editorContainer.appendChild(this._select);\n        }\n        this._select.focus();\n        this._bindEvents();\n        this.updatePosition();\n    };\n    /**\n     * Return the current option input.\n     */\n    OptionCellEditor.prototype.getInput = function () {\n        if (this._isMultiSelect) {\n            var input = [];\n            for (var i = 0; i < this._select.selectedOptions.length; ++i) {\n                input.push(this._select.selectedOptions.item(i).value);\n            }\n            return input;\n        }\n        else {\n            return this._select.value;\n        }\n    };\n    /**\n     * Reposition cell editor.\n     */\n    OptionCellEditor.prototype.updatePosition = function () {\n        _super.prototype.updatePosition.call(this);\n        if (!this._isMultiSelect) {\n            return;\n        }\n        var cellInfo = this.getCellInfo(this.cell);\n        this._select.style.position = 'absolute';\n        var editorContainerRect = this.editorContainer.getBoundingClientRect();\n        this._select.style.left = editorContainerRect.left + 'px';\n        this._select.style.top = editorContainerRect.top + cellInfo.height + 'px';\n        this._select.style.width = editorContainerRect.width + 'px';\n        this._select.style.maxHeight = '60px';\n        this.editorContainer.style.visibility = 'hidden';\n    };\n    OptionCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        if (this._isMultiSelect) {\n            var values = [];\n            if (Array.isArray(value)) {\n                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                    var item = value_1[_i];\n                    values.push(item.toString());\n                }\n            }\n            return values;\n        }\n        else {\n            return value.toString();\n        }\n    };\n    OptionCellEditor.prototype._createWidget = function () {\n        var cell = this.cell;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        var items = metadata.constraint.enum;\n        var select = document.createElement('select');\n        select.classList.add('lm-DataGrid-cellEditorWidget');\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var option = document.createElement('option');\n            option.value = item;\n            option.text = item;\n            select.appendChild(option);\n        }\n        this._select = select;\n    };\n    OptionCellEditor.prototype._bindEvents = function () {\n        this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n        this._select.addEventListener('blur', this._onBlur.bind(this));\n    };\n    OptionCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    OptionCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._select.focus();\n        }\n    };\n    return OptionCellEditor;\n}(CellEditor));\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nvar DynamicOptionCellEditor = /** @class */ (function (_super) {\n    __extends(DynamicOptionCellEditor, _super);\n    function DynamicOptionCellEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    DynamicOptionCellEditor.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    };\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    DynamicOptionCellEditor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Start editing the cell.\n     */\n    DynamicOptionCellEditor.prototype.startEditing = function () {\n        this._createWidget();\n        var cell = this.cell;\n        var cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._input.select();\n        this._bindEvents();\n    };\n    /**\n     * Return the current option input.\n     */\n    DynamicOptionCellEditor.prototype.getInput = function () {\n        return this._input.value;\n    };\n    DynamicOptionCellEditor.prototype._deserialize = function (value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    };\n    DynamicOptionCellEditor.prototype._createWidget = function () {\n        var cell = this.cell;\n        var grid = cell.grid;\n        var dataModel = grid.dataModel;\n        var rowCount = dataModel.rowCount('body');\n        var listId = 'cell-editor-list';\n        var list = document.createElement('datalist');\n        list.id = listId;\n        var input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        var valueSet = new Set();\n        for (var r = 0; r < rowCount; ++r) {\n            var data = dataModel.data('body', r, cell.column);\n            if (data) {\n                valueSet.add(data);\n            }\n        }\n        valueSet.forEach(function (value) {\n            var option = document.createElement('option');\n            option.value = value;\n            option.text = value;\n            list.appendChild(option);\n        });\n        this.editorContainer.appendChild(list);\n        input.setAttribute('list', listId);\n        this._input = input;\n    };\n    DynamicOptionCellEditor.prototype._bindEvents = function () {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    };\n    DynamicOptionCellEditor.prototype._unbindEvents = function () {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    };\n    DynamicOptionCellEditor.prototype._onKeyDown = function (event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    };\n    DynamicOptionCellEditor.prototype._onBlur = function (event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    };\n    return DynamicOptionCellEditor;\n}(CellEditor));\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nfunction resolveOption(option, config) {\n    return typeof option === 'function'\n        ? option(config)\n        : option;\n}\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nvar CellEditorController = /** @class */ (function () {\n    function CellEditorController() {\n        // active cell editor\n        this._editor = null;\n        // active cell being edited\n        this._cell = null;\n        // cell editor overrides based on cell data type identifier\n        this._typeBasedOverrides = new Map();\n        // cell editor overrides based on partial metadata match\n        this._metadataBasedOverrides = new Map();\n    }\n    /**\n     * Override cell editor for the cells matching the identifier.\n     *\n     * @param identifier - Cell identifier to use when matching cells.\n     * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n     * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n     * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n     *\n     * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n     */\n    CellEditorController.prototype.setEditor = function (identifier, editor) {\n        if (typeof identifier === 'string') {\n            this._typeBasedOverrides.set(identifier, editor);\n        }\n        else {\n            var key = this._metadataIdentifierToKey(identifier);\n            this._metadataBasedOverrides.set(key, [identifier, editor]);\n        }\n    };\n    /**\n     * Start editing a cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    CellEditorController.prototype.edit = function (cell, options) {\n        var grid = cell.grid;\n        if (!grid.editable) {\n            console.error('Grid cannot be edited!');\n            return false;\n        }\n        this.cancel();\n        this._cell = cell;\n        options = options || {};\n        options.onCommit = options.onCommit || this._onCommit.bind(this);\n        options.onCancel = options.onCancel || this._onCancel.bind(this);\n        // if an editor is passed in with options, then use it for editing\n        if (options.editor) {\n            this._editor = options.editor;\n            options.editor.edit(cell, options);\n            return true;\n        }\n        // choose an editor based on overrides / cell data type\n        var editor = this._getEditor(cell);\n        if (editor) {\n            this._editor = editor;\n            editor.edit(cell, options);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Cancel editing.\n     */\n    CellEditorController.prototype.cancel = function () {\n        if (this._editor) {\n            this._editor.cancel();\n            this._editor = null;\n        }\n        this._cell = null;\n    };\n    CellEditorController.prototype._onCommit = function (response) {\n        var cell = this._cell;\n        if (!cell) {\n            return;\n        }\n        var grid = cell.grid;\n        var dataModel = grid.dataModel;\n        var row = cell.row;\n        var column = cell.column;\n        var cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            row = cellGroup.r1;\n            column = cellGroup.c1;\n        }\n        dataModel.setData('body', row, column, response.value);\n        grid.viewport.node.focus();\n        if (response.cursorMovement !== 'none') {\n            grid.moveCursor(response.cursorMovement);\n            grid.scrollToCursor();\n        }\n    };\n    CellEditorController.prototype._onCancel = function () {\n        if (!this._cell) {\n            return;\n        }\n        this._cell.grid.viewport.node.focus();\n    };\n    CellEditorController.prototype._getDataTypeKey = function (cell) {\n        var metadata = cell.grid.dataModel\n            ? cell.grid.dataModel.metadata('body', cell.row, cell.column)\n            : null;\n        if (!metadata) {\n            return 'default';\n        }\n        var key = '';\n        if (metadata) {\n            key = metadata.type;\n        }\n        if (metadata.constraint && metadata.constraint.enum) {\n            if (metadata.constraint.enum === 'dynamic') {\n                key += ':dynamic-option';\n            }\n            else {\n                key += ':option';\n            }\n        }\n        return key;\n    };\n    CellEditorController.prototype._objectToKey = function (object) {\n        var str = '';\n        for (var key in object) {\n            var value = object[key];\n            if (typeof value === 'object') {\n                str += key + \":\" + this._objectToKey(value);\n            }\n            else {\n                str += \"[\" + key + \":\" + value + \"]\";\n            }\n        }\n        return str;\n    };\n    CellEditorController.prototype._metadataIdentifierToKey = function (metadata) {\n        return this._objectToKey(metadata);\n    };\n    CellEditorController.prototype._metadataMatchesIdentifier = function (metadata, identifier) {\n        for (var key in identifier) {\n            if (!metadata.hasOwnProperty(key)) {\n                return false;\n            }\n            var identifierValue = identifier[key];\n            var metadataValue = metadata[key];\n            if (typeof identifierValue === 'object') {\n                if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n                    return false;\n                }\n            }\n            else if (metadataValue !== identifierValue) {\n                return false;\n            }\n        }\n        return true;\n    };\n    CellEditorController.prototype._getMetadataBasedEditor = function (cell) {\n        var _this = this;\n        var editorMatched;\n        var metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        if (metadata) {\n            this._metadataBasedOverrides.forEach(function (value) {\n                if (!editorMatched) {\n                    var identifier = value[0], editor = value[1];\n                    if (_this._metadataMatchesIdentifier(metadata, identifier)) {\n                        editorMatched = resolveOption(editor, cell);\n                    }\n                }\n            });\n        }\n        return editorMatched;\n    };\n    /**\n     * Choose the most appropriate cell editor to use based on overrides / cell data type.\n     *\n     * If no match is found in overrides or based on cell data type, and if cell has a primitive\n     * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n     * is overridden, then it is used instead of TextCellEditor for default.\n     */\n    CellEditorController.prototype._getEditor = function (cell) {\n        var dtKey = this._getDataTypeKey(cell);\n        // find an editor based on data type based override\n        if (this._typeBasedOverrides.has(dtKey)) {\n            var editor = this._typeBasedOverrides.get(dtKey);\n            return resolveOption(editor, cell);\n        } // find an editor based on metadata match based override\n        else if (this._metadataBasedOverrides.size > 0) {\n            var editor = this._getMetadataBasedEditor(cell);\n            if (editor) {\n                return editor;\n            }\n        }\n        // choose an editor based on data type\n        switch (dtKey) {\n            case 'string':\n                return new TextCellEditor();\n            case 'number':\n                return new NumberCellEditor();\n            case 'integer':\n                return new IntegerCellEditor();\n            case 'boolean':\n                return new BooleanCellEditor();\n            case 'date':\n                return new DateCellEditor();\n            case 'string:option':\n            case 'number:option':\n            case 'integer:option':\n            case 'date:option':\n            case 'array:option':\n                return new OptionCellEditor();\n            case 'string:dynamic-option':\n            case 'number:dynamic-option':\n            case 'integer:dynamic-option':\n            case 'date:dynamic-option':\n                return new DynamicOptionCellEditor();\n        }\n        // if an override exists for 'default', then use it\n        if (this._typeBasedOverrides.has('default')) {\n            var editor = this._typeBasedOverrides.get('default');\n            return resolveOption(editor, cell);\n        }\n        // if cell has a primitive data type then use TextCellEditor\n        var data = cell.grid.dataModel.data('body', cell.row, cell.column);\n        if (!data || typeof data !== 'object') {\n            return new TextCellEditor();\n        }\n        // no suitable editor found for the cell\n        return undefined;\n    };\n    return CellEditorController;\n}());\n\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nvar DataModel = /** @class */ (function () {\n    function DataModel() {\n        this._changed = new Signal(this);\n    }\n    Object.defineProperty(DataModel.prototype, \"changed\", {\n        /**\n         * A signal emitted when the data model has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the count of merged cell groups pertaining to a given\n     * cell region.\n     * @param region the target cell region.\n     */\n    DataModel.prototype.groupCount = function (region) {\n        return 0;\n    };\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the specified cell.\n     *\n     * #### Notes\n     * The returned metadata should be treated as immutable.\n     *\n     * This method is called often, and so should be efficient.\n     *\n     * The default implementation returns `{}`.\n     */\n    DataModel.prototype.metadata = function (region, row, column) {\n        return DataModel.emptyMetadata;\n    };\n    /**\n     * Get the merged cell group corresponding to a region and index number.\n     * @param region the cell region of cell group.\n     * @param groupIndex the group index of the cell group.\n     * @returns a cell group.\n     */\n    DataModel.prototype.group = function (region, groupIndex) {\n        return null;\n    };\n    /**\n     * Emit the `changed` signal for the data model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the data model has\n     * changed so that attached data grids can update themselves.\n     */\n    DataModel.prototype.emitChanged = function (args) {\n        this._changed.emit(args);\n    };\n    return DataModel;\n}());\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nvar MutableDataModel = /** @class */ (function (_super) {\n    __extends(MutableDataModel, _super);\n    function MutableDataModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MutableDataModel;\n}(DataModel));\n/**\n * The namespace for the `DataModel` class statics.\n */\n(function (DataModel) {\n    /**\n     * A singleton empty metadata object.\n     */\n    DataModel.emptyMetadata = Object.freeze({});\n})(DataModel || (DataModel = {}));\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nvar GraphicsContext = /** @class */ (function () {\n    /**\n     * Create a new graphics context object.\n     *\n     * @param context - The 2D canvas rendering context to wrap.\n     */\n    function GraphicsContext(context) {\n        this._disposed = false;\n        this._context = context;\n        this._state = Private$3.State.create(context);\n    }\n    GraphicsContext.prototype.dispose = function () {\n        // Bail if the gc is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Mark the gc as disposed.\n        this._disposed = true;\n        // Pop any unrestored saves.\n        while (this._state.next) {\n            this._state = this._state.next;\n            this._context.restore();\n        }\n    };\n    Object.defineProperty(GraphicsContext.prototype, \"isDisposed\", {\n        get: function () {\n            return this._disposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"fillStyle\", {\n        get: function () {\n            return this._context.fillStyle;\n        },\n        set: function (value) {\n            if (this._state.fillStyle !== value) {\n                this._state.fillStyle = value;\n                this._context.fillStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"strokeStyle\", {\n        get: function () {\n            return this._context.strokeStyle;\n        },\n        set: function (value) {\n            if (this._state.strokeStyle !== value) {\n                this._state.strokeStyle = value;\n                this._context.strokeStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"font\", {\n        get: function () {\n            return this._context.font;\n        },\n        set: function (value) {\n            if (this._state.font !== value) {\n                this._state.font = value;\n                this._context.font = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"textAlign\", {\n        get: function () {\n            return this._context.textAlign;\n        },\n        set: function (value) {\n            if (this._state.textAlign !== value) {\n                this._state.textAlign = value;\n                this._context.textAlign = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"textBaseline\", {\n        get: function () {\n            return this._context.textBaseline;\n        },\n        set: function (value) {\n            if (this._state.textBaseline !== value) {\n                this._state.textBaseline = value;\n                this._context.textBaseline = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineCap\", {\n        get: function () {\n            return this._context.lineCap;\n        },\n        set: function (value) {\n            if (this._state.lineCap !== value) {\n                this._state.lineCap = value;\n                this._context.lineCap = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineDashOffset\", {\n        get: function () {\n            return this._context.lineDashOffset;\n        },\n        set: function (value) {\n            if (this._state.lineDashOffset !== value) {\n                this._state.lineDashOffset = value;\n                this._context.lineDashOffset = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineJoin\", {\n        get: function () {\n            return this._context.lineJoin;\n        },\n        set: function (value) {\n            if (this._state.lineJoin !== value) {\n                this._state.lineJoin = value;\n                this._context.lineJoin = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"lineWidth\", {\n        get: function () {\n            return this._context.lineWidth;\n        },\n        set: function (value) {\n            if (this._state.lineWidth !== value) {\n                this._state.lineWidth = value;\n                this._context.lineWidth = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"miterLimit\", {\n        get: function () {\n            return this._context.miterLimit;\n        },\n        set: function (value) {\n            if (this._state.miterLimit !== value) {\n                this._state.miterLimit = value;\n                this._context.miterLimit = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowBlur\", {\n        get: function () {\n            return this._context.shadowBlur;\n        },\n        set: function (value) {\n            if (this._state.shadowBlur !== value) {\n                this._state.shadowBlur = value;\n                this._context.shadowBlur = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowColor\", {\n        get: function () {\n            return this._context.shadowColor;\n        },\n        set: function (value) {\n            if (this._state.shadowColor !== value) {\n                this._state.shadowColor = value;\n                this._context.shadowColor = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowOffsetX\", {\n        get: function () {\n            return this._context.shadowOffsetX;\n        },\n        set: function (value) {\n            if (this._state.shadowOffsetX !== value) {\n                this._state.shadowOffsetX = value;\n                this._context.shadowOffsetX = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"shadowOffsetY\", {\n        get: function () {\n            return this._context.shadowOffsetY;\n        },\n        set: function (value) {\n            if (this._state.shadowOffsetY !== value) {\n                this._state.shadowOffsetY = value;\n                this._context.shadowOffsetY = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"imageSmoothingEnabled\", {\n        get: function () {\n            return this._context.imageSmoothingEnabled;\n        },\n        set: function (value) {\n            if (this._state.imageSmoothingEnabled !== value) {\n                this._state.imageSmoothingEnabled = value;\n                this._context.imageSmoothingEnabled = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"globalAlpha\", {\n        get: function () {\n            return this._context.globalAlpha;\n        },\n        set: function (value) {\n            if (this._state.globalAlpha !== value) {\n                this._state.globalAlpha = value;\n                this._context.globalAlpha = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GraphicsContext.prototype, \"globalCompositeOperation\", {\n        get: function () {\n            return this._context.globalCompositeOperation;\n        },\n        set: function (value) {\n            if (this._state.globalCompositeOperation !== value) {\n                this._state.globalCompositeOperation = value;\n                this._context.globalCompositeOperation = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GraphicsContext.prototype.getLineDash = function () {\n        return this._context.getLineDash();\n    };\n    GraphicsContext.prototype.setLineDash = function (segments) {\n        this._context.setLineDash(segments);\n    };\n    GraphicsContext.prototype.rotate = function (angle) {\n        this._context.rotate(angle);\n    };\n    GraphicsContext.prototype.scale = function (x, y) {\n        this._context.scale(x, y);\n    };\n    GraphicsContext.prototype.transform = function (m11, m12, m21, m22, dx, dy) {\n        this._context.transform(m11, m12, m21, m22, dx, dy);\n    };\n    GraphicsContext.prototype.translate = function (x, y) {\n        this._context.translate(x, y);\n    };\n    GraphicsContext.prototype.setTransform = function (m11, m12, m21, m22, dx, dy) {\n        this._context.setTransform(m11, m12, m21, m22, dx, dy);\n    };\n    GraphicsContext.prototype.save = function () {\n        // Clone an push the current state to the stack.\n        this._state = Private$3.State.push(this._state);\n        // Save the wrapped context state.\n        this._context.save();\n    };\n    GraphicsContext.prototype.restore = function () {\n        // Bail if there is no state to restore.\n        if (!this._state.next) {\n            return;\n        }\n        // Pop the saved state from the stack.\n        this._state = Private$3.State.pop(this._state);\n        // Restore the wrapped context state.\n        this._context.restore();\n    };\n    GraphicsContext.prototype.beginPath = function () {\n        return this._context.beginPath();\n    };\n    GraphicsContext.prototype.closePath = function () {\n        this._context.closePath();\n    };\n    GraphicsContext.prototype.isPointInPath = function (x, y, fillRule) {\n        var result;\n        if (arguments.length === 2) {\n            result = this._context.isPointInPath(x, y);\n        }\n        else {\n            result = this._context.isPointInPath(x, y, fillRule);\n        }\n        return result;\n    };\n    GraphicsContext.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 5) {\n            this._context.arc(x, y, radius, startAngle, endAngle);\n        }\n        else {\n            this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n        }\n    };\n    GraphicsContext.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    };\n    GraphicsContext.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    };\n    GraphicsContext.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 7) {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle);\n        }\n        else {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n        }\n    };\n    GraphicsContext.prototype.lineTo = function (x, y) {\n        this._context.lineTo(x, y);\n    };\n    GraphicsContext.prototype.moveTo = function (x, y) {\n        this._context.moveTo(x, y);\n    };\n    GraphicsContext.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    };\n    GraphicsContext.prototype.rect = function (x, y, w, h) {\n        this._context.rect(x, y, w, h);\n    };\n    GraphicsContext.prototype.clip = function (fillRule) {\n        if (arguments.length === 0) {\n            this._context.clip();\n        }\n        else {\n            this._context.clip(fillRule);\n        }\n    };\n    GraphicsContext.prototype.fill = function (fillRule) {\n        if (arguments.length === 0) {\n            this._context.fill();\n        }\n        else {\n            this._context.fill(fillRule);\n        }\n    };\n    GraphicsContext.prototype.stroke = function () {\n        this._context.stroke();\n    };\n    GraphicsContext.prototype.clearRect = function (x, y, w, h) {\n        return this._context.clearRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.fillRect = function (x, y, w, h) {\n        this._context.fillRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.fillText = function (text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.fillText(text, x, y);\n        }\n        else {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n    };\n    GraphicsContext.prototype.strokeRect = function (x, y, w, h) {\n        this._context.strokeRect(x, y, w, h);\n    };\n    GraphicsContext.prototype.strokeText = function (text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.strokeText(text, x, y);\n        }\n        else {\n            this._context.strokeText(text, x, y, maxWidth);\n        }\n    };\n    GraphicsContext.prototype.measureText = function (text) {\n        return this._context.measureText(text);\n    };\n    GraphicsContext.prototype.createLinearGradient = function (x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    };\n    GraphicsContext.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    };\n    GraphicsContext.prototype.createPattern = function (image, repetition) {\n        return this._context.createPattern(image, repetition);\n    };\n    GraphicsContext.prototype.createImageData = function () {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return this._context.createImageData.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.getImageData = function (sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    };\n    GraphicsContext.prototype.putImageData = function () {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.putImageData.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.drawImage = function () {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.drawImage.apply(this._context, arguments);\n    };\n    GraphicsContext.prototype.drawFocusIfNeeded = function (element) {\n        this._context.drawFocusIfNeeded(element);\n    };\n    return GraphicsContext;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$3;\n(function (Private) {\n    /**\n     * The index of next valid pool object.\n     */\n    var pi = -1;\n    /**\n     * A state object allocation pool.\n     */\n    var pool = [];\n    /**\n     * An object which holds the state for a gc.\n     */\n    var State = /** @class */ (function () {\n        function State() {\n        }\n        /**\n         * Create a gc state object from a 2D canvas context.\n         */\n        State.create = function (context) {\n            var state = pi < 0 ? new State() : pool[pi--];\n            state.next = null;\n            state.fillStyle = context.fillStyle;\n            state.font = context.font;\n            state.globalAlpha = context.globalAlpha;\n            state.globalCompositeOperation = context.globalCompositeOperation;\n            state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n            state.lineCap = context.lineCap;\n            state.lineDashOffset = context.lineDashOffset;\n            state.lineJoin = context.lineJoin;\n            state.lineWidth = context.lineWidth;\n            state.miterLimit = context.miterLimit;\n            state.shadowBlur = context.shadowBlur;\n            state.shadowColor = context.shadowColor;\n            state.shadowOffsetX = context.shadowOffsetX;\n            state.shadowOffsetY = context.shadowOffsetY;\n            state.strokeStyle = context.strokeStyle;\n            state.textAlign = context.textAlign;\n            state.textBaseline = context.textBaseline;\n            return state;\n        };\n        /**\n         * Clone an existing gc state object and add it to the state stack.\n         */\n        State.push = function (other) {\n            var state = pi < 0 ? new State() : pool[pi--];\n            state.next = other;\n            state.fillStyle = other.fillStyle;\n            state.font = other.font;\n            state.globalAlpha = other.globalAlpha;\n            state.globalCompositeOperation = other.globalCompositeOperation;\n            state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n            state.lineCap = other.lineCap;\n            state.lineDashOffset = other.lineDashOffset;\n            state.lineJoin = other.lineJoin;\n            state.lineWidth = other.lineWidth;\n            state.miterLimit = other.miterLimit;\n            state.shadowBlur = other.shadowBlur;\n            state.shadowColor = other.shadowColor;\n            state.shadowOffsetX = other.shadowOffsetX;\n            state.shadowOffsetY = other.shadowOffsetY;\n            state.strokeStyle = other.strokeStyle;\n            state.textAlign = other.textAlign;\n            state.textBaseline = other.textBaseline;\n            return state;\n        };\n        /**\n         * Pop the next state object and return the current to the pool\n         */\n        State.pop = function (state) {\n            state.fillStyle = '';\n            state.strokeStyle = '';\n            pool[++pi] = state;\n            return state.next;\n        };\n        return State;\n    }());\n    Private.State = State;\n})(Private$3 || (Private$3 = {}));\n\n/**\n * A class which manages the mapping of cell renderers.\n */\nvar RendererMap = /** @class */ (function () {\n    /**\n     * Construct a new renderer map.\n     *\n     * @param values - The initial values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     */\n    function RendererMap(values, fallback) {\n        if (values === void 0) { values = {}; }\n        this._changed = new Signal(this);\n        this._values = __assign({}, values);\n        this._fallback = fallback || new TextRenderer();\n    }\n    Object.defineProperty(RendererMap.prototype, \"changed\", {\n        /**\n         * A signal emitted when the renderer map has changed.\n         */\n        get: function () {\n            return this._changed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the cell renderer to use for the given cell config.\n     *\n     * @param config - The cell config of interest.\n     *\n     * @returns The renderer to use for the cell.\n     */\n    RendererMap.prototype.get = function (config) {\n        // Fetch the renderer from the values map.\n        var renderer = this._values[config.region];\n        // Execute a resolver function if necessary.\n        if (typeof renderer === 'function') {\n            try {\n                renderer = renderer(config);\n            }\n            catch (err) {\n                renderer = undefined;\n                console.error(err);\n            }\n        }\n        // Return the renderer or the fallback.\n        return renderer || this._fallback;\n    };\n    /**\n     * Update the renderer map with new values\n     *\n     * @param values - The updated values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     *\n     * #### Notes\n     * This method always emits the `changed` signal.\n     */\n    RendererMap.prototype.update = function (values, fallback) {\n        if (values === void 0) { values = {}; }\n        this._values = __assign(__assign({}, this._values), values);\n        this._fallback = fallback || this._fallback;\n        this._changed.emit(undefined);\n    };\n    return RendererMap;\n}());\n\n// Copyright (c) Jupyter Development Team.\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nvar SectionList = /** @class */ (function () {\n    /**\n     * Construct a new section list.\n     *\n     * @param options - The options for initializing the list.\n     */\n    function SectionList(options) {\n        this._count = 0;\n        this._length = 0;\n        this._sections = [];\n        this._minimumSize = options.minimumSize || 2;\n        this._defaultSize = Math.max(this._minimumSize, Math.floor(options.defaultSize));\n    }\n    Object.defineProperty(SectionList.prototype, \"length\", {\n        /**\n         * The total size of all sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"count\", {\n        /**\n         * The total number of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"minimumSize\", {\n        /**\n         * Get the minimum size of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._minimumSize;\n        },\n        /**\n         * Set the minimum size of sections in the list.\n         *\n         * #### Complexity\n         * Linear on the number of resized sections.\n         */\n        set: function (value) {\n            // Normalize the value.\n            value = Math.max(2, Math.floor(value));\n            // Bail early if the value does not change.\n            if (this._minimumSize === value) {\n                return;\n            }\n            // Update the internal minimum size.\n            this._minimumSize = value;\n            // Update default size if larger than minimum size\n            if (value > this._defaultSize) {\n                this.defaultSize = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SectionList.prototype, \"defaultSize\", {\n        /**\n         * Get the default size of sections in the list.\n         *\n         * #### Complexity\n         * Constant.\n         */\n        get: function () {\n            return this._defaultSize;\n        },\n        /**\n         * Set the default size of sections in the list.\n         *\n         * #### Complexity\n         * Linear on the number of resized sections.\n         */\n        set: function (value) {\n            // Normalize the value.\n            value = Math.max(this._minimumSize, Math.floor(value));\n            // Bail early if the value does not change.\n            if (this._defaultSize === value) {\n                return;\n            }\n            // Compute the delta default size.\n            var delta = value - this._defaultSize;\n            // Update the internal default size.\n            this._defaultSize = value;\n            // Update the length.\n            this._length += delta * (this._count - this._sections.length);\n            // Bail early if there are no modified sections.\n            if (this._sections.length === 0) {\n                return;\n            }\n            // Recompute the offsets of the modified sections.\n            for (var i = 0, n = this._sections.length; i < n; ++i) {\n                // Look up the previous and current modified sections.\n                var prev = this._sections[i - 1];\n                var curr = this._sections[i];\n                // Adjust the offset for the current section.\n                if (prev) {\n                    var count = curr.index - prev.index - 1;\n                    curr.offset = prev.offset + prev.size + count * value;\n                }\n                else {\n                    curr.offset = curr.index * value;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clamp a size to the minimum section size\n     *\n     * @param size - The size to clamp.\n     *\n     * @returns The size or the section minimum size, whichever is larger\n     */\n    SectionList.prototype.clampSize = function (size) {\n        return Math.max(this._minimumSize, Math.floor(size));\n    };\n    /**\n     * Find the index of the section which covers the given offset.\n     *\n     * @param offset - The offset of the section of interest.\n     *\n     * @returns The index of the section which covers the given offset,\n     *   or `-1` if the offset is out of range.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.indexOf = function (offset) {\n        // Bail early if the offset is out of range.\n        if (offset < 0 || offset >= this._length || this._count === 0) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Find the modified section for the given offset.\n        var i = ArrayExt.lowerBound(this._sections, offset, Private$2.offsetCmp);\n        // Return the index of an exact match.\n        if (i < this._sections.length && this._sections[i].offset <= offset) {\n            return this._sections[i].index;\n        }\n        // Handle the case of no modified sections before the offset.\n        if (i === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Compute the index from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = offset - (section.offset + section.size);\n        return section.index + Math.floor(span / this._defaultSize) + 1;\n    };\n    /**\n     * Find the offset of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The offset of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.offsetOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return index * this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return index * this._defaultSize;\n        }\n        // Compute the offset from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = index - section.index - 1;\n        return section.offset + section.size + span * this._defaultSize;\n    };\n    /**\n     * Find the extent of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The extent of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.extentOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset + this._sections[i].size - 1;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Compute the offset from the previous modified section.\n        var section = this._sections[i - 1];\n        var span = index - section.index;\n        return section.offset + section.size + span * this._defaultSize - 1;\n    };\n    /**\n     * Find the size of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The size of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    SectionList.prototype.sizeOf = function (index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the size of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].size;\n        }\n        // Return the default size for all other cases.\n        return this._defaultSize;\n    };\n    /**\n     * Resize a section in the list.\n     *\n     * @param index - The index of the section to resize. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param size - The new size of the section. This value will be\n     *   clamped to an integer `>= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.resize = function (index, size) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return;\n        }\n        // Clamp the size to an integer >= minimum size.\n        size = Math.max(this._minimumSize, Math.floor(size));\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update or create the modified section as needed.\n        var delta;\n        if (i < this._sections.length && this._sections[i].index === index) {\n            var section = this._sections[i];\n            delta = size - section.size;\n            section.size = size;\n        }\n        else if (i === 0) {\n            var offset = index * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index: index, offset: offset, size: size });\n            delta = size - this._defaultSize;\n        }\n        else {\n            var section = this._sections[i - 1];\n            var span = index - section.index - 1;\n            var offset = section.offset + section.size + span * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index: index, offset: offset, size: size });\n            delta = size - this._defaultSize;\n        }\n        // Adjust the length.\n        this._length += delta;\n        // Update all modified sections after the resized section.\n        for (var j = i + 1, n = this._sections.length; j < n; ++j) {\n            this._sections[j].offset += delta;\n        }\n    };\n    /**\n     * Insert sections into the list.\n     *\n     * @param index - The index at which to insert the sections. This\n     *   value will be clamped to the bounds of the list.\n     *\n     * @param count - The number of sections to insert. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.insert = function (index, count) {\n        // Bail early if there are no sections to insert.\n        if (count <= 0) {\n            return;\n        }\n        // Clamp the index to the bounds of the list.\n        index = Math.max(0, Math.min(index, this._count));\n        // Add the new sections to the totals.\n        var span = count * this._defaultSize;\n        this._count += count;\n        this._length += span;\n        // Bail early if there are no modified sections to update.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Find the modified section for the given index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update all modified sections after the insert location.\n        for (var n = this._sections.length; i < n; ++i) {\n            var section = this._sections[i];\n            section.index += count;\n            section.offset += span;\n        }\n    };\n    /**\n     * Remove sections from the list.\n     *\n     * @param index - The index of the first section to remove. This\n     *   method is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to remove. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    SectionList.prototype.remove = function (index, count) {\n        // Bail early if there is nothing to remove.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Clamp the count to the bounds of the list.\n        count = Math.min(this._count - index, count);\n        // Handle the simple case of no modified sections to update.\n        if (this._sections.length === 0) {\n            this._count -= count;\n            this._length -= count * this._defaultSize;\n            return;\n        }\n        // Handle the simple case of removing all sections.\n        if (count === this._count) {\n            this._length = 0;\n            this._count = 0;\n            this._sections.length = 0;\n            return;\n        }\n        // Find the modified section for the start index.\n        var i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Find the modified section for the end index.\n        var j = ArrayExt.lowerBound(this._sections, index + count, Private$2.indexCmp);\n        // Remove the relevant modified sections.\n        var removed = this._sections.splice(i, j - i);\n        // Compute the total removed span.\n        var span = (count - removed.length) * this._defaultSize;\n        for (var k = 0, n = removed.length; k < n; ++k) {\n            span += removed[k].size;\n        }\n        // Adjust the totals.\n        this._count -= count;\n        this._length -= span;\n        // Update all modified sections after the removed span.\n        for (var k = i, n = this._sections.length; k < n; ++k) {\n            var section = this._sections[k];\n            section.index -= count;\n            section.offset -= span;\n        }\n    };\n    /**\n     * Move sections within the list.\n     *\n     * @param index - The index of the first section to move. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to move. This method is a\n     *   no-op if this value is `<= 0`.\n     *\n     * @param destination - The destination index for the first section.\n     *   This value will be clamped to the allowable range.\n     *\n     * #### Undefined Behavior\n     * An `index`, `count`, or `destination` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of moved resized sections.\n     */\n    SectionList.prototype.move = function (index, count, destination) {\n        // Bail early if there is nothing to move.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Clamp the move count to the limit.\n        count = Math.min(count, this._count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), this._count - count);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        var i1 = Math.min(index, destination);\n        // Look up the first affected modified section.\n        var k1 = ArrayExt.lowerBound(this._sections, i1, Private$2.indexCmp);\n        // Bail early if there are no affected modified sections.\n        if (k1 === this._sections.length) {\n            return;\n        }\n        // Compute the last affected index.\n        var i2 = Math.max(index + count - 1, destination + count - 1);\n        // Look up the last affected modified section.\n        var k2 = ArrayExt.upperBound(this._sections, i2, Private$2.indexCmp) - 1;\n        // Bail early if there are no affected modified sections.\n        if (k2 < k1) {\n            return;\n        }\n        // Compute the pivot index.\n        var pivot = destination < index ? index : index + count;\n        // Compute the count for each side of the pivot.\n        var count1 = pivot - i1;\n        var count2 = i2 - pivot + 1;\n        // Compute the span for each side of the pivot.\n        var span1 = count1 * this._defaultSize;\n        var span2 = count2 * this._defaultSize;\n        // Adjust the spans for the modified sections.\n        for (var j = k1; j <= k2; ++j) {\n            var section = this._sections[j];\n            if (section.index < pivot) {\n                span1 += section.size - this._defaultSize;\n            }\n            else {\n                span2 += section.size - this._defaultSize;\n            }\n        }\n        // Look up the pivot section.\n        var k3 = ArrayExt.lowerBound(this._sections, pivot, Private$2.indexCmp);\n        // Rotate the modified sections if needed.\n        if (k1 <= k3 && k3 <= k2) {\n            ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n        }\n        // Adjust the modified section indices and offsets.\n        for (var j = k1; j <= k2; ++j) {\n            var section = this._sections[j];\n            if (section.index < pivot) {\n                section.index += count2;\n                section.offset += span2;\n            }\n            else {\n                section.index -= count1;\n                section.offset -= span1;\n            }\n        }\n    };\n    /**\n     * Reset all modified sections to the default size.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    SectionList.prototype.reset = function () {\n        this._sections.length = 0;\n        this._length = this._count * this._defaultSize;\n    };\n    /**\n     * Remove all sections from the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    SectionList.prototype.clear = function () {\n        this._count = 0;\n        this._length = 0;\n        this._sections.length = 0;\n    };\n    return SectionList;\n}());\n/**\n * The namespace for the module implementation details.\n */\nvar Private$2;\n(function (Private) {\n    /**\n     * A comparison function for searching by offset.\n     */\n    function offsetCmp(section, offset) {\n        if (offset < section.offset) {\n            return 1;\n        }\n        if (section.offset + section.size <= offset) {\n            return -1;\n        }\n        return 0;\n    }\n    Private.offsetCmp = offsetCmp;\n    /**\n     * A comparison function for searching by index.\n     */\n    function indexCmp(section, index) {\n        return section.index - index;\n    }\n    Private.indexCmp = indexCmp;\n})(Private$2 || (Private$2 = {}));\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nvar DataGrid = /** @class */ (function (_super) {\n    __extends(DataGrid, _super);\n    /**\n     * Construct a new data grid.\n     *\n     * @param options - The options for initializing the data grid.\n     */\n    function DataGrid(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this._scrollX = 0;\n        _this._scrollY = 0;\n        _this._viewportWidth = 0;\n        _this._viewportHeight = 0;\n        _this._mousedown = false;\n        _this._keyHandler = null;\n        _this._mouseHandler = null;\n        _this._vScrollBarMinWidth = 0;\n        _this._hScrollBarMinHeight = 0;\n        _this._dpiRatio = Math.ceil(window.devicePixelRatio);\n        _this._dataModel = null;\n        _this._selectionModel = null;\n        _this._editingEnabled = false;\n        _this.addClass('lm-DataGrid');\n        /* <DEPRECATED> */\n        _this.addClass('p-DataGrid');\n        /* </DEPRECATED> */\n        // Parse the simple options.\n        _this._style = options.style || DataGrid.defaultStyle;\n        _this._stretchLastRow = options.stretchLastRow || false;\n        _this._stretchLastColumn = options.stretchLastColumn || false;\n        _this._headerVisibility = options.headerVisibility || 'all';\n        _this._cellRenderers = options.cellRenderers || new RendererMap();\n        _this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n        // Connect to the renderer map changed signal.\n        _this._cellRenderers.changed.connect(_this._onRenderersChanged, _this);\n        // Parse the default sizes.\n        var defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n        var minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n        // Set up the sections lists.\n        _this._rowSections = new SectionList({\n            defaultSize: defaultSizes.rowHeight,\n            minimumSize: minimumSizes.rowHeight\n        });\n        _this._columnSections = new SectionList({\n            defaultSize: defaultSizes.columnWidth,\n            minimumSize: minimumSizes.columnWidth\n        });\n        _this._rowHeaderSections = new SectionList({\n            defaultSize: defaultSizes.rowHeaderWidth,\n            minimumSize: minimumSizes.rowHeaderWidth\n        });\n        _this._columnHeaderSections = new SectionList({\n            defaultSize: defaultSizes.columnHeaderHeight,\n            minimumSize: minimumSizes.columnHeaderHeight\n        });\n        // Create the canvas, buffer, and overlay objects.\n        _this._canvas = Private$1.createCanvas();\n        _this._buffer = Private$1.createCanvas();\n        _this._overlay = Private$1.createCanvas();\n        // Get the graphics contexts for the canvases.\n        _this._canvasGC = _this._canvas.getContext('2d');\n        _this._bufferGC = _this._buffer.getContext('2d');\n        _this._overlayGC = _this._overlay.getContext('2d');\n        // Set up the on-screen canvas.\n        _this._canvas.style.position = 'absolute';\n        _this._canvas.style.top = '0px';\n        _this._canvas.style.left = '0px';\n        _this._canvas.style.width = '0px';\n        _this._canvas.style.height = '0px';\n        // Set up the on-screen overlay.\n        _this._overlay.style.position = 'absolute';\n        _this._overlay.style.top = '0px';\n        _this._overlay.style.left = '0px';\n        _this._overlay.style.width = '0px';\n        _this._overlay.style.height = '0px';\n        // Create the internal widgets for the data grid.\n        _this._viewport = new Widget();\n        _this._viewport.node.tabIndex = -1;\n        _this._viewport.node.style.outline = 'none';\n        _this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n        _this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n        _this._scrollCorner = new Widget();\n        _this._editorController = new CellEditorController();\n        // Add the extra class names to the child widgets.\n        _this._viewport.addClass('lm-DataGrid-viewport');\n        _this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n        _this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n        _this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n        /* <DEPRECATED> */\n        _this._viewport.addClass('p-DataGrid-viewport');\n        _this._vScrollBar.addClass('p-DataGrid-scrollBar');\n        _this._hScrollBar.addClass('p-DataGrid-scrollBar');\n        _this._scrollCorner.addClass('p-DataGrid-scrollCorner');\n        /* </DEPRECATED> */\n        // Add the on-screen canvas to the viewport node.\n        _this._viewport.node.appendChild(_this._canvas);\n        // Add the on-screen overlay to the viewport node.\n        _this._viewport.node.appendChild(_this._overlay);\n        // Install the message hooks.\n        MessageLoop.installMessageHook(_this._viewport, _this);\n        MessageLoop.installMessageHook(_this._hScrollBar, _this);\n        MessageLoop.installMessageHook(_this._vScrollBar, _this);\n        // Hide the scroll bars and corner from the outset.\n        _this._vScrollBar.hide();\n        _this._hScrollBar.hide();\n        _this._scrollCorner.hide();\n        // Connect to the scroll bar signals.\n        _this._vScrollBar.thumbMoved.connect(_this._onThumbMoved, _this);\n        _this._hScrollBar.thumbMoved.connect(_this._onThumbMoved, _this);\n        _this._vScrollBar.pageRequested.connect(_this._onPageRequested, _this);\n        _this._hScrollBar.pageRequested.connect(_this._onPageRequested, _this);\n        _this._vScrollBar.stepRequested.connect(_this._onStepRequested, _this);\n        _this._hScrollBar.stepRequested.connect(_this._onStepRequested, _this);\n        // Set the layout cell config for the child widgets.\n        GridLayout.setCellConfig(_this._viewport, { row: 0, column: 0 });\n        GridLayout.setCellConfig(_this._vScrollBar, { row: 0, column: 1 });\n        GridLayout.setCellConfig(_this._hScrollBar, { row: 1, column: 0 });\n        GridLayout.setCellConfig(_this._scrollCorner, { row: 1, column: 1 });\n        // Create the layout for the data grid.\n        var layout = new GridLayout({\n            rowCount: 2,\n            columnCount: 2,\n            rowSpacing: 0,\n            columnSpacing: 0,\n            fitPolicy: 'set-no-constraint'\n        });\n        // Set the stretch factors for the grid.\n        layout.setRowStretch(0, 1);\n        layout.setRowStretch(1, 0);\n        layout.setColumnStretch(0, 1);\n        layout.setColumnStretch(1, 0);\n        // Add the child widgets to the layout.\n        layout.addWidget(_this._viewport);\n        layout.addWidget(_this._vScrollBar);\n        layout.addWidget(_this._hScrollBar);\n        layout.addWidget(_this._scrollCorner);\n        // Install the layout on the data grid.\n        _this.layout = layout;\n        return _this;\n    }\n    /**\n     * Dispose of the resources held by the widgets.\n     */\n    DataGrid.prototype.dispose = function () {\n        // Release the mouse.\n        this._releaseMouse();\n        // Dispose of the handlers.\n        if (this._keyHandler) {\n            this._keyHandler.dispose();\n        }\n        if (this._mouseHandler) {\n            this._mouseHandler.dispose();\n        }\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        // Clear the models.\n        this._dataModel = null;\n        this._selectionModel = null;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Dispose of the base class.\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(DataGrid.prototype, \"dataModel\", {\n        /**\n         * Get the data model for the data grid.\n         */\n        get: function () {\n            return this._dataModel;\n        },\n        /**\n         * Set the data model for the data grid.\n         *\n         * #### Notes\n         * This will automatically remove the current selection model.\n         */\n        set: function (value) {\n            // Do nothing if the model does not change.\n            if (this._dataModel === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Clear the selection model.\n            this.selectionModel = null;\n            // Disconnect the change handler from the old model.\n            if (this._dataModel) {\n                this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n            }\n            // Connect the change handler for the new model.\n            if (value) {\n                value.changed.connect(this._onDataModelChanged, this);\n            }\n            // Update the internal model reference.\n            this._dataModel = value;\n            // Clear the section lists.\n            this._rowSections.clear();\n            this._columnSections.clear();\n            this._rowHeaderSections.clear();\n            this._columnHeaderSections.clear();\n            // Populate the section lists.\n            if (value) {\n                this._rowSections.insert(0, value.rowCount('body'));\n                this._columnSections.insert(0, value.columnCount('body'));\n                this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n                this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n            }\n            // Reset the scroll position.\n            this._scrollX = 0;\n            this._scrollY = 0;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"selectionModel\", {\n        /**\n         * Get the selection model for the data grid.\n         */\n        get: function () {\n            return this._selectionModel;\n        },\n        /**\n         * Set the selection model for the data grid.\n         */\n        set: function (value) {\n            // Do nothing if the selection model does not change.\n            if (this._selectionModel === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Ensure the data models are a match.\n            if (value && value.dataModel !== this._dataModel) {\n                throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n            }\n            // Disconnect the change handler from the old model.\n            if (this._selectionModel) {\n                this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n            }\n            // Connect the change handler for the new model.\n            if (value) {\n                value.changed.connect(this._onSelectionsChanged, this);\n            }\n            // Update the internal selection model reference.\n            this._selectionModel = value;\n            // Schedule a repaint of the overlay.\n            this.repaintOverlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"keyHandler\", {\n        /**\n         * Get the key handler for the data grid.\n         */\n        get: function () {\n            return this._keyHandler;\n        },\n        /**\n         * Set the key handler for the data grid.\n         */\n        set: function (value) {\n            this._keyHandler = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"mouseHandler\", {\n        /**\n         * Get the mouse handler for the data grid.\n         */\n        get: function () {\n            return this._mouseHandler;\n        },\n        /**\n         * Set the mouse handler for the data grid.\n         */\n        set: function (value) {\n            // Bail early if the mouse handler does not change.\n            if (this._mouseHandler === value) {\n                return;\n            }\n            // Release the mouse.\n            this._releaseMouse();\n            // Update the internal mouse handler.\n            this._mouseHandler = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"style\", {\n        /**\n         * Get the style for the data grid.\n         */\n        get: function () {\n            return this._style;\n        },\n        /**\n         * Set the style for the data grid.\n         */\n        set: function (value) {\n            // Bail if the style does not change.\n            if (this._style === value) {\n                return;\n            }\n            // Update the internal style.\n            this._style = __assign({}, value);\n            // Schedule a repaint of the content.\n            this.repaintContent();\n            // Schedule a repaint of the overlay.\n            this.repaintOverlay();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"cellRenderers\", {\n        /**\n         * Get the cell renderer map for the data grid.\n         */\n        get: function () {\n            return this._cellRenderers;\n        },\n        /**\n         * Set the cell renderer map for the data grid.\n         */\n        set: function (value) {\n            // Bail if the renderer map does not change.\n            if (this._cellRenderers === value) {\n                return;\n            }\n            // Disconnect the old map.\n            this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n            // Connect the new map.\n            value.changed.connect(this._onRenderersChanged, this);\n            // Update the internal renderer map.\n            this._cellRenderers = value;\n            // Schedule a repaint of the grid content.\n            this.repaintContent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerVisibility\", {\n        /**\n         * Get the header visibility for the data grid.\n         */\n        get: function () {\n            return this._headerVisibility;\n        },\n        /**\n         * Set the header visibility for the data grid.\n         */\n        set: function (value) {\n            // Bail if the visibility does not change.\n            if (this._headerVisibility === value) {\n                return;\n            }\n            // Update the internal visibility.\n            this._headerVisibility = value;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"defaultSizes\", {\n        /**\n         * Get the default sizes for the various sections of the data grid.\n         */\n        get: function () {\n            var rowHeight = this._rowSections.defaultSize;\n            var columnWidth = this._columnSections.defaultSize;\n            var rowHeaderWidth = this._rowHeaderSections.defaultSize;\n            var columnHeaderHeight = this._columnHeaderSections.defaultSize;\n            return { rowHeight: rowHeight, columnWidth: columnWidth, rowHeaderWidth: rowHeaderWidth, columnHeaderHeight: columnHeaderHeight };\n        },\n        /**\n         * Set the default sizes for the various sections of the data grid.\n         */\n        set: function (value) {\n            // Update the section default sizes.\n            this._rowSections.defaultSize = value.rowHeight;\n            this._columnSections.defaultSize = value.columnWidth;\n            this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n            this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"minimumSizes\", {\n        /**\n         * Get the minimum sizes for the various sections of the data grid.\n         */\n        get: function () {\n            var rowHeight = this._rowSections.minimumSize;\n            var columnWidth = this._columnSections.minimumSize;\n            var rowHeaderWidth = this._rowHeaderSections.minimumSize;\n            var columnHeaderHeight = this._columnHeaderSections.minimumSize;\n            return { rowHeight: rowHeight, columnWidth: columnWidth, rowHeaderWidth: rowHeaderWidth, columnHeaderHeight: columnHeaderHeight };\n        },\n        /**\n         * Set the minimum sizes for the various sections of the data grid.\n         */\n        set: function (value) {\n            // Update the section default sizes.\n            this._rowSections.minimumSize = value.rowHeight;\n            this._columnSections.minimumSize = value.columnWidth;\n            this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n            this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n            // Sync the viewport.\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"copyConfig\", {\n        /**\n         * Get the copy configuration for the data grid.\n         */\n        get: function () {\n            return this._copyConfig;\n        },\n        /**\n         * Set the copy configuration for the data grid.\n         */\n        set: function (value) {\n            this._copyConfig = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"stretchLastRow\", {\n        /**\n         * Get whether the last row is stretched.\n         */\n        get: function () {\n            return this._stretchLastRow;\n        },\n        /**\n         * Set whether the last row is stretched.\n         */\n        set: function (value) {\n            // Bail early if the value does not change.\n            if (value === this._stretchLastRow) {\n                return;\n            }\n            // Update the internal value.\n            this._stretchLastRow = value;\n            // Sync the viewport\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"stretchLastColumn\", {\n        /**\n         * Get whether the last column is stretched.\n         */\n        get: function () {\n            return this._stretchLastColumn;\n        },\n        /**\n         * Set whether the last column is stretched.\n         */\n        set: function (value) {\n            // Bail early if the value does not change.\n            if (value === this._stretchLastColumn) {\n                return;\n            }\n            // Update the internal value.\n            this._stretchLastColumn = value;\n            // Sync the viewport\n            this._syncViewport();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerWidth\", {\n        /**\n         * The virtual width of the row headers.\n         */\n        get: function () {\n            if (this._headerVisibility === 'none') {\n                return 0;\n            }\n            if (this._headerVisibility === 'column') {\n                return 0;\n            }\n            return this._rowHeaderSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"headerHeight\", {\n        /**\n         * The virtual height of the column headers.\n         */\n        get: function () {\n            if (this._headerVisibility === 'none') {\n                return 0;\n            }\n            if (this._headerVisibility === 'row') {\n                return 0;\n            }\n            return this._columnHeaderSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"bodyWidth\", {\n        /**\n         * The virtual width of the grid body.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last column.\n         */\n        get: function () {\n            return this._columnSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"bodyHeight\", {\n        /**\n         * The virtual height of the grid body.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last row.\n         */\n        get: function () {\n            return this._rowSections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"totalWidth\", {\n        /**\n         * The virtual width of the entire grid.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last column.\n         */\n        get: function () {\n            return this.headerWidth + this.bodyWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"totalHeight\", {\n        /**\n         * The virtual height of the entire grid.\n         *\n         * #### Notes\n         * This does *not* account for a stretched last row.\n         */\n        get: function () {\n            return this.headerHeight + this.bodyHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewportWidth\", {\n        /**\n         * The actual width of the viewport.\n         */\n        get: function () {\n            return this._viewportWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewportHeight\", {\n        /**\n         * The actual height of the viewport.\n         */\n        get: function () {\n            return this._viewportHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"pageWidth\", {\n        /**\n         * The width of the visible portion of the grid body.\n         */\n        get: function () {\n            return Math.max(0, this.viewportWidth - this.headerWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"pageHeight\", {\n        /**\n         * The height of the visible portion of the grid body.\n         */\n        get: function () {\n            return Math.max(0, this.viewportHeight - this.headerHeight);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"scrollX\", {\n        /**\n         * The current scroll X position of the viewport.\n         */\n        get: function () {\n            return this._hScrollBar.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"scrollY\", {\n        /**\n         * The current scroll Y position of the viewport.\n         */\n        get: function () {\n            return this._vScrollBar.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"maxScrollX\", {\n        /**\n         * The maximum scroll X position for the grid.\n         */\n        get: function () {\n            return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"maxScrollY\", {\n        /**\n         * The maximum scroll Y position for the grid.\n         */\n        get: function () {\n            return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"viewport\", {\n        /**\n         * The viewport widget for the data grid.\n         */\n        get: function () {\n            return this._viewport;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editorController\", {\n        /**\n         * The cell editor controller object for the data grid.\n         */\n        get: function () {\n            return this._editorController;\n        },\n        set: function (controller) {\n            this._editorController = controller;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editingEnabled\", {\n        /**\n         * Whether the cell editing is enabled for the data grid.\n         */\n        get: function () {\n            return this._editingEnabled;\n        },\n        set: function (enabled) {\n            this._editingEnabled = enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"editable\", {\n        /**\n         * Whether the grid cells are editable.\n         *\n         * `editingEnabled` flag must be on and grid must have required\n         * selection model, editor controller and data model properties.\n         */\n        get: function () {\n            return (this._editingEnabled &&\n                this._selectionModel !== null &&\n                this._editorController !== null &&\n                this.dataModel instanceof MutableDataModel);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"canvasGC\", {\n        /**\n         * The rendering context for painting the data grid.\n         */\n        get: function () {\n            return this._canvasGC;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"rowSections\", {\n        /**\n         * The row sections of the data grid.\n         */\n        get: function () {\n            return this._rowSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"columnSections\", {\n        /**\n         * The column sections of the data grid.\n         */\n        get: function () {\n            return this._columnSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"rowHeaderSections\", {\n        /**\n         * The row header sections of the data grid.\n         */\n        get: function () {\n            return this._rowHeaderSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataGrid.prototype, \"columnHeaderSections\", {\n        /**\n         * The column header sections of the data grid.\n         */\n        get: function () {\n            return this._columnHeaderSections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Scroll the grid to the specified row.\n     *\n     * @param row - The row index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the row is already visible.\n     */\n    DataGrid.prototype.scrollToRow = function (row) {\n        // Fetch the row count.\n        var nr = this._rowSections.count;\n        // Bail early if there is no content.\n        if (nr === 0) {\n            return;\n        }\n        // Floor the row index.\n        row = Math.floor(row);\n        // Clamp the row index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        // Get the virtual bounds of the row.\n        var y1 = this._rowSections.offsetOf(row);\n        var y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        var vy1 = this._scrollY;\n        var vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        var dy = 0;\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(0, dy);\n    };\n    /**\n     * Scroll the grid to the specified column.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the column is already visible.\n     */\n    DataGrid.prototype.scrollToColumn = function (column) {\n        // Fetch the column count.\n        var nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nc === 0) {\n            return;\n        }\n        // Floor the column index.\n        column = Math.floor(column);\n        // Clamp the column index.\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the column.\n        var x1 = this._columnSections.offsetOf(column);\n        var x2 = this._columnSections.extentOf(column);\n        // Get the virtual bounds of the viewport.\n        var vx1 = this._scrollX;\n        var vx2 = this._scrollX + this.pageWidth - 1;\n        // Set up the delta variables.\n        var dx = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, 0);\n    };\n    /**\n     * Scroll the grid to the specified cell.\n     *\n     * @param row - The row index of the cell.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the cell is already visible.\n     */\n    DataGrid.prototype.scrollToCell = function (row, column) {\n        // Fetch the row and column count.\n        var nr = this._rowSections.count;\n        var nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nr === 0 || nc === 0) {\n            return;\n        }\n        // Floor the cell index.\n        row = Math.floor(row);\n        column = Math.floor(column);\n        // Clamp the cell index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the cell.\n        var x1 = this._columnSections.offsetOf(column);\n        var x2 = this._columnSections.extentOf(column);\n        var y1 = this._rowSections.offsetOf(row);\n        var y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        var vx1 = this._scrollX;\n        var vx2 = this._scrollX + this.pageWidth - 1;\n        var vy1 = this._scrollY;\n        var vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        var dx = 0;\n        var dy = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, dy);\n    };\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    DataGrid.prototype.moveCursor = function (direction) {\n        // Bail early if there is no selection\n        if (!this.dataModel ||\n            !this._selectionModel ||\n            this._selectionModel.isEmpty) {\n            return;\n        }\n        var iter = this._selectionModel.selections();\n        var onlyOne = iter.next() && !iter.next();\n        // if there is a single selection that is a single cell selection\n        // then move the selection and cursor within grid bounds\n        if (onlyOne) {\n            var currentSel = this._selectionModel.currentSelection();\n            if (currentSel.r1 === currentSel.r2 && currentSel.c1 === currentSel.c2) {\n                var dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n                var dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n                var newRow = currentSel.r1 + dr;\n                var newColumn = currentSel.c1 + dc;\n                var rowCount = this.dataModel.rowCount('body');\n                var columnCount = this.dataModel.columnCount('body');\n                if (newRow >= rowCount) {\n                    newRow = 0;\n                    newColumn += 1;\n                }\n                else if (newRow === -1) {\n                    newRow = rowCount - 1;\n                    newColumn -= 1;\n                }\n                if (newColumn >= columnCount) {\n                    newColumn = 0;\n                    newRow += 1;\n                    if (newRow >= rowCount) {\n                        newRow = 0;\n                    }\n                }\n                else if (newColumn === -1) {\n                    newColumn = columnCount - 1;\n                    newRow -= 1;\n                    if (newRow === -1) {\n                        newRow = rowCount - 1;\n                    }\n                }\n                this._selectionModel.select({\n                    r1: newRow,\n                    c1: newColumn,\n                    r2: newRow,\n                    c2: newColumn,\n                    cursorRow: newRow,\n                    cursorColumn: newColumn,\n                    clear: 'all'\n                });\n                return;\n            }\n        }\n        // if there are multiple selections, move cursor\n        // within selection rectangles\n        this._selectionModel.moveCursorWithinSelections(direction);\n    };\n    /**\n     * Scroll the grid to the current cursor position.\n     *\n     * #### Notes\n     * This is a no-op if the cursor is already visible or\n     * if there is no selection model installed on the grid.\n     */\n    DataGrid.prototype.scrollToCursor = function () {\n        // Bail early if there is no selection model.\n        if (!this._selectionModel) {\n            return;\n        }\n        // Fetch the cursor row and column.\n        var row = this._selectionModel.cursorRow;\n        var column = this._selectionModel.cursorColumn;\n        // Scroll to the cursor cell.\n        this.scrollToCell(row, column);\n    };\n    /**\n     * Scroll the viewport by the specified amount.\n     *\n     * @param dx - The X scroll amount.\n     *\n     * @param dy - The Y scroll amount.\n     */\n    DataGrid.prototype.scrollBy = function (dx, dy) {\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    };\n    /**\n     * Scroll the viewport by one page.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    DataGrid.prototype.scrollByPage = function (dir) {\n        var dx = 0;\n        var dy = 0;\n        switch (dir) {\n            case 'up':\n                dy = -this.pageHeight;\n                break;\n            case 'down':\n                dy = this.pageHeight;\n                break;\n            case 'left':\n                dx = -this.pageWidth;\n                break;\n            case 'right':\n                dx = this.pageWidth;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    };\n    /**\n     * Scroll the viewport by one cell-aligned step.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    DataGrid.prototype.scrollByStep = function (dir) {\n        var r;\n        var c;\n        var x = this.scrollX;\n        var y = this.scrollY;\n        var rows = this._rowSections;\n        var columns = this._columnSections;\n        switch (dir) {\n            case 'up':\n                r = rows.indexOf(y - 1);\n                y = r < 0 ? y : rows.offsetOf(r);\n                break;\n            case 'down':\n                r = rows.indexOf(y);\n                y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n                break;\n            case 'left':\n                c = columns.indexOf(x - 1);\n                x = c < 0 ? x : columns.offsetOf(c);\n                break;\n            case 'right':\n                c = columns.indexOf(x);\n                x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(x, y);\n    };\n    /**\n     * Scroll to the specified offset position.\n     *\n     * @param x - The desired X position.\n     *\n     * @param y - The desired Y position.\n     */\n    DataGrid.prototype.scrollTo = function (x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Update the scroll bar values with the desired position.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Post a scroll request message to the viewport.\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    };\n    /**\n     * Get the row count for a particular region in the data grid.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns The row count for the specified region.\n     */\n    DataGrid.prototype.rowCount = function (region) {\n        var count;\n        if (region === 'body') {\n            count = this._rowSections.count;\n        }\n        else {\n            count = this._columnHeaderSections.count;\n        }\n        return count;\n    };\n    /**\n     * Get the column count for a particular region in the data grid.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns The column count for the specified region.\n     */\n    DataGrid.prototype.columnCount = function (region) {\n        var count;\n        if (region === 'body') {\n            count = this._columnSections.count;\n        }\n        else {\n            count = this._rowHeaderSections.count;\n        }\n        return count;\n    };\n    /**\n     * Get the row at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param offset - The virtual offset of the row of interest.\n     *\n     * @returns The index of the row, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    DataGrid.prototype.rowAt = function (region, offset) {\n        // Bail early if the offset is negative.\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        var index = this._rowSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return -1;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Bail early if no row stretching is required.\n        if (ph <= bh) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= ph) {\n            return -1;\n        }\n        // Otherwise, return the last row.\n        return this._rowSections.count - 1;\n    };\n    /**\n     * Get the column at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param offset - The virtual offset of the column of interest.\n     *\n     * @returns The index of the column, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    DataGrid.prototype.columnAt = function (region, offset) {\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        var index = this._columnSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return -1;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Bail early if no column stretching is required.\n        if (pw <= bw) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= pw) {\n            return -1;\n        }\n        // Otherwise, return the last column.\n        return this._columnSections.count - 1;\n    };\n    /**\n     * Get the offset of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The offset of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last row has no effect on the return value.\n     */\n    DataGrid.prototype.rowOffset = function (region, index) {\n        var offset;\n        if (region === 'body') {\n            offset = this._rowSections.offsetOf(index);\n        }\n        else {\n            offset = this._columnHeaderSections.offsetOf(index);\n        }\n        return offset;\n    };\n    /**\n     * Get the offset of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The offset of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last column has no effect on the return value.\n     */\n    DataGrid.prototype.columnOffset = function (region, index) {\n        var offset;\n        if (region === 'body') {\n            offset = this._columnSections.offsetOf(index);\n        }\n        else {\n            offset = this._rowHeaderSections.offsetOf(index);\n        }\n        return offset;\n    };\n    /**\n     * Get the size of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The size of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    DataGrid.prototype.rowSize = function (region, index) {\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        // Fetch the row size.\n        var size = this._rowSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return size;\n        }\n        // Return early if its not the last row.\n        if (index < this._rowSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Return early if no stretching is needed.\n        if (ph <= bh) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (ph - bh);\n    };\n    /**\n     * Get the size of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The size of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    DataGrid.prototype.columnSize = function (region, index) {\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        // Fetch the column size.\n        var size = this._columnSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return size;\n        }\n        // Return early if its not the last column.\n        if (index < this._columnSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Return early if no stretching is needed.\n        if (pw <= bw) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (pw - bw);\n    };\n    /**\n     * Resize a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @param size - The desired size of the row.\n     */\n    DataGrid.prototype.resizeRow = function (region, index, size) {\n        var msg = new Private$1.RowResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Resize a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @param size - The desired size of the column.\n     */\n    DataGrid.prototype.resizeColumn = function (region, index, size) {\n        var msg = new Private$1.ColumnResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Reset modified rows to their default size.\n     *\n     * @param region - The row region of interest.\n     */\n    DataGrid.prototype.resetRows = function (region) {\n        switch (region) {\n            case 'all':\n                this._rowSections.reset();\n                this._columnHeaderSections.reset();\n                break;\n            case 'body':\n                this._rowSections.reset();\n                break;\n            case 'column-header':\n                this._columnHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * Reset modified columns to their default size.\n     *\n     * @param region - The column region of interest.\n     */\n    DataGrid.prototype.resetColumns = function (region) {\n        switch (region) {\n            case 'all':\n                this._columnSections.reset();\n                this._rowHeaderSections.reset();\n                break;\n            case 'body':\n                this._columnSections.reset();\n                break;\n            case 'row-header':\n                this._rowHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * Auto sizes column widths based on their text content.\n     * @param area which area to resize: 'body', 'row-header' or 'all'.\n     * @param padding padding added to resized columns (pixels).\n     * @param numCols specify cap on the number of column resizes (optional).\n     */\n    DataGrid.prototype.fitColumnNames = function (area, padding, numCols) {\n        if (area === void 0) { area = 'all'; }\n        if (padding === void 0) { padding = 15; }\n        // Attempt resizing only if a data model is present.\n        if (this.dataModel) {\n            // Tracking remaining columns to be resized if numCols arg passed.\n            var colsRemaining = numCols === undefined || numCols < 0 ? undefined : numCols;\n            if (area === 'row-header' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    var rowColumnCount = this.dataModel.columnCount('row-header');\n                    /*\n                      If we have more row-header columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - rowColumnCount < 0) {\n                        this._fitRowColumnHeaders(this.dataModel, padding, colsRemaining);\n                        colsRemaining = 0;\n                    }\n                    else {\n                        /*\n                          Otherwise the entire row-header column count can be resized.\n                          Resize all row-header columns and subtract from remaining\n                          column resize allowance.\n                        */\n                        this._fitRowColumnHeaders(this.dataModel, padding, rowColumnCount);\n                        colsRemaining = colsRemaining - rowColumnCount;\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitRowColumnHeaders(this.dataModel, padding);\n                }\n            }\n            if (area === 'body' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    var bodyColumnCount = this.dataModel.columnCount('body');\n                    /*\n                      If we have more body columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - bodyColumnCount < 0) {\n                        this._fitBodyColumnHeaders(this.dataModel, padding, colsRemaining);\n                        colsRemaining = 0;\n                    }\n                    else {\n                        /*\n                          Otherwise the entire body column count can be resized.\n                          Resize based on the smallest number between remaining\n                          resize allowance and body column count.\n                        */\n                        this._fitBodyColumnHeaders(this.dataModel, padding, Math.min(colsRemaining, bodyColumnCount));\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitBodyColumnHeaders(this.dataModel, padding);\n                }\n            }\n        }\n    };\n    /**\n     * Map a client position to local viewport coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The local viewport coordinates for the position.\n     */\n    DataGrid.prototype.mapToLocal = function (clientX, clientY) {\n        // Fetch the viewport rect.\n        var rect = this._viewport.node.getBoundingClientRect();\n        // Extract the rect coordinates.\n        var left = rect.left, top = rect.top;\n        // Round the rect coordinates for sub-pixel positioning.\n        left = Math.floor(left);\n        top = Math.floor(top);\n        // Convert to local coordinates.\n        var lx = clientX - left;\n        var ly = clientY - top;\n        // Return the local coordinates.\n        return { lx: lx, ly: ly };\n    };\n    /**\n     * Map a client position to virtual grid coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The virtual grid coordinates for the position.\n     */\n    DataGrid.prototype.mapToVirtual = function (clientX, clientY) {\n        // Convert to local coordiates.\n        var _a = this.mapToLocal(clientX, clientY), lx = _a.lx, ly = _a.ly;\n        // Convert to virtual coordinates.\n        var vx = lx + this.scrollX - this.headerWidth;\n        var vy = ly + this.scrollY - this.headerHeight;\n        // Return the local coordinates.\n        return { vx: vx, vy: vy };\n    };\n    /**\n     * Hit test the viewport for the given client position.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The hit test result, or `null` if the client\n     *   position is out of bounds.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row and/or column.\n     */\n    DataGrid.prototype.hitTest = function (clientX, clientY) {\n        // Convert the mouse position into local coordinates.\n        var _a = this.mapToLocal(clientX, clientY), lx = _a.lx, ly = _a.ly;\n        // Fetch the header and body dimensions.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        var pw = this.pageWidth;\n        // Adjust the body width for a stretched last column.\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Adjust the body height for a stretched last row.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        // Check for a corner header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx;\n            var vy = ly;\n            // Fetch the row and column index.\n            var row_1 = this.rowAt('column-header', vy);\n            var column_1 = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('row-header', column_1);\n            var oy = this.rowOffset('column-header', row_1);\n            // Fetch cell width and height.\n            var width_1 = this.columnSize('row-header', column_1);\n            var height_1 = this.rowSize('column-header', row_1);\n            // Compute the leading and trailing positions.\n            var x_1 = vx - ox;\n            var y_1 = vy - oy;\n            // Return the hit test result.\n            return { region: 'corner-header', row: row_1, column: column_1, x: x_1, y: y_1, width: width_1, height: height_1 };\n        }\n        // Check for a column header hit.\n        if (ly >= 0 && ly < hh && lx >= 0 && lx < hw + bw) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx + this._scrollX - hw;\n            var vy = ly;\n            // Fetch the row and column index.\n            var row_2 = this.rowAt('column-header', vy);\n            var column_2 = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('body', column_2);\n            var oy = this.rowOffset('column-header', row_2);\n            // Fetch the cell width and height.\n            var width_2 = this.columnSize('body', column_2);\n            var height_2 = this.rowSize('column-header', row_2);\n            // Compute the leading and trailing positions.\n            var x_2 = vx - ox;\n            var y_2 = vy - oy;\n            // Return the hit test result.\n            return { region: 'column-header', row: row_2, column: column_2, x: x_2, y: y_2, width: width_2, height: height_2 };\n        }\n        // Check for a row header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx;\n            var vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            var row_3 = this.rowAt('body', vy);\n            var column_3 = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('row-header', column_3);\n            var oy = this.rowOffset('body', row_3);\n            // Fetch the cell width and height.\n            var width_3 = this.columnSize('row-header', column_3);\n            var height_3 = this.rowSize('body', row_3);\n            // Compute the leading and trailing positions.\n            var x_3 = vx - ox;\n            var y_3 = vy - oy;\n            // Return the hit test result.\n            return { region: 'row-header', row: row_3, column: column_3, x: x_3, y: y_3, width: width_3, height: height_3 };\n        }\n        // Check for a body hit.\n        if (lx >= hw && lx < hw + bw && ly >= hh && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            var vx = lx + this._scrollX - hw;\n            var vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            var row_4 = this.rowAt('body', vy);\n            var column_4 = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            var ox = this.columnOffset('body', column_4);\n            var oy = this.rowOffset('body', row_4);\n            // Fetch the cell width and height.\n            var width_4 = this.columnSize('body', column_4);\n            var height_4 = this.rowSize('body', row_4);\n            // Compute the part coordinates.\n            var x_4 = vx - ox;\n            var y_4 = vy - oy;\n            // Return the result.\n            return { region: 'body', row: row_4, column: column_4, x: x_4, y: y_4, width: width_4, height: height_4 };\n        }\n        // Otherwise, it's a void space hit.\n        var row = -1;\n        var column = -1;\n        var x = -1;\n        var y = -1;\n        var width = -1;\n        var height = -1;\n        // Return the hit test result.\n        return { region: 'void', row: row, column: column, x: x, y: y, width: width, height: height };\n    };\n    /**\n     * Copy the current selection to the system clipboard.\n     *\n     * #### Notes\n     * The grid must have a data model and a selection model.\n     *\n     * The behavior can be configured via `DataGrid.copyConfig`.\n     */\n    DataGrid.prototype.copyToClipboard = function () {\n        var _a, _b;\n        // Fetch the data model.\n        var dataModel = this._dataModel;\n        // Bail early if there is no data model.\n        if (!dataModel) {\n            return;\n        }\n        // Fetch the selection model.\n        var selectionModel = this._selectionModel;\n        // Bail early if there is no selection model.\n        if (!selectionModel) {\n            return;\n        }\n        // Coerce the selections to an array.\n        var selections = toArray(selectionModel.selections());\n        // Bail early if there are no selections.\n        if (selections.length === 0) {\n            return;\n        }\n        // Alert that multiple selections cannot be copied.\n        if (selections.length > 1) {\n            alert('Cannot copy multiple grid selections.');\n            return;\n        }\n        // Fetch the model counts.\n        var br = dataModel.rowCount('body');\n        var bc = dataModel.columnCount('body');\n        // Bail early if there is nothing to copy.\n        if (br === 0 || bc === 0) {\n            return;\n        }\n        // Unpack the selection.\n        var _c = selections[0], r1 = _c.r1, c1 = _c.c1, r2 = _c.r2, c2 = _c.c2;\n        // Clamp the selection to the model bounds.\n        r1 = Math.max(0, Math.min(r1, br - 1));\n        c1 = Math.max(0, Math.min(c1, bc - 1));\n        r2 = Math.max(0, Math.min(r2, br - 1));\n        c2 = Math.max(0, Math.min(c2, bc - 1));\n        // Ensure the limits are well-orderd.\n        if (r2 < r1)\n            _a = [r2, r1], r1 = _a[0], r2 = _a[1];\n        if (c2 < c1)\n            _b = [c2, c1], c1 = _b[0], c2 = _b[1];\n        // Fetch the header counts.\n        var rhc = dataModel.columnCount('row-header');\n        var chr = dataModel.rowCount('column-header');\n        // Unpack the copy config.\n        var separator = this._copyConfig.separator;\n        var format = this._copyConfig.format;\n        var headers = this._copyConfig.headers;\n        var warningThreshold = this._copyConfig.warningThreshold;\n        // Compute the number of cells to be copied.\n        var rowCount = r2 - r1 + 1;\n        var colCount = c2 - c1 + 1;\n        switch (headers) {\n            case 'none':\n                rhc = 0;\n                chr = 0;\n                break;\n            case 'row':\n                chr = 0;\n                colCount += rhc;\n                break;\n            case 'column':\n                rhc = 0;\n                rowCount += chr;\n                break;\n            case 'all':\n                rowCount += chr;\n                colCount += rhc;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the total cell count.\n        var cellCount = rowCount * colCount;\n        // Allow the user to cancel a large copy request.\n        if (cellCount > warningThreshold) {\n            var msg = \"Copying \" + cellCount + \" cells may take a while. Continue?\";\n            if (!window.confirm(msg)) {\n                return;\n            }\n        }\n        // Set up the format args.\n        var args = {\n            region: 'body',\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: {}\n        };\n        // Allocate the array of rows.\n        var rows = new Array(rowCount);\n        // Iterate over the rows.\n        for (var j = 0; j < rowCount; ++j) {\n            // Allocate the array of cells.\n            var cells = new Array(colCount);\n            // Iterate over the columns.\n            for (var i = 0; i < colCount; ++i) {\n                // Set up the format variables.\n                var region = void 0;\n                var row = void 0;\n                var column = void 0;\n                // Populate the format variables.\n                if (j < chr && i < rhc) {\n                    region = 'corner-header';\n                    row = j;\n                    column = i;\n                }\n                else if (j < chr) {\n                    region = 'column-header';\n                    row = j;\n                    column = i - rhc + c1;\n                }\n                else if (i < rhc) {\n                    region = 'row-header';\n                    row = j - chr + r1;\n                    column = i;\n                }\n                else {\n                    region = 'body';\n                    row = j - chr + r1;\n                    column = i - rhc + c1;\n                }\n                // Populate the format args.\n                args.region = region;\n                args.row = row;\n                args.column = column;\n                args.value = dataModel.data(region, row, column);\n                args.metadata = dataModel.metadata(region, row, column);\n                // Format the cell.\n                cells[i] = format(args);\n            }\n            // Save the row of cells.\n            rows[j] = cells;\n        }\n        // Convert the cells into lines.\n        var lines = rows.map(function (cells) { return cells.join(separator); });\n        // Convert the lines into text.\n        var text = lines.join('\\n');\n        // Copy the text to the clipboard.\n        ClipboardExt.copyText(text);\n    };\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    DataGrid.prototype.processMessage = function (msg) {\n        // Ignore child show/hide messages. The data grid controls the\n        // visibility of its children, and will manually dispatch the\n        // fit-request messages as a result of visibility change.\n        if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n            return;\n        }\n        // Recompute the scroll bar minimums before the layout refits.\n        if (msg.type === 'fit-request') {\n            var vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n            var hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n            this._vScrollBarMinWidth = vsbLimits.minWidth;\n            this._hScrollBarMinHeight = hsbLimits.minHeight;\n        }\n        // Process all other messages as normal.\n        _super.prototype.processMessage.call(this, msg);\n    };\n    /**\n     * Intercept a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message to be sent to the handler.\n     *\n     * @returns `true` if the message should continue to be processed\n     *   as normal, or `false` if processing should cease immediately.\n     */\n    DataGrid.prototype.messageHook = function (handler, msg) {\n        // Process viewport messages.\n        if (handler === this._viewport) {\n            this._processViewportMessage(msg);\n            return true;\n        }\n        // Process horizontal scroll bar messages.\n        if (handler === this._hScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Process vertical scroll bar messages.\n        if (handler === this._vScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Ignore all other messages.\n        return true;\n    };\n    /**\n     * Handle the DOM events for the data grid.\n     *\n     * @param event - The DOM event sent to the data grid.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the data grid's DOM node. It\n     * should not be called directly by user code.\n     */\n    DataGrid.prototype.handleEvent = function (event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            case 'dblclick':\n                this._evtMouseDoubleClick(event);\n                break;\n            case 'mouseleave':\n                this._evtMouseLeave(event);\n                break;\n            case 'contextmenu':\n                this._evtContextMenu(event);\n                break;\n            case 'wheel':\n                this._evtWheel(event);\n                break;\n            case 'resize':\n                this._refreshDPI();\n                break;\n        }\n    };\n    /**\n     * A message handler invoked on an `'activate-request'` message.\n     */\n    DataGrid.prototype.onActivateRequest = function (msg) {\n        this.viewport.node.focus({ preventScroll: true });\n    };\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     */\n    DataGrid.prototype.onBeforeAttach = function (msg) {\n        window.addEventListener('resize', this);\n        this.node.addEventListener('wheel', this);\n        this._viewport.node.addEventListener('keydown', this);\n        this._viewport.node.addEventListener('mousedown', this);\n        this._viewport.node.addEventListener('mousemove', this);\n        this._viewport.node.addEventListener('dblclick', this);\n        this._viewport.node.addEventListener('mouseleave', this);\n        this._viewport.node.addEventListener('contextmenu', this);\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     */\n    DataGrid.prototype.onAfterDetach = function (msg) {\n        window.removeEventListener('resize', this);\n        this.node.removeEventListener('wheel', this);\n        this._viewport.node.removeEventListener('keydown', this);\n        this._viewport.node.removeEventListener('mousedown', this);\n        this._viewport.node.removeEventListener('mousemove', this);\n        this._viewport.node.removeEventListener('mouseleave', this);\n        this._viewport.node.removeEventListener('dblclick', this);\n        this._viewport.node.removeEventListener('contextmenu', this);\n        this._releaseMouse();\n    };\n    /**\n     * A message handler invoked on a `'before-show'` message.\n     */\n    DataGrid.prototype.onBeforeShow = function (msg) {\n        this.repaintContent();\n        this.repaintOverlay();\n    };\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    DataGrid.prototype.onResize = function (msg) {\n        if (this._editorController) {\n            this._editorController.cancel();\n        }\n        this._syncScrollState();\n    };\n    /**\n     * Schedule a repaint of all of the grid content.\n     */\n    DataGrid.prototype.repaintContent = function () {\n        var msg = new Private$1.PaintRequest('all', 0, 0, 0, 0);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Schedule a repaint of specific grid content.\n     */\n    DataGrid.prototype.repaintRegion = function (region, r1, c1, r2, c2) {\n        var msg = new Private$1.PaintRequest(region, r1, c1, r2, c2);\n        MessageLoop.postMessage(this._viewport, msg);\n    };\n    /**\n     * Schedule a repaint of the overlay.\n     */\n    DataGrid.prototype.repaintOverlay = function () {\n        MessageLoop.postMessage(this._viewport, Private$1.OverlayPaintRequest);\n    };\n    /**\n     * Ensure the canvas is at least the specified size.\n     *\n     * This method will retain the valid canvas content.\n     */\n    DataGrid.prototype._resizeCanvasIfNeeded = function (width, height) {\n        // Scale the size by the dpi ratio.\n        width = width * this._dpiRatio;\n        height = height * this._dpiRatio;\n        // Compute the maximum canvas size for the given width and height.\n        var maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n        var maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n        // Get the current size of the canvas.\n        var curW = this._canvas.width;\n        var curH = this._canvas.height;\n        // Bail early if the canvas size is within bounds.\n        if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n            return;\n        }\n        // Compute the expanded canvas size.\n        var expW = maxW - 512;\n        var expH = maxH - 512;\n        // Set the transforms to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Resize the buffer if needed.\n        if (curW < width) {\n            this._buffer.width = expW;\n        }\n        else if (curW > maxW) {\n            this._buffer.width = maxW;\n        }\n        // Resize the buffer height if needed.\n        if (curH < height) {\n            this._buffer.height = expH;\n        }\n        else if (curH > maxH) {\n            this._buffer.height = maxH;\n        }\n        // Test whether there is content to blit.\n        var needBlit = curH > 0 && curH > 0 && width > 0 && height > 0;\n        // Copy the valid canvas content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._canvas, 0, 0);\n        }\n        // Resize the canvas width if needed.\n        if (curW < width) {\n            this._canvas.width = expW;\n            this._canvas.style.width = expW / this._dpiRatio + \"px\";\n        }\n        else if (curW > maxW) {\n            this._canvas.width = maxW;\n            this._canvas.style.width = maxW / this._dpiRatio + \"px\";\n        }\n        // Resize the canvas height if needed.\n        if (curH < height) {\n            this._canvas.height = expH;\n            this._canvas.style.height = expH / this._dpiRatio + \"px\";\n        }\n        else if (curH > maxH) {\n            this._canvas.height = maxH;\n            this._canvas.style.height = maxH / this._dpiRatio + \"px\";\n        }\n        // Copy the valid canvas content from the buffer if needed.\n        if (needBlit) {\n            this._canvasGC.drawImage(this._buffer, 0, 0);\n        }\n        // Copy the valid overlay content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._overlay, 0, 0);\n        }\n        // Resize the overlay width if needed.\n        if (curW < width) {\n            this._overlay.width = expW;\n            this._overlay.style.width = expW / this._dpiRatio + \"px\";\n        }\n        else if (curW > maxW) {\n            this._overlay.width = maxW;\n            this._overlay.style.width = maxW / this._dpiRatio + \"px\";\n        }\n        // Resize the overlay height if needed.\n        if (curH < height) {\n            this._overlay.height = expH;\n            this._overlay.style.height = expH / this._dpiRatio + \"px\";\n        }\n        else if (curH > maxH) {\n            this._overlay.height = maxH;\n            this._overlay.style.height = maxH / this._dpiRatio + \"px\";\n        }\n        // Copy the valid overlay content from the buffer if needed.\n        if (needBlit) {\n            this._overlayGC.drawImage(this._buffer, 0, 0);\n        }\n    };\n    /**\n     * Sync the scroll bars and scroll state with the viewport.\n     *\n     * #### Notes\n     * If the visibility of either scroll bar changes, a synchronous\n     * fit-request will be dispatched to the data grid to immediately\n     * resize the viewport.\n     */\n    DataGrid.prototype._syncScrollState = function () {\n        // Fetch the viewport dimensions.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        // Get the current scroll bar visibility.\n        var hasVScroll = !this._vScrollBar.isHidden;\n        var hasHScroll = !this._hScrollBar.isHidden;\n        // Get the minimum sizes of the scroll bars.\n        var vsw = this._vScrollBarMinWidth;\n        var hsh = this._hScrollBarMinHeight;\n        // Get the page size as if no scroll bars are visible.\n        var apw = pw + (hasVScroll ? vsw : 0);\n        var aph = ph + (hasHScroll ? hsh : 0);\n        // Test whether scroll bars are needed for the adjusted size.\n        var needVScroll = aph < bh - 1;\n        var needHScroll = apw < bw - 1;\n        // Re-test the horizontal scroll if a vertical scroll is needed.\n        if (needVScroll && !needHScroll) {\n            needHScroll = apw - vsw < bw - 1;\n        }\n        // Re-test the vertical scroll if a horizontal scroll is needed.\n        if (needHScroll && !needVScroll) {\n            needVScroll = aph - hsh < bh - 1;\n        }\n        // If the visibility changes, immediately refit the grid.\n        if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n            this._vScrollBar.setHidden(!needVScroll);\n            this._hScrollBar.setHidden(!needHScroll);\n            this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n            MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n        }\n        // Update the scroll bar limits.\n        this._vScrollBar.maximum = this.maxScrollY;\n        this._vScrollBar.page = this.pageHeight;\n        this._hScrollBar.maximum = this.maxScrollX;\n        this._hScrollBar.page = this.pageWidth;\n        // Re-clamp the scroll position.\n        this._scrollTo(this._scrollX, this._scrollY);\n    };\n    /**\n     * Sync the viewport to the given scroll position.\n     *\n     * #### Notes\n     * This schedules a full repaint and syncs the scroll state.\n     */\n    DataGrid.prototype._syncViewport = function () {\n        this.repaintContent();\n        this.repaintOverlay();\n        this._syncScrollState();\n    };\n    /**\n     * Process a message sent to the viewport\n     */\n    DataGrid.prototype._processViewportMessage = function (msg) {\n        switch (msg.type) {\n            case 'resize':\n                this._onViewportResize(msg);\n                break;\n            case 'scroll-request':\n                this._onViewportScrollRequest(msg);\n                break;\n            case 'paint-request':\n                this._onViewportPaintRequest(msg);\n                break;\n            case 'overlay-paint-request':\n                this._onViewportOverlayPaintRequest(msg);\n                break;\n            case 'row-resize-request':\n                this._onViewportRowResizeRequest(msg);\n                break;\n            case 'column-resize-request':\n                this._onViewportColumnResizeRequest(msg);\n                break;\n        }\n    };\n    /**\n     * A message hook invoked on a viewport `'resize'` message.\n     */\n    DataGrid.prototype._onViewportResize = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Unpack the message data.\n        var width = msg.width, height = msg.height;\n        // Measure the viewport node if the dimensions are unknown.\n        if (width === -1) {\n            width = this._viewport.node.offsetWidth;\n        }\n        if (height === -1) {\n            height = this._viewport.node.offsetHeight;\n        }\n        // Round the dimensions to the nearest pixel.\n        width = Math.round(width);\n        height = Math.round(height);\n        // Get the current size of the viewport.\n        var oldWidth = this._viewportWidth;\n        var oldHeight = this._viewportHeight;\n        // Updated internal viewport size.\n        this._viewportWidth = width;\n        this._viewportHeight = height;\n        // Resize the canvas if needed.\n        this._resizeCanvasIfNeeded(width, height);\n        // Bail early if there is nothing to paint.\n        if (width === 0 || height === 0) {\n            return;\n        }\n        // Paint the whole grid if the old size was zero.\n        if (oldWidth === 0 || oldHeight === 0) {\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Paint the right edge as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n            var x = Math.min(this.headerWidth + bx, oldWidth);\n            this.paintContent(x, 0, width - x, height);\n        }\n        else if (width > oldWidth) {\n            this.paintContent(oldWidth, 0, width - oldWidth + 1, height);\n        }\n        // Paint the bottom edge as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var by = this._rowSections.offsetOf(this._rowSections.count - 1);\n            var y = Math.min(this.headerHeight + by, oldHeight);\n            this.paintContent(0, y, width, height - y);\n        }\n        else if (height > oldHeight) {\n            this.paintContent(0, oldHeight, width, height - oldHeight + 1);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * A message hook invoked on a viewport `'scroll-request'` message.\n     */\n    DataGrid.prototype._onViewportScrollRequest = function (msg) {\n        this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n    };\n    /**\n     * A message hook invoked on a viewport `'paint-request'` message.\n     */\n    DataGrid.prototype._onViewportPaintRequest = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Set up the paint limits.\n        var xMin = 0;\n        var yMin = 0;\n        var xMax = this._viewportWidth - 1;\n        var yMax = this._viewportHeight - 1;\n        // Fetch the scroll position.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Fetch the header dimensions.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Fetch the section lists.\n        var rs = this._rowSections;\n        var cs = this._columnSections;\n        var rhs = this._rowHeaderSections;\n        var chs = this._columnHeaderSections;\n        // Unpack the message data.\n        var region = msg.region, r1 = msg.r1, c1 = msg.c1, r2 = msg.r2, c2 = msg.c2;\n        // Set up the paint variables.\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        // Fill the paint variables based on the paint region.\n        switch (region) {\n            case 'all':\n                x1 = xMin;\n                y1 = yMin;\n                x2 = xMax;\n                y2 = yMax;\n                break;\n            case 'body':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'row-header':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = rhs.extentOf(c2);\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'column-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = chs.offsetOf(r1);\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = chs.extentOf(r2);\n                break;\n            case 'corner-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = chs.offsetOf(r1);\n                x2 = rhs.extentOf(c2);\n                y2 = chs.extentOf(r2);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Bail early if the dirty rect is outside the bounds.\n        if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n            return;\n        }\n        // Clamp the dirty rect to the paint bounds.\n        x1 = Math.max(xMin, Math.min(x1, xMax));\n        y1 = Math.max(yMin, Math.min(y1, yMax));\n        x2 = Math.max(xMin, Math.min(x2, xMax));\n        y2 = Math.max(yMin, Math.min(y2, yMax));\n        // Paint the content of the dirty rect.\n        this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    };\n    /**\n     * A message hook invoked on a viewport `'overlay-paint-request'` message.\n     */\n    DataGrid.prototype._onViewportOverlayPaintRequest = function (msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Paint the content of the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * A message hook invoked on a viewport `'row-resize-request'` message.\n     */\n    DataGrid.prototype._onViewportRowResizeRequest = function (msg) {\n        if (msg.region === 'body') {\n            this._resizeRow(msg.index, msg.size);\n        }\n        else {\n            this._resizeColumnHeader(msg.index, msg.size);\n        }\n    };\n    /**\n     * A message hook invoked on a viewport `'column-resize-request'` message.\n     */\n    DataGrid.prototype._onViewportColumnResizeRequest = function (msg) {\n        if (msg.region === 'body') {\n            this._resizeColumn(msg.index, msg.size);\n        }\n        else {\n            this._resizeRowHeader(msg.index, msg.size);\n        }\n    };\n    /**\n     * Handle the `thumbMoved` signal from a scroll bar.\n     */\n    DataGrid.prototype._onThumbMoved = function (sender) {\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    };\n    /**\n     * Handle the `pageRequested` signal from a scroll bar.\n     */\n    DataGrid.prototype._onPageRequested = function (sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n        }\n    };\n    /**\n     * Handle the `stepRequested` signal from a scroll bar.\n     */\n    DataGrid.prototype._onStepRequested = function (sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n        }\n    };\n    /**\n     * A signal handler for the data model `changed` signal.\n     */\n    DataGrid.prototype._onDataModelChanged = function (sender, args) {\n        switch (args.type) {\n            case 'rows-inserted':\n                this._onRowsInserted(args);\n                break;\n            case 'columns-inserted':\n                this._onColumnsInserted(args);\n                break;\n            case 'rows-removed':\n                this._onRowsRemoved(args);\n                break;\n            case 'columns-removed':\n                this._onColumnsRemoved(args);\n                break;\n            case 'rows-moved':\n                this._onRowsMoved(args);\n                break;\n            case 'columns-moved':\n                this._onColumnsMoved(args);\n                break;\n            case 'cells-changed':\n                this._onCellsChanged(args);\n                break;\n            case 'model-reset':\n                this._onModelReset(args);\n                break;\n            default:\n                throw 'unreachable';\n        }\n    };\n    /**\n     * A signal handler for the selection model `changed` signal.\n     */\n    DataGrid.prototype._onSelectionsChanged = function (sender) {\n        this.repaintOverlay();\n    };\n    /**\n     * Handle rows being inserted in the data model.\n     */\n    DataGrid.prototype._onRowsInserted = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.insert(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns being inserted into the data model.\n     */\n    DataGrid.prototype._onColumnsInserted = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.insert(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle rows being removed from the data model.\n     */\n    DataGrid.prototype._onRowsRemoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.remove(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns being removed from the data model.\n     */\n    DataGrid.prototype._onColumnsRemoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.remove(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle rows moving in the data model.\n     */\n    DataGrid.prototype._onRowsMoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span, destination = args.destination;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        var r1 = Math.min(index, destination);\n        // Compute the last affected index.\n        var r2 = Math.max(index + span - 1, destination + span - 1);\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', r1, 0, r2, Infinity);\n            this.repaintRegion('row-header', r1, 0, r2, Infinity);\n        }\n        else {\n            this.repaintRegion('column-header', r1, 0, r2, Infinity);\n            this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle columns moving in the data model.\n     */\n    DataGrid.prototype._onColumnsMoved = function (args) {\n        // Unpack the arg data.\n        var region = args.region, index = args.index, span = args.span, destination = args.destination;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        var list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Compute the first affected index.\n        var c1 = Math.min(index, destination);\n        // Compute the last affected index.\n        var c2 = Math.max(index + span - 1, destination + span - 1);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', 0, c1, Infinity, c2);\n            this.repaintRegion('column-header', 0, c1, Infinity, c2);\n        }\n        else {\n            this.repaintRegion('row-header', 0, c1, Infinity, c2);\n            this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * Handle cells changing in the data model.\n     */\n    DataGrid.prototype._onCellsChanged = function (args) {\n        // Unpack the arg data.\n        var region = args.region, row = args.row, column = args.column, rowSpan = args.rowSpan, columnSpan = args.columnSpan;\n        // Bail early if there are no cells to modify.\n        if (rowSpan <= 0 && columnSpan <= 0) {\n            return;\n        }\n        // Compute the changed cell bounds.\n        var r1 = row;\n        var c1 = column;\n        var r2 = r1 + rowSpan - 1;\n        var c2 = c1 + columnSpan - 1;\n        // Schedule a repaint of the cell content.\n        this.repaintRegion(region, r1, c1, r2, c2);\n    };\n    /**\n     * Handle a full data model reset.\n     */\n    DataGrid.prototype._onModelReset = function (args) {\n        // Look up the various current section counts.\n        var nr = this._rowSections.count;\n        var nc = this._columnSections.count;\n        var nrh = this._rowHeaderSections.count;\n        var nch = this._columnHeaderSections.count;\n        // Compute the delta count for each region.\n        var dr = this._dataModel.rowCount('body') - nr;\n        var dc = this._dataModel.columnCount('body') - nc;\n        var drh = this._dataModel.columnCount('row-header') - nrh;\n        var dch = this._dataModel.rowCount('column-header') - nch;\n        // Update the row sections, if needed.\n        if (dr > 0) {\n            this._rowSections.insert(nr, dr);\n        }\n        else if (dr < 0) {\n            this._rowSections.remove(nr + dr, -dr);\n        }\n        // Update the column sections, if needed.\n        if (dc > 0) {\n            this._columnSections.insert(nc, dc);\n        }\n        else if (dc < 0) {\n            this._columnSections.remove(nc + dc, -dc);\n        }\n        // Update the row header sections, if needed.\n        if (drh > 0) {\n            this._rowHeaderSections.insert(nrh, drh);\n        }\n        else if (drh < 0) {\n            this._rowHeaderSections.remove(nrh + drh, -drh);\n        }\n        // Update the column header sections, if needed.\n        if (dch > 0) {\n            this._columnHeaderSections.insert(nch, dch);\n        }\n        else if (dch < 0) {\n            this._columnHeaderSections.remove(nch + dch, -dch);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    };\n    /**\n     * A signal handler for the renderer map `changed` signal.\n     */\n    DataGrid.prototype._onRenderersChanged = function () {\n        this.repaintContent();\n    };\n    /**\n     * Handle the `'keydown'` event for the data grid.\n     */\n    DataGrid.prototype._evtKeyDown = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._keyHandler) {\n            this._keyHandler.onKeyDown(this, event);\n        }\n    };\n    /**\n     * Handle the `'mousedown'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseDown = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Activate the grid.\n        this.activate();\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Add the extra document listeners.\n        document.addEventListener('keydown', this, true);\n        document.addEventListener('mouseup', this, true);\n        document.addEventListener('mousedown', this, true);\n        document.addEventListener('mousemove', this, true);\n        document.addEventListener('contextmenu', this, true);\n        // Flip the mousedown flag.\n        this._mousedown = true;\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDown(this, event);\n        }\n    };\n    /**\n     * Handle the `'mousemove'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseMove = function (event) {\n        // Stop the event propagation if the mouse is down.\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // Bail if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        if (this._mousedown) {\n            this._mouseHandler.onMouseMove(this, event);\n        }\n        else {\n            this._mouseHandler.onMouseHover(this, event);\n        }\n    };\n    /**\n     * Handle the `'mouseup'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseUp = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseUp(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    };\n    /**\n     * Handle the `'dblclick'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseDoubleClick = function (event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDoubleClick(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    };\n    /**\n     * Handle the `'mouseleave'` event for the data grid.\n     */\n    DataGrid.prototype._evtMouseLeave = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onMouseLeave(this, event);\n        }\n    };\n    /**\n     * Handle the `'contextmenu'` event for the data grid.\n     */\n    DataGrid.prototype._evtContextMenu = function (event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onContextMenu(this, event);\n        }\n    };\n    /**\n     * Handle the `'wheel'` event for the data grid.\n     */\n    DataGrid.prototype._evtWheel = function (event) {\n        // Ignore the event if `accel` is held.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Bail early if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        this._mouseHandler.onWheel(this, event);\n    };\n    /**\n     * Release the mouse grab.\n     */\n    DataGrid.prototype._releaseMouse = function () {\n        // Clear the mousedown flag.\n        this._mousedown = false;\n        // Relase the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.release();\n        }\n        // Remove the document listeners.\n        document.removeEventListener('keydown', this, true);\n        document.removeEventListener('mouseup', this, true);\n        document.removeEventListener('mousedown', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('contextmenu', this, true);\n    };\n    /**\n     * Refresh the dpi ratio.\n     */\n    DataGrid.prototype._refreshDPI = function () {\n        // Get the best integral value for the dpi ratio.\n        var dpiRatio = Math.ceil(window.devicePixelRatio);\n        // Bail early if the computed dpi ratio has not changed.\n        if (this._dpiRatio === dpiRatio) {\n            return;\n        }\n        // Update the internal dpi ratio.\n        this._dpiRatio = dpiRatio;\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n        // Update the canvas size for the new dpi ratio.\n        this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n        // Ensure the canvas style is scaled for the new ratio.\n        this._canvas.style.width = this._canvas.width / this._dpiRatio + \"px\";\n        this._canvas.style.height = this._canvas.height / this._dpiRatio + \"px\";\n        // Ensure the overlay style is scaled for the new ratio.\n        this._overlay.style.width = this._overlay.width / this._dpiRatio + \"px\";\n        this._overlay.style.height = this._overlay.height / this._dpiRatio + \"px\";\n    };\n    /**\n     * Resize a row section immediately.\n     */\n    DataGrid.prototype._resizeRow = function (index, size) {\n        // Look up the target section list.\n        var list = this._rowSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Render entire grid if scrolling merged cells grid\n        var paintEverything = Private$1.shouldPaintEverything(this._dataModel);\n        if (paintEverything) {\n            this.paintContent(0, 0, vw, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the column header height.\n        var hh = this.headerHeight;\n        // Compute the viewport offset of the section.\n        var offset = list.offsetOf(index) + hh - this._scrollY;\n        // Bail early if there is nothing to paint.\n        if (hh >= vh || offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hh) {\n            this._scrollY += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        var pos = Math.max(hh, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, pos, vw, vh - pos);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the X blit dimensions.\n        var sx = 0;\n        var sw = vw;\n        var dx = 0;\n        // Compute the Y blit dimensions.\n        var sy;\n        var sh;\n        var dy;\n        if (offset + newSize <= hh) {\n            sy = hh - delta;\n            sh = vh - sy;\n            dy = hh;\n        }\n        else {\n            sy = offset + oldSize;\n            sh = vh - sy;\n            dy = sy + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hh) {\n            this.paintContent(0, pos, vw, offset + newSize - pos);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var r = this._rowSections.count - 1;\n            var y = hh + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a column section immediately.\n     */\n    DataGrid.prototype._resizeColumn = function (index, size) {\n        // Look up the target section list.\n        var list = this._columnSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Render entire grid if scrolling merged cells grid\n        var paintEverything = Private$1.shouldPaintEverything(this._dataModel);\n        if (paintEverything) {\n            this.paintContent(0, 0, vw, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the row header width.\n        var hw = this.headerWidth;\n        // Compute the viewport offset of the section.\n        var offset = list.offsetOf(index) + hw - this._scrollX;\n        // Bail early if there is nothing to paint.\n        if (hw >= vw || offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hw) {\n            this._scrollX += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        var pos = Math.max(hw, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(pos, 0, vw - pos, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the Y blit dimensions.\n        var sy = 0;\n        var sh = vh;\n        var dy = 0;\n        // Compute the X blit dimensions.\n        var sx;\n        var sw;\n        var dx;\n        if (offset + newSize <= hw) {\n            sx = hw - delta;\n            sw = vw - sx;\n            dx = hw;\n        }\n        else {\n            sx = offset + oldSize;\n            sw = vw - sx;\n            dx = sx + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hw) {\n            this.paintContent(pos, 0, offset + newSize - pos, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var c = this._columnSections.count - 1;\n            var x = hw + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a row header section immediately.\n     */\n    DataGrid.prototype._resizeRowHeader = function (index, size) {\n        // Look up the target section list.\n        var list = this._rowHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Render entire grid if scrolling merged cells grid\n        var paintEverything = Private$1.shouldPaintEverything(this._dataModel);\n        if (paintEverything) {\n            this.paintContent(0, 0, vw, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the offset of the section.\n        var offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(offset, 0, vw - offset, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        var sx = offset + oldSize;\n        var sy = 0;\n        var sw = vw - sx;\n        var sh = vh;\n        var dx = sx + delta;\n        var dy = 0;\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(offset, 0, newSize, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            var c = this._columnSections.count - 1;\n            var x = this.headerWidth + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta + 1, vh);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Resize a column header section immediately.\n     */\n    DataGrid.prototype._resizeColumnHeader = function (index, size) {\n        // Look up the target section list.\n        var list = this._columnHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        var oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        var newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Render entire grid if scrolling merged cells grid\n        var paintEverything = Private$1.shouldPaintEverything(this._dataModel);\n        if (paintEverything) {\n            this.paintContent(0, 0, vw, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Compute the size delta.\n        var delta = newSize - oldSize;\n        // Look up the offset of the section.\n        var offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, offset, vw, vh - offset);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        var sx = 0;\n        var sy = offset + oldSize;\n        var sw = vw;\n        var sh = vh - sy;\n        var dx = 0;\n        var dy = sy + delta;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(0, offset, vw, newSize);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            var r = this._rowSections.count - 1;\n            var y = this.headerHeight + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta + 1);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    };\n    /**\n     * Scroll immediately to the specified offset position.\n     */\n    DataGrid.prototype._scrollTo = function (x, y) {\n        // Bail if no data model found.\n        if (!this.dataModel) {\n            return;\n        }\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Synchronize the scroll bar values.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Compute the delta scroll amount.\n        var dx = x - this._scrollX;\n        var dy = y - this._scrollY;\n        // Bail early if there is no effective scroll.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the current size of the viewport.\n        var width = this._viewportWidth;\n        var height = this._viewportHeight;\n        // Bail early if the viewport is empty.\n        if (width === 0 || height === 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = this.headerHeight;\n        // Get the visible content dimensions.\n        var contentWidth = width - contentX;\n        var contentHeight = height - contentY;\n        // Bail early if there is no content to draw.\n        if (contentWidth <= 0 && contentHeight <= 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Compute the area which needs painting for the `dx` scroll.\n        var dxArea = 0;\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                dxArea = contentWidth * height;\n            }\n            else {\n                dxArea = Math.abs(dx) * height;\n            }\n        }\n        // Compute the area which needs painting for the `dy` scroll.\n        var dyArea = 0;\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                dyArea = width * contentHeight;\n            }\n            else {\n                dyArea = width * Math.abs(dy);\n            }\n        }\n        // If the area sum is larger than the total, paint everything.\n        if (dxArea + dyArea >= width * height) {\n            this._scrollX = x;\n            this._scrollY = y;\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Update the internal Y scroll position.\n        this._scrollY = y;\n        // Scroll the Y axis if needed. If the scroll distance exceeds\n        // the visible height, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                this.paintContent(0, contentY, width, contentHeight);\n            }\n            else {\n                var x_5 = 0;\n                var y_5 = dy < 0 ? contentY : contentY + dy;\n                var w = width;\n                var h = contentHeight - Math.abs(dy);\n                this._blitContent(this._canvas, x_5, y_5, w, h, x_5, y_5 - dy);\n                this.paintContent(0, dy < 0 ? contentY : height - dy, width, Math.abs(dy));\n            }\n        }\n        // Update the internal X scroll position.\n        this._scrollX = x;\n        // Scroll the X axis if needed. If the scroll distance exceeds\n        // the visible width, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                this.paintContent(contentX, 0, contentWidth, height);\n            }\n            else {\n                var x_6 = dx < 0 ? contentX : contentX + dx;\n                var y_6 = 0;\n                var w = contentWidth - Math.abs(dx);\n                var h = height;\n                this._blitContent(this._canvas, x_6, y_6, w, h, x_6 - dx, y_6);\n                this.paintContent(dx < 0 ? contentX : width - dx, 0, Math.abs(dx), height);\n            }\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    };\n    /**\n     * Blit content into the on-screen grid canvas.\n     *\n     * The rect should be expressed in viewport coordinates.\n     *\n     * This automatically accounts for the dpi ratio.\n     */\n    DataGrid.prototype._blitContent = function (source, x, y, w, h, dx, dy) {\n        // Scale the blit coordinates by the dpi ratio.\n        x *= this._dpiRatio;\n        y *= this._dpiRatio;\n        w *= this._dpiRatio;\n        h *= this._dpiRatio;\n        dx *= this._dpiRatio;\n        dy *= this._dpiRatio;\n        // Save the current gc state.\n        this._canvasGC.save();\n        // Set the transform to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Draw the specified content.\n        this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n        // Restore the gc state.\n        this._canvasGC.restore();\n    };\n    /**\n     * Paint the grid content for the given dirty rect.\n     *\n     * The rect should be expressed in valid viewport coordinates.\n     *\n     * This is the primary paint entry point. The individual `_draw*`\n     * methods should not be invoked directly. This method dispatches\n     * to the drawing methods in the correct order.\n     */\n    DataGrid.prototype.paintContent = function (rx, ry, rw, rh) {\n        // Scale the canvas and buffer GC for the dpi ratio.\n        this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the dirty rect of all content.\n        this._canvasGC.clearRect(rx, ry, rw, rh);\n        // Draw the void region.\n        this._drawVoidRegion(rx, ry, rw, rh);\n        // Draw the body region.\n        this._drawBodyRegion(rx, ry, rw, rh);\n        // Draw the row header region.\n        this._drawRowHeaderRegion(rx, ry, rw, rh);\n        // Draw the column header region.\n        this._drawColumnHeaderRegion(rx, ry, rw, rh);\n        // Draw the corner header region.\n        this.drawCornerHeaderRegion(rx, ry, rw, rh);\n    };\n    /**\n     * Resizes body column headers so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    DataGrid.prototype._fitBodyColumnHeaders = function (dataModel, padding, numCols) {\n        // Get the body column count\n        var bodyColumnCount = numCols === undefined ? dataModel.columnCount('body') : numCols;\n        for (var i = 0; i < bodyColumnCount; i++) {\n            /*\n              if we're working with nested column headers,\n              retrieve the nested levels and iterate on them.\n            */\n            var numRows = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width vertically, across\n              all nested rows under a given column number.\n            */\n            var maxWidth = 0;\n            for (var j = 0; j < numRows; j++) {\n                var cellValue = dataModel.data('column-header', j, i);\n                // Basic CellConfig object to get the renderer for that cell\n                var config = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    region: 'column-header',\n                    row: 0,\n                    column: i,\n                    value: null,\n                    metadata: DataModel.emptyMetadata\n                };\n                // Get the renderer for the given cell\n                var renderer = this.cellRenderers.get(config);\n                // Use the canvas context to measure the cell's text width\n                var gc = this.canvasGC;\n                gc.font = CellRenderer.resolveOption(renderer.font, config);\n                var textWidth = gc.measureText(cellValue).width;\n                // Update the maximum width for that column.\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('body', i, maxWidth + padding);\n        }\n    };\n    /**\n     * Resizes row header columns so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    DataGrid.prototype._fitRowColumnHeaders = function (dataModel, padding, numCols) {\n        /*\n          if we're working with nested row headers,\n          retrieve the nested levels and iterate on them.\n        */\n        var rowColumnCount = numCols === undefined ? dataModel.columnCount('row-header') : numCols;\n        for (var i = 0; i < rowColumnCount; i++) {\n            var numCols_1 = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width vertically, across\n              all nested columns under a given row index.\n            */\n            var maxWidth = 0;\n            for (var j = 0; j < numCols_1; j++) {\n                var cellValue = dataModel.data('corner-header', j, i);\n                // Basic CellConfig object to get the renderer for that cell.\n                var config = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    region: 'column-header',\n                    row: 0,\n                    column: i,\n                    value: null,\n                    metadata: DataModel.emptyMetadata\n                };\n                // Get the renderer for the given cell.\n                var renderer = this.cellRenderers.get(config);\n                // Use the canvas context to measure the cell's text width\n                var gc = this.canvasGC;\n                gc.font = CellRenderer.resolveOption(renderer.font, config);\n                var textWidth = gc.measureText(cellValue).width;\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('row-header', i, maxWidth + padding);\n        }\n    };\n    /**\n     * Paint the overlay content for the entire grid.\n     *\n     * This is the primary overlay paint entry point. The individual\n     * `_draw*` methods should not be invoked directly. This method\n     * dispatches to the drawing methods in the correct order.\n     */\n    DataGrid.prototype._paintOverlay = function () {\n        // Scale the overlay GC for the dpi ratio.\n        this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the overlay of all content.\n        this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n        // Draw the body selections.\n        this._drawBodySelections();\n        // Draw the row header selections.\n        this._drawRowHeaderSelections();\n        // Draw the column header selections.\n        this._drawColumnHeaderSelections();\n        // Draw the cursor.\n        this._drawCursor();\n        // Draw the shadows.\n        this._drawShadows();\n    };\n    /**\n     * Draw the void region for the dirty rect.\n     */\n    DataGrid.prototype._drawVoidRegion = function (rx, ry, rw, rh) {\n        // Look up the void color.\n        var color = this._style.voidColor;\n        // Bail if there is no void color.\n        if (!color) {\n            return;\n        }\n        // Fill the dirty rect with the void color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(rx, ry, rw, rh);\n    };\n    /**\n     * Draw the body region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawBodyRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this._columnSections.length - this._scrollX;\n        var contentH = this._rowSections.length - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var bw = this.bodyWidth;\n        var ph = this.pageHeight;\n        var pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = Math.max(rx, contentX);\n        var y1 = Math.max(ry, contentY);\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        var c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        var r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        var c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        var y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is streched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            var dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Adjust the geometry if the last column is streched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            var dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'body',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            row: r1,\n            column: c1,\n            rowSizes: rowSizes,\n            columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.backgroundColor);\n        // Draw the row background.\n        this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n        // Draw the column background.\n        this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.horizontalGridLineColor || this._style.gridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.verticalGridLineColor || this._style.gridLineColor);\n    };\n    /**\n     * Draw the row header region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawRowHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.headerWidth;\n        var contentH = this.bodyHeight - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = 0;\n        var contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = rx;\n        var y1 = Math.max(ry, contentY);\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        var c1 = this._rowHeaderSections.indexOf(x1);\n        var r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        var c2 = this._rowHeaderSections.indexOf(x2);\n        // Fetch max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._rowHeaderSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._rowHeaderSections.offsetOf(c1);\n        var y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is stretched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            var dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'row-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            row: r1,\n            column: c1,\n            rowSizes: rowSizes,\n            columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the column header region which intersects the dirty rect.\n     */\n    DataGrid.prototype._drawColumnHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.bodyWidth - this._scrollX;\n        var contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = this.headerWidth;\n        var contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = Math.max(rx, contentX);\n        var y1 = ry;\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._columnHeaderSections.indexOf(y1);\n        var c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        var r2 = this._columnHeaderSections.indexOf(y2);\n        var c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        var maxRow = this._columnHeaderSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        var y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last column is stretched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            var dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'column-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            row: r1,\n            column: c1,\n            rowSizes: rowSizes,\n            columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the corner header region which intersects the dirty rect.\n     */\n    DataGrid.prototype.drawCornerHeaderRegion = function (rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        var contentW = this.headerWidth;\n        var contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        var contentX = 0;\n        var contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Get the upper and lower bounds of the dirty content area.\n        var x1 = rx;\n        var y1 = ry;\n        var x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        var y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        var r1 = this._columnHeaderSections.indexOf(y1);\n        var c1 = this._rowHeaderSections.indexOf(x1);\n        var r2 = this._columnHeaderSections.indexOf(y2);\n        var c2 = this._rowHeaderSections.indexOf(x2);\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = this._columnHeaderSections.count - 1;\n        }\n        if (c2 < 0) {\n            c2 = this._rowHeaderSections.count - 1;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        var x = this._rowHeaderSections.offsetOf(c1);\n        var y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        var width = 0;\n        var height = 0;\n        // Allocate the section sizes arrays.\n        var rowSizes = new Array(r2 - r1 + 1);\n        var columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (var j = r1; j <= r2; ++j) {\n            var size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (var i = c1; i <= c2; ++i) {\n            var size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Create the paint region object.\n        var rgn = {\n            region: 'corner-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            row: r1,\n            column: c1,\n            rowSizes: rowSizes,\n            columnSizes: columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n    };\n    /**\n     * Draw the background for the given paint region.\n     */\n    DataGrid.prototype._drawBackground = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Unpack the region.\n        var xMin = rgn.xMin, yMin = rgn.yMin, xMax = rgn.xMax, yMax = rgn.yMax;\n        // Fill the region with the specified color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n    };\n    /**\n     * Draw the row background for the given paint region.\n     */\n    DataGrid.prototype._drawRowBackground = function (rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the X bounds for the row.\n        var x1 = Math.max(rgn.xMin, rgn.x);\n        var x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n        // Draw the background for the rows in the region.\n        for (var y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n            // Fetch the size of the row.\n            var size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the row.\n            var color = colorFn(rgn.row + j);\n            // Fill the row with the background color if needed.\n            if (color) {\n                var y1 = Math.max(rgn.yMin, y);\n                var y2 = Math.min(y + size - 1, rgn.yMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n    };\n    /**\n     * Draw the column background for the given paint region.\n     */\n    DataGrid.prototype._drawColumnBackground = function (rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the Y bounds for the column.\n        var y1 = Math.max(rgn.yMin, rgn.y);\n        var y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Draw the background for the columns in the region.\n        for (var x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            var size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the column.\n            var color = colorFn(rgn.column + i);\n            // Fill the column with the background color if needed.\n            if (color) {\n                var x1 = Math.max(rgn.xMin, x);\n                var x2 = Math.min(x + size - 1, rgn.xMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n    };\n    /**\n     * Returns column size\n     * @param region\n     * @param index\n     */\n    DataGrid.prototype._getColumnSize = function (region, index) {\n        if (region === 'corner-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        return this.columnSize(region, index);\n    };\n    /**\n     * Returns row size\n     * @param region\n     * @param index\n     */\n    DataGrid.prototype._getRowSize = function (region, index) {\n        if (region === 'corner-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        return this.rowSize(region, index);\n    };\n    /**\n     * Draw the cells for the given paint region.\n     */\n    DataGrid.prototype._drawCells = function (rgn) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Determine if the cell intersects with a merged group at row or column\n        var intersectingColumnGroups = CellGroup.getCellGroupsAtColumn(this._dataModel, rgn.region, rgn.column);\n        var intersectingRowGroups = CellGroup.getCellGroupsAtRow(this._dataModel, rgn.region, rgn.row);\n        // move the bounds of the region if edges of the region are part of a merge group.\n        // after the move, new region contains entirety of the merge groups\n        rgn = JSONExt.deepCopy(rgn);\n        var joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, {\n            r1: rgn.row,\n            r2: rgn.row + rgn.rowSizes.length - 1,\n            c1: rgn.column,\n            c2: rgn.column + rgn.columnSizes.length - 1\n        }, rgn.region);\n        for (var r = joinedGroup.r1; r < rgn.row; r++) {\n            var h = this._getRowSize(rgn.region, r);\n            rgn.y -= h;\n            rgn.rowSizes = [h].concat(rgn.rowSizes);\n        }\n        rgn.row = joinedGroup.r1;\n        for (var c = joinedGroup.c1; c < rgn.column; c++) {\n            var w = this._getColumnSize(rgn.region, c);\n            rgn.x -= w;\n            rgn.columnSizes = [w].concat(rgn.columnSizes);\n        }\n        rgn.column = joinedGroup.c1;\n        // Set up the cell config object for rendering.\n        var config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        var groupIndex = -1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        var gc = new GraphicsContext(this._bufferGC);\n        var height = 0;\n        // Loop over the columns in the region.\n        for (var x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            var xOffset = 0;\n            var yOffset = 0;\n            // Fetch the size of the column.\n            var width = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (width === 0) {\n                continue;\n            }\n            xOffset = width;\n            // Compute the column index.\n            var column = rgn.column + i;\n            // Update the config for the current column.\n            config.x = x;\n            config.width = width;\n            config.column = column;\n            // Loop over the rows in the column.\n            for (var y = rgn.y, j = 0, n_1 = rgn.rowSizes.length; j < n_1; ++j) {\n                // Fetch the size of the row.\n                height = rgn.rowSizes[j];\n                // Skip zero sized rows.\n                if (height === 0) {\n                    continue;\n                }\n                // Compute the row index.\n                var row = rgn.row + j;\n                groupIndex = CellGroup.getGroupIndex(this.dataModel, config.region, row, column);\n                yOffset = height;\n                /**\n                 * For merged cell regions, only rendering the merged region\n                 * if the \"parent\" cell is the one being painted. Bail otherwise.\n                 */\n                if (groupIndex !== -1) {\n                    var group = this.dataModel.group(config.region, groupIndex);\n                    if (group.r1 === row && group.c1 === column) {\n                        width = 0;\n                        for (var c = group.c1; c <= group.c2; c++) {\n                            width += this._getColumnSize(config.region, c);\n                        }\n                        height = 0;\n                        for (var r = group.r1; r <= group.r2; r++) {\n                            height += this._getRowSize(config.region, r);\n                        }\n                    }\n                    else {\n                        y += yOffset;\n                        continue;\n                    }\n                }\n                else {\n                    /**\n                     * Reset column width if we're rendering a column-header\n                     * which is not part of a merged cell group.\n                     */\n                    if (rgn.region == 'column-header') {\n                        width = rgn.columnSizes[i];\n                    }\n                }\n                // Clear the buffer rect for the cell.\n                gc.clearRect(x, y, width, height);\n                // Save the GC state.\n                gc.save();\n                // Get the value for the cell.\n                var value = void 0;\n                try {\n                    value = this._dataModel.data(rgn.region, row, column);\n                }\n                catch (err) {\n                    value = undefined;\n                    console.error(err);\n                }\n                // Get the metadata for the cell.\n                var metadata = void 0;\n                try {\n                    metadata = this._dataModel.metadata(rgn.region, row, column);\n                }\n                catch (err) {\n                    metadata = DataModel.emptyMetadata;\n                    console.error(err);\n                }\n                // Update the config for the current cell.\n                config.y = y;\n                config.height = height;\n                config.width = width;\n                config.row = row;\n                config.value = value;\n                config.metadata = metadata;\n                // Get the renderer for the cell.\n                var renderer = this._cellRenderers.get(config);\n                // Save the GC state.\n                gc.save();\n                // Paint the cell into the off-screen buffer.\n                try {\n                    renderer.paint(gc, config);\n                }\n                catch (err) {\n                    console.error(err);\n                }\n                // Restore the GC state.\n                gc.restore();\n                // Compute the actual X bounds for the cell.\n                var x1 = Math.max(rgn.xMin, config.x);\n                var x2 = Math.min(config.x + config.width - 1, rgn.xMax);\n                // Compute the actual Y bounds for the cell.\n                var y1 = Math.max(rgn.yMin, config.y);\n                var y2 = Math.min(config.y + config.height - 1, rgn.yMax);\n                if (intersectingColumnGroups.length !== 0 ||\n                    intersectingRowGroups.length !== 0) {\n                    if (x2 > x1 && y2 > y1) {\n                        this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n                    }\n                }\n                else {\n                    this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n                }\n                // Increment the running Y coordinate.\n                y += yOffset;\n            }\n            // Restore the GC state.\n            gc.restore();\n            // Increment the running X coordinate.\n            x += xOffset;\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    };\n    /**\n     * Draw the horizontal grid lines for the given paint region.\n     */\n    DataGrid.prototype._drawHorizontalGridLines = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the X bounds for the horizontal lines.\n        var x1 = Math.max(rgn.xMin, rgn.x);\n        // Begin the path for the grid lines.\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        // Fetch the number of grid lines to be drawn.\n        var n = rgn.rowSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastRow && ph > bh) {\n            if (rgn.row + n === this._rowSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the horizontal grid lines.\n        for (var y = rgn.y, j = 0; j < n; ++j) {\n            // Fetch the size of the row.\n            var size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            var xStart = 0;\n            var lineStarted = false;\n            var lines = [];\n            var leftCurrent = x1;\n            for (var c = rgn.column; c < rgn.column + rgn.columnSizes.length; c++) {\n                var cIndex = c - rgn.column;\n                var cellUp = [rgn.row + j, c];\n                var cellDown = [rgn.row + j + 1, c];\n                if (CellGroup.areCellsMerged(this.dataModel, rgn.region, cellUp, cellDown)) {\n                    if (lineStarted) {\n                        lines.push([xStart, leftCurrent]);\n                    }\n                    lineStarted = false;\n                }\n                else {\n                    if (!lineStarted) {\n                        lineStarted = true;\n                        xStart = leftCurrent;\n                    }\n                }\n                leftCurrent += rgn.columnSizes[cIndex];\n                if (c === rgn.column) {\n                    leftCurrent -= rgn.xMin - rgn.x;\n                }\n            }\n            if (lineStarted) {\n                lines.push([xStart, rgn.xMax + 1]);\n            }\n            // Compute the Y position of the line.\n            var pos = y + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.yMin && pos <= rgn.yMax) {\n                // Render entire grid if scrolling merged cells grid\n                var extendLines = Private$1.shouldPaintEverything(this._dataModel);\n                if (extendLines) {\n                    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\n                        var line = lines_1[_i];\n                        var x1_1 = line[0], x2 = line[1];\n                        this._canvasGC.moveTo(x1_1, pos + 0.5);\n                        this._canvasGC.lineTo(x2, pos + 0.5);\n                    }\n                }\n                else {\n                    var x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n                    this._canvasGC.moveTo(x1, pos + 0.5);\n                    this._canvasGC.lineTo(x2, pos + 0.5);\n                }\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    };\n    /**\n     * Draw the vertical grid lines for the given paint region.\n     */\n    DataGrid.prototype._drawVerticalGridLines = function (rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the Y bounds for the vertical lines.\n        var y1 = Math.max(rgn.yMin, rgn.y);\n        // Begin the path for the grid lines\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        // Fetch the number of grid lines to be drawn.\n        var n = rgn.columnSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastColumn && pw > bw) {\n            if (rgn.column + n === this._columnSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the vertical grid lines.\n        for (var x = rgn.x, i = 0; i < n; ++i) {\n            // Fetch the size of the column.\n            var size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            var yStart = 0;\n            var lineStarted = false;\n            var lines = [];\n            var topCurrent = y1;\n            for (var r = rgn.row; r < rgn.row + rgn.rowSizes.length; r++) {\n                var rIndex = r - rgn.row;\n                var cellLeft = [r, rgn.column + i];\n                var cellRight = [r, rgn.column + i + 1];\n                if (CellGroup.areCellsMerged(this.dataModel, rgn.region, cellLeft, cellRight)) {\n                    if (lineStarted) {\n                        lines.push([yStart, topCurrent]);\n                    }\n                    lineStarted = false;\n                }\n                else {\n                    if (!lineStarted) {\n                        lineStarted = true;\n                        yStart = topCurrent;\n                    }\n                }\n                topCurrent += rgn.rowSizes[rIndex];\n                if (r === rgn.row) {\n                    topCurrent -= rgn.yMin - rgn.y;\n                }\n            }\n            if (lineStarted) {\n                lines.push([yStart, rgn.yMax + 1]);\n            }\n            // Compute the X position of the line.\n            var pos = x + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.xMin && pos <= rgn.xMax) {\n                // Render entire grid if scrolling merged cells grid\n                var extendLines = Private$1.shouldPaintEverything(this._dataModel);\n                if (extendLines) {\n                    for (var _i = 0, lines_2 = lines; _i < lines_2.length; _i++) {\n                        var line = lines_2[_i];\n                        // this._canvasGC.strokeStyle = color;\n                        this._canvasGC.moveTo(pos + 0.5, line[0]);\n                        this._canvasGC.lineTo(pos + 0.5, line[1]);\n                    }\n                }\n                else {\n                    var y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n                    this._canvasGC.moveTo(pos + 0.5, y1);\n                    this._canvasGC.lineTo(pos + 0.5, y2);\n                }\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    };\n    /**\n     * Draw the body selections for the data grid.\n     */\n    DataGrid.prototype._drawBodySelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections.\n        if (!model || model.isEmpty) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.selectionFillColor;\n        var stroke = this._style.selectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the scroll geometry.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Get the first visible cell of the grid.\n        var r1 = this._rowSections.indexOf(sy);\n        var c1 = this._columnSections.indexOf(sx);\n        // Bail early if there are no visible cells.\n        if (r1 < 0 || c1 < 0) {\n            return;\n        }\n        // Fetch the extra geometry.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Get the last visible cell of the grid.\n        var r2 = this._rowSections.indexOf(sy + ph);\n        var c2 = this._columnSections.indexOf(sx + pw);\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Clamp the last cell if the void space is visible.\n        r2 = r2 < 0 ? maxRow : r2;\n        c2 = c2 < 0 ? maxColumn : c2;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Iterate over the selections.\n        var it = model.selections();\n        var s;\n        while ((s = it.next()) !== undefined) {\n            // Skip the section if it's not visible.\n            if (s.r1 < r1 && s.r2 < r1) {\n                continue;\n            }\n            if (s.r1 > r2 && s.r2 > r2) {\n                continue;\n            }\n            if (s.c1 < c1 && s.c2 < c1) {\n                continue;\n            }\n            if (s.c1 > c2 && s.c2 > c2) {\n                continue;\n            }\n            // Clamp the cell to the model bounds.\n            var sr1 = Math.max(0, Math.min(s.r1, maxRow));\n            var sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n            var sr2 = Math.max(0, Math.min(s.r2, maxRow));\n            var sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n            // Swap index order if needed.\n            var tmp = void 0;\n            if (sr1 > sr2) {\n                tmp = sr1;\n                sr1 = sr2;\n                sr2 = tmp;\n            }\n            if (sc1 > sc2) {\n                tmp = sc1;\n                sc1 = sc2;\n                sc2 = tmp;\n            }\n            var joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: sr1, r2: sr2, c1: sc1, c2: sc2 }, 'body');\n            sr1 = joinedGroup.r1;\n            sr2 = joinedGroup.r2;\n            sc1 = joinedGroup.c1;\n            sc2 = joinedGroup.c2;\n            // Convert to pixel coordinates.\n            var x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n            var y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n            var x2 = this._columnSections.extentOf(sc2) - sx + hw;\n            var y2 = this._rowSections.extentOf(sr2) - sy + hh;\n            // Adjust the trailing X coordinate for column stretch.\n            if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n                x2 = hw + pw - 1;\n            }\n            // Adjust the trailing Y coordinate for row stretch.\n            if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n                y2 = hh + ph - 1;\n            }\n            // Clamp the bounds to just outside of the clipping rect.\n            x1 = Math.max(hw - 1, x1);\n            y1 = Math.max(hh - 1, y1);\n            x2 = Math.min(hw + pw + 1, x2);\n            y2 = Math.min(hh + ph + 1, y2);\n            // Skip zero sized ranges.\n            if (x2 < x1 || y2 < y1) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Stroke the rect if needed.\n            if (stroke) {\n                gc.strokeRect(x1 - 0.5, y1 - 0.5, x2 - x1 + 1, y2 - y1 + 1);\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the row header selections for the data grid.\n     */\n    DataGrid.prototype._drawRowHeaderSelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire column.\n        if (!model || model.isEmpty || model.selectionMode == 'column') {\n            return;\n        }\n        // Bail early if the row headers are not visible.\n        if (this.headerWidth === 0 || this.pageHeight === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.headerSelectionFillColor;\n        var stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        var sy = this._scrollY;\n        var bh = this.bodyHeight;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var rs = this._rowSections;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(0, hh, hw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max row.\n        var maxRow = rs.count - 1;\n        // Fetch the visible rows.\n        var r1 = rs.indexOf(sy);\n        var r2 = rs.indexOf(sy + ph - 1);\n        r2 = r2 < 0 ? maxRow : r2;\n        // Iterate over the visible rows.\n        for (var j = r1; j <= r2; ++j) {\n            // Skip rows which aren't selected.\n            if (!model.isRowSelected(j)) {\n                continue;\n            }\n            // Get the dimensions of the row.\n            var y = rs.offsetOf(j) - sy + hh;\n            var h = rs.sizeOf(j);\n            // Adjust the height for row stretch.\n            if (this._stretchLastRow && ph > bh && j === maxRow) {\n                h = hh + ph - y;\n            }\n            // Skip zero sized rows.\n            if (h === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(0, y, hw, h);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(hw - 0.5, y - 1);\n                gc.lineTo(hw - 0.5, y + h);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the column header selections for the data grid.\n     */\n    DataGrid.prototype._drawColumnHeaderSelections = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire row\n        if (!model || model.isEmpty || model.selectionMode == 'row') {\n            return;\n        }\n        // Bail early if the column headers are not visible.\n        if (this.headerHeight === 0 || this.pageWidth === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        var fill = this._style.headerSelectionFillColor;\n        var stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        var sx = this._scrollX;\n        var bw = this.bodyWidth;\n        var pw = this.pageWidth;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var cs = this._columnSections;\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(hw, 0, pw, hh);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max column.\n        var maxCol = cs.count - 1;\n        // Fetch the visible columns.\n        var c1 = cs.indexOf(sx);\n        var c2 = cs.indexOf(sx + pw - 1);\n        c2 = c2 < 0 ? maxCol : c2;\n        // Iterate over the visible columns.\n        for (var i = c1; i <= c2; ++i) {\n            // Skip columns which aren't selected.\n            if (!model.isColumnSelected(i)) {\n                continue;\n            }\n            // Get the dimensions of the column.\n            var x = cs.offsetOf(i) - sx + hw;\n            var w = cs.sizeOf(i);\n            // Adjust the width for column stretch.\n            if (this._stretchLastColumn && pw > bw && i === maxCol) {\n                w = hw + pw - x;\n            }\n            // Skip zero sized columns.\n            if (w === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x, 0, w, hh);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(x - 1, hh - 0.5);\n                gc.lineTo(x + w, hh - 0.5);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the overlay cursor for the data grid.\n     */\n    DataGrid.prototype._drawCursor = function () {\n        // Fetch the selection model.\n        var model = this._selectionModel;\n        // Bail early if there is no cursor.\n        if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n            return;\n        }\n        // Extract the style information.\n        var fill = this._style.cursorFillColor;\n        var stroke = this._style.cursorBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the cursor location.\n        var startRow = model.cursorRow;\n        var startColumn = model.cursorColumn;\n        // Fetch the max row and column.\n        var maxRow = this._rowSections.count - 1;\n        var maxColumn = this._columnSections.count - 1;\n        // Bail early if the cursor is out of bounds.\n        if (startRow < 0 || startRow > maxRow) {\n            return;\n        }\n        if (startColumn < 0 || startColumn > maxColumn) {\n            return;\n        }\n        var endRow = startRow;\n        var endColumn = startColumn;\n        var joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn }, 'body');\n        startRow = joinedGroup.r1;\n        endRow = joinedGroup.r2;\n        startColumn = joinedGroup.c1;\n        endColumn = joinedGroup.c2;\n        // Fetch geometry.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // Get the cursor bounds in viewport coordinates.\n        var x1 = this._columnSections.offsetOf(startColumn) - sx + hw;\n        var x2 = this._columnSections.extentOf(endColumn) - sx + hw;\n        var y1 = this._rowSections.offsetOf(startRow) - sy + hh;\n        var y2 = this._rowSections.extentOf(endRow) - sy + hh;\n        // Adjust the trailing X coordinate for column stretch.\n        if (this._stretchLastColumn && pw > bw && startColumn === maxColumn) {\n            x2 = vw - 1;\n        }\n        // Adjust the trailing Y coordinate for row stretch.\n        if (this._stretchLastRow && ph > bh && startRow === maxRow) {\n            y2 = vh - 1;\n        }\n        // Skip zero sized cursors.\n        if (x2 < x1 || y2 < y1) {\n            return;\n        }\n        // Bail early if the cursor is off the screen.\n        if (x1 - 1 >= vw || y1 - 1 >= vh || x2 + 1 < hw || y2 + 1 < hh) {\n            return;\n        }\n        // Fetch the overlay gc.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Clear any existing overlay content.\n        gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        // Fill the cursor rect if needed.\n        if (fill) {\n            // Set up the fill style.\n            gc.fillStyle = fill;\n            // Fill the cursor rect.\n            gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        }\n        // Stroke the cursor border if needed.\n        if (stroke) {\n            // Set up the stroke style.\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 2;\n            // Stroke the cursor rect.\n            gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    /**\n     * Draw the overlay shadows for the data grid.\n     */\n    DataGrid.prototype._drawShadows = function () {\n        // Fetch the scroll shadow from the style.\n        var shadow = this._style.scrollShadow;\n        // Bail early if there is no shadow to draw.\n        if (!shadow) {\n            return;\n        }\n        // Fetch the scroll position.\n        var sx = this._scrollX;\n        var sy = this._scrollY;\n        // Fetch maximum scroll position.\n        var sxMax = this.maxScrollX;\n        var syMax = this.maxScrollY;\n        // Fetch the header width and height.\n        var hw = this.headerWidth;\n        var hh = this.headerHeight;\n        // Fetch the page width and height.\n        var pw = this.pageWidth;\n        var ph = this.pageHeight;\n        // Fetch the viewport width and height.\n        var vw = this._viewportWidth;\n        var vh = this._viewportHeight;\n        // Fetch the body width and height.\n        var bw = this.bodyWidth;\n        var bh = this.bodyHeight;\n        // Adjust the body size for row and column stretch.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Fetch the gc object.\n        var gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Draw the column header shadow if needed.\n        if (sy > 0) {\n            // Set up the gradient coordinates.\n            var x0 = 0;\n            var y0 = hh;\n            var x1 = 0;\n            var y1 = y0 + shadow.size;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = 0;\n            var y = hh;\n            var w = hw + Math.min(pw, bw - sx);\n            var h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row header shadow if needed.\n        if (sx > 0) {\n            // Set up the gradient coordinates.\n            var x0 = hw;\n            var y0 = 0;\n            var x1 = x0 + shadow.size;\n            var y1 = 0;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = hw;\n            var y = 0;\n            var w = shadow.size;\n            var h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the column footer shadow if needed.\n        if (sy < syMax) {\n            // Set up the gradient coordinates.\n            var x0 = 0;\n            var y0 = vh;\n            var x1 = 0;\n            var y1 = vh - shadow.size;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = 0;\n            var y = vh - shadow.size;\n            var w = hw + Math.min(pw, bw - sx);\n            var h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row footer shadow if needed.\n        if (sx < sxMax) {\n            // Set up the gradient coordinates.\n            var x0 = vw;\n            var y0 = 0;\n            var x1 = vw - shadow.size;\n            var y1 = 0;\n            // Create the gradient object.\n            var grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            var x = vw - shadow.size;\n            var y = 0;\n            var w = shadow.size;\n            var h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Restore the gc state.\n        gc.restore();\n    };\n    return DataGrid;\n}(Widget));\n/**\n * The namespace for the `DataGrid` class statics.\n */\n(function (DataGrid) {\n    /**\n     * A generic format function for the copy handler.\n     *\n     * @param args - The format args for the function.\n     *\n     * @returns The string representation of the value.\n     *\n     * #### Notes\n     * This function uses `String()` to coerce a value to a string.\n     */\n    function copyFormatGeneric(args) {\n        if (args.value === null || args.value === undefined) {\n            return '';\n        }\n        return String(args.value);\n    }\n    DataGrid.copyFormatGeneric = copyFormatGeneric;\n    /**\n     * The default theme for a data grid.\n     */\n    DataGrid.defaultStyle = {\n        voidColor: '#F3F3F3',\n        backgroundColor: '#FFFFFF',\n        gridLineColor: 'rgba(20, 20, 20, 0.15)',\n        headerBackgroundColor: '#F3F3F3',\n        headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n        selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n        selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n        headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n        headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        scrollShadow: {\n            size: 10,\n            color1: 'rgba(0, 0, 0, 0.20)',\n            color2: 'rgba(0, 0, 0, 0.05)',\n            color3: 'rgba(0, 0, 0, 0.00)'\n        }\n    };\n    /**\n     * The default sizes for a data grid.\n     */\n    DataGrid.defaultSizes = {\n        rowHeight: 20,\n        columnWidth: 64,\n        rowHeaderWidth: 64,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default minimum sizes for a data grid.\n     */\n    DataGrid.minimumSizes = {\n        rowHeight: 20,\n        columnWidth: 10,\n        rowHeaderWidth: 10,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default copy config for a data grid.\n     */\n    DataGrid.defaultCopyConfig = {\n        separator: '\\t',\n        format: copyFormatGeneric,\n        headers: 'none',\n        warningThreshold: 1e6\n    };\n})(DataGrid || (DataGrid = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$1;\n(function (Private) {\n    /**\n     * A singleton `scroll-request` conflatable message.\n     */\n    Private.ScrollRequest = new ConflatableMessage('scroll-request');\n    /**\n     * A singleton `overlay-paint-request` conflatable message.\n     */\n    Private.OverlayPaintRequest = new ConflatableMessage('overlay-paint-request');\n    /**\n     * Create a new zero-sized canvas element.\n     */\n    function createCanvas() {\n        var canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas;\n    }\n    Private.createCanvas = createCanvas;\n    /**\n     * A function to check whether the entire grid should be rendered\n     * when dealing with merged cell regions.\n     * @param dataModel grid's data model.\n     * @returns boolean.\n     */\n    function shouldPaintEverything(dataModel) {\n        var colGroups = CellGroup.getCellGroupsAtRegion(dataModel, 'column-header');\n        var rowHeaderGroups = CellGroup.getCellGroupsAtRegion(dataModel, 'row-header');\n        var cornerHeaderGroups = CellGroup.getCellGroupsAtRegion(dataModel, 'corner-header');\n        var bodyGroups = CellGroup.getCellGroupsAtRegion(dataModel, 'body');\n        return (colGroups.length > 0 ||\n            rowHeaderGroups.length > 0 ||\n            cornerHeaderGroups.length > 0 ||\n            bodyGroups.length > 0);\n    }\n    Private.shouldPaintEverything = shouldPaintEverything;\n    /**\n     * Checks whether a given regions has merged cells in it.\n     * @param dataModel grid's data model.\n     * @param region the paint region to be checked.\n     * @returns boolean.\n     */\n    function regionHasMergedCells(dataModel, region) {\n        var regionGroups = CellGroup.getCellGroupsAtRegion(dataModel, region);\n        return regionGroups.length > 0;\n    }\n    Private.regionHasMergedCells = regionHasMergedCells;\n    /**\n     * A conflatable message which merges dirty paint regions.\n     */\n    var PaintRequest = /** @class */ (function (_super) {\n        __extends(PaintRequest, _super);\n        /**\n         * Construct a new paint request messages.\n         *\n         * @param region - The cell region for the paint.\n         *\n         * @param r1 - The top-left row of the dirty region.\n         *\n         * @param c1 - The top-left column of the dirty region.\n         *\n         * @param r2 - The bottom-right row of the dirty region.\n         *\n         * @param c2 - The bottom-right column of the dirty region.\n         */\n        function PaintRequest(region, r1, c1, r2, c2) {\n            var _this = _super.call(this, 'paint-request') || this;\n            _this._region = region;\n            _this._r1 = r1;\n            _this._c1 = c1;\n            _this._r2 = r2;\n            _this._c2 = c2;\n            return _this;\n        }\n        Object.defineProperty(PaintRequest.prototype, \"region\", {\n            /**\n             * The cell region for the paint.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"r1\", {\n            /**\n             * The top-left row of the dirty region.\n             */\n            get: function () {\n                return this._r1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"c1\", {\n            /**\n             * The top-left column of the dirty region.\n             */\n            get: function () {\n                return this._c1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"r2\", {\n            /**\n             * The bottom-right row of the dirty region.\n             */\n            get: function () {\n                return this._r2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaintRequest.prototype, \"c2\", {\n            /**\n             * The bottom-right column of the dirty region.\n             */\n            get: function () {\n                return this._c2;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another paint request.\n         */\n        PaintRequest.prototype.conflate = function (other) {\n            // Bail early if the request is already painting everything.\n            if (this._region === 'all') {\n                return true;\n            }\n            // Any region can conflate with the `'all'` region.\n            if (other._region === 'all') {\n                this._region = 'all';\n                return true;\n            }\n            // Otherwise, do not conflate with a different region.\n            if (this._region !== other._region) {\n                return false;\n            }\n            // Conflate the region to the total boundary.\n            this._r1 = Math.min(this._r1, other._r1);\n            this._c1 = Math.min(this._c1, other._c1);\n            this._r2 = Math.max(this._r2, other._r2);\n            this._c2 = Math.max(this._c2, other._c2);\n            return true;\n        };\n        return PaintRequest;\n    }(ConflatableMessage));\n    Private.PaintRequest = PaintRequest;\n    /**\n     * A conflatable message for resizing rows.\n     */\n    var RowResizeRequest = /** @class */ (function (_super) {\n        __extends(RowResizeRequest, _super);\n        /**\n         * Construct a new row resize request.\n         *\n         * @param region - The row region which holds the section.\n         *\n         * @param index - The index of row in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        function RowResizeRequest(region, index, size) {\n            var _this = _super.call(this, 'row-resize-request') || this;\n            _this._region = region;\n            _this._index = index;\n            _this._size = size;\n            return _this;\n        }\n        Object.defineProperty(RowResizeRequest.prototype, \"region\", {\n            /**\n             * The row region which holds the section.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RowResizeRequest.prototype, \"index\", {\n            /**\n             * The index of the row in the region.\n             */\n            get: function () {\n                return this._index;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RowResizeRequest.prototype, \"size\", {\n            /**\n             * The target size of the section.\n             */\n            get: function () {\n                return this._size;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another row resize request.\n         */\n        RowResizeRequest.prototype.conflate = function (other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        };\n        return RowResizeRequest;\n    }(ConflatableMessage));\n    Private.RowResizeRequest = RowResizeRequest;\n    /**\n     * A conflatable message for resizing columns.\n     */\n    var ColumnResizeRequest = /** @class */ (function (_super) {\n        __extends(ColumnResizeRequest, _super);\n        /**\n         * Construct a new column resize request.\n         *\n         * @param region - The column region which holds the section.\n         *\n         * @param index - The index of column in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        function ColumnResizeRequest(region, index, size) {\n            var _this = _super.call(this, 'column-resize-request') || this;\n            _this._region = region;\n            _this._index = index;\n            _this._size = size;\n            return _this;\n        }\n        Object.defineProperty(ColumnResizeRequest.prototype, \"region\", {\n            /**\n             * The column region which holds the section.\n             */\n            get: function () {\n                return this._region;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ColumnResizeRequest.prototype, \"index\", {\n            /**\n             * The index of the column in the region.\n             */\n            get: function () {\n                return this._index;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ColumnResizeRequest.prototype, \"size\", {\n            /**\n             * The target size of the section.\n             */\n            get: function () {\n                return this._size;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Conflate this message with another column resize request.\n         */\n        ColumnResizeRequest.prototype.conflate = function (other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        };\n        return ColumnResizeRequest;\n    }(ConflatableMessage));\n    Private.ColumnResizeRequest = ColumnResizeRequest;\n})(Private$1 || (Private$1 = {}));\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nvar JSONModel = /** @class */ (function (_super) {\n    __extends(JSONModel, _super);\n    /**\n     * Create a data model with static JSON data.\n     *\n     * @param options - The options for initializing the data model.\n     */\n    function JSONModel(options) {\n        var _this = _super.call(this) || this;\n        var split = Private.splitFields(options.schema);\n        _this._data = options.data;\n        _this._bodyFields = split.bodyFields;\n        _this._headerFields = split.headerFields;\n        _this._missingValues = Private.createMissingMap(options.schema);\n        return _this;\n    }\n    /**\n     * Get the row count for a region in the data model.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns - The row count for the region.\n     */\n    JSONModel.prototype.rowCount = function (region) {\n        if (region === 'body') {\n            return this._data.length;\n        }\n        return 1; // TODO multiple column-header rows?\n    };\n    /**\n     * Get the column count for a region in the data model.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns - The column count for the region.\n     */\n    JSONModel.prototype.columnCount = function (region) {\n        if (region === 'body') {\n            return this._bodyFields.length;\n        }\n        return this._headerFields.length;\n    };\n    /**\n     * Get the data value for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns - The data value for the specified cell.\n     *\n     * #### Notes\n     * A `missingValue` as defined by the schema is converted to `null`.\n     */\n    JSONModel.prototype.data = function (region, row, column) {\n        // Set up the field and value variables.\n        var field;\n        var value;\n        // Look up the field and value for the region.\n        switch (region) {\n            case 'body':\n                field = this._bodyFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'column-header':\n                field = this._bodyFields[column];\n                value = field.title || field.name;\n                break;\n            case 'row-header':\n                field = this._headerFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'corner-header':\n                field = this._headerFields[column];\n                value = field.title || field.name;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Test whether the value is a missing value.\n        var missing = this._missingValues !== null &&\n            typeof value === 'string' &&\n            this._missingValues[value] === true;\n        // Return the final value.\n        return missing ? null : value;\n    };\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the cell.\n     */\n    JSONModel.prototype.metadata = function (region, row, column) {\n        if (region === 'body' || region === 'column-header') {\n            return this._bodyFields[column];\n        }\n        return this._headerFields[column];\n    };\n    return JSONModel;\n}(DataModel));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Split the schema fields into header and body fields.\n     */\n    function splitFields(schema) {\n        // Normalize the primary keys.\n        var primaryKeys;\n        if (schema.primaryKey === undefined) {\n            primaryKeys = [];\n        }\n        else if (typeof schema.primaryKey === 'string') {\n            primaryKeys = [schema.primaryKey];\n        }\n        else {\n            primaryKeys = schema.primaryKey;\n        }\n        // Separate the fields for the body and header.\n        var bodyFields = [];\n        var headerFields = [];\n        for (var _i = 0, _a = schema.fields; _i < _a.length; _i++) {\n            var field = _a[_i];\n            if (primaryKeys.indexOf(field.name) === -1) {\n                bodyFields.push(field);\n            }\n            else {\n                headerFields.push(field);\n            }\n        }\n        // Return the separated fields.\n        return { bodyFields: bodyFields, headerFields: headerFields };\n    }\n    Private.splitFields = splitFields;\n    /**\n     * Create a missing values map for a schema.\n     *\n     * This returns `null` if there are no missing values.\n     */\n    function createMissingMap(schema) {\n        // Bail early if there are no missing values.\n        if (!schema.missingValues || schema.missingValues.length === 0) {\n            return null;\n        }\n        // Collect the missing values into a map.\n        var result = Object.create(null);\n        for (var _i = 0, _a = schema.missingValues; _i < _a.length; _i++) {\n            var value = _a[_i];\n            result[value] = true;\n        }\n        // Return the populated map.\n        return result;\n    }\n    Private.createMissingMap = createMissingMap;\n})(Private || (Private = {}));\n\nexport { BasicKeyHandler, BasicMouseHandler, BasicSelectionModel, BooleanCellEditor, CellEditor, CellEditorController, CellGroup, CellRenderer, DataGrid, DataModel, DateCellEditor, DynamicOptionCellEditor, GraphicsContext, HyperlinkRenderer, InputCellEditor, IntegerCellEditor, IntegerInputValidator, JSONModel, MutableDataModel, NumberCellEditor, NumberInputValidator, OptionCellEditor, PassInputValidator, Private$6 as Private, RendererMap, SectionList, SelectionModel, TextCellEditor, TextInputValidator, TextRenderer, resolveOption };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["BasicKeyHandler","this","_disposed","Object","defineProperty","prototype","get","enumerable","configurable","dispose","onKeyDown","grid","event","editable","selectionModel","cursorRow","cursorColumn","input","String","fromCharCode","keyCode","test","cell","row","column","editorController","edit","getKeyboardLayout","keyForKeydownEvent","stopPropagation","preventDefault","onArrowLeft","onArrowRight","onArrowUp","onArrowDown","onPageUp","onPageDown","onEscape","onDelete","onKeyC","moveCursor","shiftKey","scrollToCursor","model","shift","accel","Platform","mode","selectionMode","scrollTo","scrollY","r1","r2","c1","c2","cr","cc","clear","r","c","cs","currentSelection","select","scrollToColumn","scrollByStep","maxScrollX","Infinity","scrollX","scrollToRow","maxScrollY","n","Math","floor","pageHeight","defaultSizes","rowHeight","scrollByPage","isEmpty","dataModel","maxRow","rowCount","maxColumn","columnCount","it","selections","s","undefined","next","sr1","max","min","sc1","sr2","sc2","setData","copyToClipboard","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","__","constructor","create","__assign","assign","t","i","arguments","length","apply","CellRenderer","resolveOption","option","config","Private$7","TextRenderer","_super","options","_this","font","textColor","backgroundColor","verticalAlignment","horizontalAlignment","format","formatGeneric","elideDirection","wrapText","paint","gc","drawBackground","drawText","color","fillStyle","fillRect","x","y","width","height","text","vAlign","hAlign","boxHeight","textX","textY","boxWidth","textHeight","measureFontHeight","beginPath","rect","clip","textAlign","textBaseline","textWidth","measureText","wordsInColumn","split","curY","textInCurrentLine","curLineTextWidth","curSubString","substring","nextLineText","fillText","curWord","incrementedText","join","elide","missing","_a","value","formatFixed","digits","Number","toFixed","formatPrecision","toPrecision","formatExponential","toExponential","formatIntlNumber","nft","Intl","NumberFormat","locales","formatDate","Date","toDateString","formatTime","toTimeString","formatISODateTime","toISOString","formatUTCDateTime","toUTCString","formatIntlDateTime","dtf","DateTimeFormat","fontHeightCache","fontMeasurementGC","normFont","fontMeasurementNode","style","document","body","appendChild","offsetHeight","removeChild","Private","node","canvas","createElement","position","top","left","visibility","textContent","getContext","CellGroup","HyperlinkRenderer","url","urlName","areCellGroupsIntersectingAtAxis","group1","group2","axis","areCellGroupsIntersecting","getGroupIndex","rgn","numGroups","groupCount","group","getCellGroupsAtRegion","groupsAtRegion","push","joinCellGroups","groups","startRow","MAX_VALUE","endRow","MIN_VALUE","startColumn","endColumn","_i","groups_1","getCellGroupsAtRow","groupsAtRow","getCellGroupsAtColumn","groupsAtColumn","areCellsMerged","cell1","cell2","row1","column1","row2","column2","calculateMergeOffsets","regions","sectionList","index","mergeStartOffset","mergeEndOffset","mergedCellGroups","regions_1","region","concat","groupsAtAxis","regions_2","_b","regions_3","joinedGroup","g","splice","minRow","sizeOf","getGroup","groupIndex","joinCellGroupWithMergedCellGroups","mergedGroup","isCellGroupAbove","isCellGroupBelow","joinCellGroupsIntersectingAtAxis","regions_4","regions_5","mergedGroupAtAxis","regions_6","group_1","Private$6","BasicMouseHandler","_pressData","release","type","timeout","override","onMouseHover","hit","hitTest","clientX","clientY","handle","resizeHandleForHitTest","cursor","cursorForHandle","createCellConfigObject","cellRenderers","viewport","onMouseLeave","onMouseDown","renderer","window","open","cursor_1","model_1","r1_1","c1_1","r2_1","c2_1","cursorRow_1","cursorColumn_1","clear_1","override_1","Drag","localX","localY","selectionGroup","size","rowSize","override_3","columnSize","override_2","onMouseMove","data","mapToLocal","lx","ly","hw","headerWidth","hh","headerHeight","vpw","viewportWidth","vph","viewportHeight","sx","sy","msx","msy","computeTimeout","setTimeout","autoselect","mapToVirtual","vx","vy","bodyWidth","bodyHeight","rowAt","columnAt","dx","resizeColumn","dy","resizeRow","onMouseUp","onMouseDoubleClick","onContextMenu","onWheel","deltaX","deltaY","deltaMode","ds","columnWidth","pageWidth","scrollBy","cursorMap","metadata","result","lw","lh","tw","th","scrollToCell","delta","abs","right","bottom","hyperlink","none","Private$5","SelectionModel","_changed","Signal","_selectionMode","changed","connect","onDataModelChanged","set","isRowSelected","some","containsRow","isColumnSelected","containsColumn","isCellSelected","containsCell","sender","args","emitChanged","emit","selection","Private$4","BasicSelectionModel","_cursorRow","_cursorColumn","_cursorRectIndex","_selections","moveCursorWithinSelections","direction","firstSelection","cursorRect","dr","dc","newRow","newColumn","moveToNextRect","moveToPreviousRect","iter","pop","alreadySelected","filter","lr","lc","j","Notification","createNode","_message","addClass","setFlag","Widget","_target","target","message","_placement","placement","close","handleEvent","_evtMouseDown","update","getElementsByClassName","onBeforeAttach","msg","addEventListener","onAfterDetach","removeEventListener","onUpdateRequest","targetRect","getBoundingClientRect","alignItems","justifyContent","messageNode","innerHTML","button","container","className","DEFAULT_INVALID_INPUT_MESSAGE","PassInputValidator","validate","valid","TextInputValidator","minLength","NaN","maxLength","pattern","isNaN","IntegerInputValidator","NumberInputValidator","CellEditor","inputChanged","validityNotification","_validInput","_gridWheelEventHandler","_closeValidityNotification","viewportOccluder","onCommit","onCancel","validator","createValidatorBasedOnType","updatePosition","_addContainer","startEditing","cancel","getInput","error","console","log","setValidity","editorContainer","classList","remove","add","show","RegExp","constraint","minimum","maximum","getCellInfo","columnX","rowY","cellGroup","columnOffset","rowOffset","cellInfo","commit","cursorMovement","pointerEvents","InputCellEditor","_onKeyDown","_onBlur","_onInput","isDisposed","_unbindEvents","createWidget","deserialize","focus","bindEvents","toString","spellcheck","inputType","TextCellEditor","NumberCellEditor","step","trim","floatValue","parseFloat","Error","IntegerCellEditor","intValue","parseInt","DateCellEditor","_createWidget","_input","_deserialize","_bindEvents","BooleanCellEditor","checked","OptionCellEditor","_isMultiSelect","_select","multiple","values","item","selected","indexOf","selectedOptions","editorContainerRect","maxHeight","isArray","value_1","items","enum","items_1","bind","DynamicOptionCellEditor","listId","list","id","valueSet","Set","forEach","setAttribute","CellEditorController","_editor","_cell","_typeBasedOverrides","Map","_metadataBasedOverrides","setEditor","identifier","editor","key","_metadataIdentifierToKey","_onCommit","_onCancel","_getEditor","response","_getDataTypeKey","_objectToKey","object","str","_metadataMatchesIdentifier","identifierValue","metadataValue","_getMetadataBasedEditor","editorMatched","dtKey","has","DataModel","emptyMetadata","MutableDataModel","freeze","Private$3","GraphicsContext","context","_context","_state","State","restore","strokeStyle","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","imageSmoothingEnabled","globalAlpha","globalCompositeOperation","getLineDash","setLineDash","segments","rotate","angle","scale","transform","m11","m12","m21","m22","translate","setTransform","save","closePath","isPointInPath","fillRule","arc","radius","startAngle","endAngle","anticlockwise","arcTo","x1","y1","x2","y2","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","ellipse","radiusX","radiusY","rotation","lineTo","moveTo","quadraticCurveTo","cpx","cpy","w","h","fill","stroke","clearRect","maxWidth","strokeRect","strokeText","createLinearGradient","x0","y0","createRadialGradient","r0","createPattern","image","repetition","createImageData","getImageData","sw","sh","putImageData","drawImage","drawFocusIfNeeded","element","pi","pool","state","other","Private$2","RendererMap","fallback","_values","_fallback","err","SectionList","_count","_length","_sections","_minimumSize","minimumSize","_defaultSize","defaultSize","prev","curr","count","offset","clampSize","ArrayExt","offsetCmp","section","span","offsetOf","indexCmp","extentOf","resize","insert","removed","k","move","destination","i1","k1","i2","k2","pivot","count1","count2","span1","span2","k3","reset","Private$1","DataGrid","_scrollX","_scrollY","_viewportWidth","_viewportHeight","_mousedown","_keyHandler","_mouseHandler","_vScrollBarMinWidth","_hScrollBarMinHeight","_dpiRatio","ceil","devicePixelRatio","_dataModel","_selectionModel","_editingEnabled","_style","defaultStyle","_stretchLastRow","stretchLastRow","_stretchLastColumn","stretchLastColumn","_headerVisibility","headerVisibility","_cellRenderers","_copyConfig","copyConfig","defaultCopyConfig","_onRenderersChanged","minimumSizes","_rowSections","_columnSections","_rowHeaderSections","rowHeaderWidth","_columnHeaderSections","columnHeaderHeight","_canvas","createCanvas","_buffer","_overlay","_canvasGC","_bufferGC","_overlayGC","_viewport","tabIndex","outline","_vScrollBar","ScrollBar","orientation","_hScrollBar","_scrollCorner","_editorController","MessageLoop","hide","thumbMoved","_onThumbMoved","pageRequested","_onPageRequested","stepRequested","_onStepRequested","GridLayout","layout","rowSpacing","columnSpacing","fitPolicy","setRowStretch","setColumnStretch","addWidget","_releaseMouse","disconnect","_onDataModelChanged","_syncViewport","_onSelectionsChanged","repaintOverlay","repaintContent","controller","enabled","nr","vy1","vy2","nc","vx1","vx2","currentSel","dir","rows","columns","ScrollRequest","bh","ph","bw","pw","RowResizeRequest","ColumnResizeRequest","resetRows","resetColumns","fitColumnNames","area","padding","numCols","colsRemaining","rowColumnCount","_fitRowColumnHeaders","bodyColumnCount","_fitBodyColumnHeaders","row_1","column_1","row_2","column_2","row_3","column_3","row_4","column_4","toArray","alert","br","bc","_c","rhc","chr","separator","headers","warningThreshold","colCount","cellCount","confirm","cells","lines","map","ClipboardExt","processMessage","vsbLimits","ElementExt","hsbLimits","minWidth","minHeight","messageHook","handler","_processViewportMessage","activate","_evtKeyDown","_evtMouseMove","_evtMouseUp","_evtMouseDoubleClick","_evtMouseLeave","_evtContextMenu","_evtWheel","_refreshDPI","onActivateRequest","preventScroll","onBeforeShow","onResize","_syncScrollState","PaintRequest","repaintRegion","OverlayPaintRequest","_resizeCanvasIfNeeded","maxW","maxH","curW","curH","expW","expH","needBlit","hasVScroll","isHidden","hasHScroll","vsw","hsh","apw","aph","needVScroll","needHScroll","setHidden","page","_scrollTo","_onViewportResize","_onViewportScrollRequest","_onViewportPaintRequest","_onViewportOverlayPaintRequest","_onViewportRowResizeRequest","_onViewportColumnResizeRequest","isVisible","offsetWidth","round","oldWidth","oldHeight","paintContent","_paintOverlay","bx","by","xMax","yMax","rs","rhs","chs","_resizeRow","_resizeColumnHeader","_resizeColumn","_resizeRowHeader","_onRowsInserted","_onColumnsInserted","_onRowsRemoved","_onColumnsRemoved","_onRowsMoved","_onColumnsMoved","_onCellsChanged","_onModelReset","rowSpan","columnSpan","nrh","nch","drh","dch","dpiRatio","oldSize","newSize","vw","vh","shouldPaintEverything","pos","_blitContent","contentX","contentY","contentWidth","contentHeight","dxArea","dyArea","y_5","x_6","source","rx","ry","rw","rh","_drawVoidRegion","_drawBodyRegion","_drawRowHeaderRegion","_drawColumnHeaderRegion","drawCornerHeaderRegion","numRows","cellValue","canvasGC","numCols_1","_drawBodySelections","_drawRowHeaderSelections","_drawColumnHeaderSelections","_drawCursor","_drawShadows","voidColor","contentW","contentH","rowSizes","columnSizes","dh","dw","xMin","yMin","_drawBackground","_drawRowBackground","rowBackgroundColor","_drawColumnBackground","columnBackgroundColor","_drawCells","_drawHorizontalGridLines","horizontalGridLineColor","gridLineColor","_drawVerticalGridLines","verticalGridLineColor","headerBackgroundColor","headerHorizontalGridLineColor","headerGridLineColor","headerVerticalGridLineColor","colorFn","_getColumnSize","_getRowSize","intersectingColumnGroups","intersectingRowGroups","JSONExt","xOffset","yOffset","n_1","xStart","lineStarted","leftCurrent","cIndex","cellUp","cellDown","lines_1","line","x1_1","yStart","topCurrent","rIndex","cellLeft","cellRight","lines_2","selectionFillColor","selectionBorderColor","tmp","headerSelectionFillColor","headerSelectionBorderColor","maxCol","cursorFillColor","cursorBorderColor","shadow","scrollShadow","sxMax","syMax","grad","addColorStop","color1","color2","color3","copyFormatGeneric","ConflatableMessage","colGroups","rowHeaderGroups","cornerHeaderGroups","bodyGroups","regionHasMergedCells","_region","_r1","_c1","_r2","_c2","conflate","_index","_size","JSONModel","splitFields","schema","_data","_bodyFields","bodyFields","_headerFields","headerFields","_missingValues","createMissingMap","field","name","title","primaryKeys","primaryKey","fields","missingValues"],"sourceRoot":""}