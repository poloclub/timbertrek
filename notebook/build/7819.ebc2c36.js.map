{"version":3,"file":"7819.ebc2c36.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/utils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/gettext.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/base.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/server.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/translation/lib/manager.js"],"sourcesContent":["/**\n * Normalize domain\n *\n * @param domain Domain to normalize\n * @returns Normalized domain\n */\nexport function normalizeDomain(domain) {\n    return domain.replace('-', '_');\n}\n//# sourceMappingURL=utils.js.map","/* ----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|\n| Base gettext.js implementation.\n| Copyright (c) Guillaume Potier.\n| Distributed under the terms of the Modified MIT License.\n| See: https://github.com/guillaumepotier/gettext.js\n|\n| Type definitions.\n| Copyright (c) Julien Crouzet and Florian Schwingenschl√∂gl.\n| Distributed under the terms of the Modified MIT License.\n| See: https://github.com/DefinitelyTyped/DefinitelyTyped\n|----------------------------------------------------------------------------*/\nimport { normalizeDomain } from './utils';\n/**\n * Gettext class providing localization methods.\n */\nclass Gettext {\n    constructor(options) {\n        options = options || {};\n        // default values that could be overridden in Gettext() constructor\n        this._defaults = {\n            domain: 'messages',\n            locale: document.documentElement.getAttribute('lang') || 'en',\n            pluralFunc: function (n) {\n                return { nplurals: 2, plural: n != 1 ? 1 : 0 };\n            },\n            contextDelimiter: String.fromCharCode(4),\n            stringsPrefix: ''\n        };\n        // Ensure the correct separator is used\n        this._locale = (options.locale || this._defaults.locale).replace('_', '-');\n        this._domain = normalizeDomain(options.domain || this._defaults.domain);\n        this._contextDelimiter =\n            options.contextDelimiter || this._defaults.contextDelimiter;\n        this._stringsPrefix = options.stringsPrefix || this._defaults.stringsPrefix;\n        this._pluralFuncs = {};\n        this._dictionary = {};\n        this._pluralForms = {};\n        if (options.messages) {\n            this._dictionary[this._domain] = {};\n            this._dictionary[this._domain][this._locale] = options.messages;\n        }\n        if (options.pluralForms) {\n            this._pluralForms[this._locale] = options.pluralForms;\n        }\n    }\n    /**\n     * Set current context delimiter.\n     *\n     * @param delimiter - The delimiter to set.\n     */\n    setContextDelimiter(delimiter) {\n        this._contextDelimiter = delimiter;\n    }\n    /**\n     * Get current context delimiter.\n     *\n     * @return The current delimiter.\n     */\n    getContextDelimiter() {\n        return this._contextDelimiter;\n    }\n    /**\n     * Set current locale.\n     *\n     * @param locale - The locale to set.\n     */\n    setLocale(locale) {\n        this._locale = locale.replace('_', '-');\n    }\n    /**\n     * Get current locale.\n     *\n     * @return The current locale.\n     */\n    getLocale() {\n        return this._locale;\n    }\n    /**\n     * Set current domain.\n     *\n     * @param domain - The domain to set.\n     */\n    setDomain(domain) {\n        this._domain = normalizeDomain(domain);\n    }\n    /**\n     * Get current domain.\n     *\n     * @return The current domain string.\n     */\n    getDomain() {\n        return this._domain;\n    }\n    /**\n     * Set current strings prefix.\n     *\n     * @param prefix - The string prefix to set.\n     */\n    setStringsPrefix(prefix) {\n        this._stringsPrefix = prefix;\n    }\n    /**\n     * Get current strings prefix.\n     *\n     * @return The strings prefix.\n     */\n    getStringsPrefix() {\n        return this._stringsPrefix;\n    }\n    /**\n     * `sprintf` equivalent, takes a string and some arguments to make a\n     * computed string.\n     *\n     * @param fmt - The string to interpolate.\n     * @param args - The variables to use in interpolation.\n     *\n     * ### Examples\n     * strfmt(\"%1 dogs are in %2\", 7, \"the kitchen\"); => \"7 dogs are in the kitchen\"\n     * strfmt(\"I like %1, bananas and %1\", \"apples\"); => \"I like apples, bananas and apples\"\n     */\n    static strfmt(fmt, ...args) {\n        return (fmt\n            // put space after double % to prevent placeholder replacement of such matches\n            .replace(/%%/g, '%% ')\n            // replace placeholders\n            .replace(/%(\\d+)/g, function (str, p1) {\n            return args[p1 - 1];\n        })\n            // replace double % and space with single %\n            .replace(/%% /g, '%'));\n    }\n    /**\n     * Load json translations strings (In Jed 2.x format).\n     *\n     * @param jsonData - The translation strings plus metadata.\n     * @param domain - The translation domain, e.g. \"jupyterlab\".\n     */\n    loadJSON(jsonData, domain) {\n        if (!jsonData[''] ||\n            !jsonData['']['language'] ||\n            !jsonData['']['pluralForms']) {\n            throw new Error(`Wrong jsonData, it must have an empty key (\"\") with \"language\" and \"pluralForms\" information: ${jsonData}`);\n        }\n        domain = normalizeDomain(domain);\n        let headers = jsonData[''];\n        let jsonDataCopy = JSON.parse(JSON.stringify(jsonData));\n        delete jsonDataCopy[''];\n        this.setMessages(domain || this._defaults.domain, headers['language'], jsonDataCopy, headers['pluralForms']);\n    }\n    /**\n     * Shorthand for gettext.\n     *\n     * @param msgid - The singular string to translate.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     *\n     * ### Notes\n     * This is not a private method (starts with an underscore) it is just\n     * a shorter and standard way to call these methods.\n     */\n    __(msgid, ...args) {\n        return this.gettext(msgid, ...args);\n    }\n    /**\n     * Shorthand for ngettext.\n     *\n     * @param msgid - The singular string to translate.\n     * @param msgid_plural - The plural string to translate.\n     * @param n - The number for pluralization.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     *\n     * ### Notes\n     * This is not a private method (starts with an underscore) it is just\n     * a shorter and standard way to call these methods.\n     */\n    _n(msgid, msgid_plural, n, ...args) {\n        return this.ngettext(msgid, msgid_plural, n, ...args);\n    }\n    /**\n     * Shorthand for pgettext.\n     *\n     * @param msgctxt - The message context.\n     * @param msgid - The singular string to translate.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     *\n     * ### Notes\n     * This is not a private method (starts with an underscore) it is just\n     * a shorter and standard way to call these methods.\n     */\n    _p(msgctxt, msgid, ...args) {\n        return this.pgettext(msgctxt, msgid, ...args);\n    }\n    /**\n     * Shorthand for npgettext.\n     *\n     * @param msgctxt - The message context.\n     * @param msgid - The singular string to translate.\n     * @param msgid_plural - The plural string to translate.\n     * @param n - The number for pluralization.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     *\n     * ### Notes\n     * This is not a private method (starts with an underscore) it is just\n     * a shorter and standard way to call these methods.\n     */\n    _np(msgctxt, msgid, msgid_plural, n, ...args) {\n        return this.npgettext(msgctxt, msgid, msgid_plural, n, ...args);\n    }\n    /**\n     * Translate a singular string with extra interpolation values.\n     *\n     * @param msgid - The singular string to translate.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     */\n    gettext(msgid, ...args) {\n        return this.dcnpgettext('', '', msgid, '', 0, ...args);\n    }\n    /**\n     * Translate a plural string with extra interpolation values.\n     *\n     * @param msgid - The singular string to translate.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     */\n    ngettext(msgid, msgid_plural, n, ...args) {\n        return this.dcnpgettext('', '', msgid, msgid_plural, n, ...args);\n    }\n    /**\n     * Translate a contextualized singular string with extra interpolation values.\n     *\n     * @param msgctxt - The message context.\n     * @param msgid - The singular string to translate.\n     * @param args - Any additional values to use with interpolation.\n     *\n     * @return A translated string if found, or the original string.\n     *\n     * ### Notes\n     * This is not a private method (starts with an underscore) it is just\n     * a shorter and standard way to call these methods.\n     */\n    pgettext(msgctxt, msgid, ...args) {\n        return this.dcnpgettext('', msgctxt, msgid, '', 0, ...args);\n    }\n    /**\n     * Translate a contextualized plural string with extra interpolation values.\n     *\n     * @param msgctxt - The message context.\n     * @param msgid - The singular string to translate.\n     * @param msgid_plural - The plural string to translate.\n     * @param n - The number for pluralization.\n     * @param args - Any additional values to use with interpolation\n     *\n     * @return A translated string if found, or the original string.\n     */\n    npgettext(msgctxt, msgid, msgid_plural, n, ...args) {\n        return this.dcnpgettext('', msgctxt, msgid, msgid_plural, n, ...args);\n    }\n    /**\n     * Translate a singular string with extra interpolation values.\n     *\n     * @param domain - The translations domain.\n     * @param msgctxt - The message context.\n     * @param msgid - The singular string to translate.\n     * @param msgid_plural - The plural string to translate.\n     * @param n - The number for pluralization.\n     * @param args - Any additional values to use with interpolation\n     *\n     * @return A translated string if found, or the original string.\n     */\n    dcnpgettext(domain, msgctxt, msgid, msgid_plural, n, ...args) {\n        domain = normalizeDomain(domain) || this._domain;\n        let translation;\n        let key = msgctxt\n            ? msgctxt + this._contextDelimiter + msgid\n            : msgid;\n        let options = { pluralForm: false };\n        let exist = false;\n        let locale = this._locale;\n        let locales = this.expandLocale(this._locale);\n        for (let i in locales) {\n            locale = locales[i];\n            exist =\n                this._dictionary[domain] &&\n                    this._dictionary[domain][locale] &&\n                    this._dictionary[domain][locale][key];\n            // check condition are valid (.length)\n            // because it's not possible to define both a singular and a plural form of the same msgid,\n            // we need to check that the stored form is the same as the expected one.\n            // if not, we'll just ignore the translation and consider it as not translated.\n            if (msgid_plural) {\n                exist = exist && this._dictionary[domain][locale][key].length > 1;\n            }\n            else {\n                exist = exist && this._dictionary[domain][locale][key].length == 1;\n            }\n            if (exist) {\n                // This ensures that a variation is used.\n                options.locale = locale;\n                break;\n            }\n        }\n        if (!exist) {\n            translation = [msgid];\n            options.pluralFunc = this._defaults.pluralFunc;\n        }\n        else {\n            translation = this._dictionary[domain][locale][key];\n        }\n        // Singular form\n        if (!msgid_plural) {\n            return this.t(translation, n, options, ...args);\n        }\n        // Plural one\n        options.pluralForm = true;\n        let value = exist ? translation : [msgid, msgid_plural];\n        return this.t(value, n, options, ...args);\n    }\n    /**\n     * Split a locale into parent locales. \"es-CO\" -> [\"es-CO\", \"es\"]\n     *\n     * @param locale - The locale string.\n     *\n     * @return An array of locales.\n     */\n    expandLocale(locale) {\n        let locales = [locale];\n        let i = locale.lastIndexOf('-');\n        while (i > 0) {\n            locale = locale.slice(0, i);\n            locales.push(locale);\n            i = locale.lastIndexOf('-');\n        }\n        return locales;\n    }\n    /**\n     * Split a locale into parent locales. \"es-CO\" -> [\"es-CO\", \"es\"]\n     *\n     * @param pluralForm - Plural form string..\n     * @return An function to compute plural forms.\n     */\n    getPluralFunc(pluralForm) {\n        // Plural form string regexp\n        // taken from https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js\n        // plural forms list available here http://localization-guide.readthedocs.org/en/latest/l10n/pluralforms.html\n        let pf_re = new RegExp('^\\\\s*nplurals\\\\s*=\\\\s*[0-9]+\\\\s*;\\\\s*plural\\\\s*=\\\\s*(?:\\\\s|[-\\\\?\\\\|&=!<>+*/%:;n0-9_()])+');\n        if (!pf_re.test(pluralForm))\n            throw new Error(Gettext.strfmt('The plural form \"%1\" is not valid', pluralForm));\n        // Careful here, this is a hidden eval() equivalent..\n        // Risk should be reasonable though since we test the pluralForm through regex before\n        // taken from https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js\n        // TODO: should test if https://github.com/soney/jsep present and use it if so\n        return new Function('n', 'let plural, nplurals; ' +\n            pluralForm +\n            ' return { nplurals: nplurals, plural: (plural === true ? 1 : (plural ? plural : 0)) };');\n    }\n    /**\n     * Remove the context delimiter from string.\n     *\n     * @param str - Translation string.\n     * @return A translation string without context.\n     */\n    removeContext(str) {\n        // if there is context, remove it\n        if (str.indexOf(this._contextDelimiter) !== -1) {\n            let parts = str.split(this._contextDelimiter);\n            return parts[1];\n        }\n        return str;\n    }\n    /**\n     * Proper translation function that handle plurals and directives.\n     *\n     * @param messages - List of translation strings.\n     * @param n - The number for pluralization.\n     * @param options - Translation options.\n     * @param args - Any variables to interpolate.\n     *\n     * @return A translation string without context.\n     *\n     * ### Notes\n     * Contains juicy parts of https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js\n     */\n    t(messages, n, options, ...args) {\n        // Singular is very easy, just pass dictionary message through strfmt\n        if (!options.pluralForm)\n            return (this._stringsPrefix +\n                Gettext.strfmt(this.removeContext(messages[0]), ...args));\n        let plural;\n        // if a plural func is given, use that one\n        if (options.pluralFunc) {\n            plural = options.pluralFunc(n);\n            // if plural form never interpreted before, do it now and store it\n        }\n        else if (!this._pluralFuncs[options.locale || '']) {\n            this._pluralFuncs[options.locale || ''] = this.getPluralFunc(this._pluralForms[options.locale || '']);\n            plural = this._pluralFuncs[options.locale || ''](n);\n            // we have the plural function, compute the plural result\n        }\n        else {\n            plural = this._pluralFuncs[options.locale || ''](n);\n        }\n        // If there is a problem with plurals, fallback to singular one\n        if ('undefined' === typeof !plural.plural ||\n            plural.plural > plural.nplurals ||\n            messages.length <= plural.plural)\n            plural.plural = 0;\n        return (this._stringsPrefix +\n            Gettext.strfmt(this.removeContext(messages[plural.plural]), ...[n].concat(args)));\n    }\n    /**\n     * Set messages after loading them.\n     *\n     * @param domain - The translation domain.\n     * @param locale - The translation locale.\n     * @param messages - List of translation strings.\n     * @param pluralForms - Plural form string.\n     *\n     * ### Notes\n     * Contains juicy parts of https://github.com/Orange-OpenSource/gettext.js/blob/master/lib.gettext.js\n     */\n    setMessages(domain, locale, messages, pluralForms) {\n        domain = normalizeDomain(domain);\n        if (pluralForms)\n            this._pluralForms[locale] = pluralForms;\n        if (!this._dictionary[domain])\n            this._dictionary[domain] = {};\n        this._dictionary[domain][locale] = messages;\n    }\n}\nexport { Gettext };\n//# sourceMappingURL=gettext.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Gettext } from './gettext';\n/**\n * A translator that loads a dummy language bundle that returns the same input\n * strings.\n */\nclass NullTranslator {\n    constructor(bundle) {\n        this._languageBundle = bundle;\n    }\n    load(domain) {\n        return this._languageBundle;\n    }\n    locale() {\n        return 'en';\n    }\n}\n/**\n * A language bundle that returns the same input strings.\n */\nclass NullLanguageBundle {\n    __(msgid, ...args) {\n        return this.gettext(msgid, ...args);\n    }\n    _n(msgid, msgid_plural, n, ...args) {\n        return this.ngettext(msgid, msgid_plural, n, ...args);\n    }\n    _p(msgctxt, msgid, ...args) {\n        return this.pgettext(msgctxt, msgid, ...args);\n    }\n    _np(msgctxt, msgid, msgid_plural, n, ...args) {\n        return this.npgettext(msgctxt, msgid, msgid_plural, n, ...args);\n    }\n    gettext(msgid, ...args) {\n        return Gettext.strfmt(msgid, ...args);\n    }\n    ngettext(msgid, msgid_plural, n, ...args) {\n        return Gettext.strfmt(n == 1 ? msgid : msgid_plural, ...[n].concat(args));\n    }\n    pgettext(msgctxt, msgid, ...args) {\n        return Gettext.strfmt(msgid, ...args);\n    }\n    npgettext(msgctxt, msgid, msgid_plural, n, ...args) {\n        return this.ngettext(msgid, msgid_plural, n, ...args);\n    }\n    dcnpgettext(domain, msgctxt, msgid, msgid_plural, n, ...args) {\n        return this.ngettext(msgid, msgid_plural, n, ...args);\n    }\n}\n/**\n * The application null translator instance that just returns the same text.\n * Also provides interpolation.\n */\nexport const nullTranslator = new NullTranslator(new NullLanguageBundle());\n//# sourceMappingURL=base.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * The url for the translations service.\n */\nconst TRANSLATIONS_SETTINGS_URL = 'api/translations';\n/**\n * Call the API extension\n *\n * @param locale API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestTranslationsAPI(translationsUrl = '', locale = '', init = {}, serverSettings = undefined) {\n    // Make request to Jupyter API\n    const settings = serverSettings !== null && serverSettings !== void 0 ? serverSettings : ServerConnection.makeSettings();\n    translationsUrl =\n        translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}/`;\n    const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.error('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n//# sourceMappingURL=server.js.map","/* ----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { Token } from '@lumino/coreutils';\nimport { requestTranslationsAPI } from './server';\nexport const ITranslatorConnector = new Token('@jupyterlab/translation:ITranslatorConnector');\nexport class TranslatorConnector extends DataConnector {\n    constructor(translationsUrl = '', serverSettings) {\n        super();\n        this._translationsUrl = translationsUrl;\n        this._serverSettings = serverSettings;\n    }\n    async fetch(opts) {\n        return requestTranslationsAPI(this._translationsUrl, opts.language, {}, this._serverSettings);\n    }\n}\nexport const ITranslator = new Token('@jupyterlab/translation:ITranslator');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Gettext } from './gettext';\nimport { TranslatorConnector } from './tokens';\nimport { normalizeDomain } from './utils';\n/**\n * Translation Manager\n */\nexport class TranslationManager {\n    constructor(translationsUrl = '', stringsPrefix, serverSettings) {\n        this._domainData = {};\n        this._translationBundles = {};\n        this._connector = new TranslatorConnector(translationsUrl, serverSettings);\n        this._stringsPrefix = stringsPrefix || '';\n        this._englishBundle = new Gettext({ stringsPrefix: this._stringsPrefix });\n    }\n    /**\n     * Fetch the localization data from the server.\n     *\n     * @param locale The language locale to use for translations.\n     */\n    async fetch(locale) {\n        var _a, _b;\n        this._currentLocale = locale;\n        this._languageData = await this._connector.fetch({ language: locale });\n        this._domainData = ((_a = this._languageData) === null || _a === void 0 ? void 0 : _a.data) || {};\n        const message = (_b = this._languageData) === null || _b === void 0 ? void 0 : _b.message;\n        if (message && locale !== 'en') {\n            console.warn(message);\n        }\n    }\n    /**\n     * Load translation bundles for a given domain.\n     *\n     * @param domain The translation domain to use for translations.\n     */\n    load(domain) {\n        if (this._domainData) {\n            if (this._currentLocale == 'en') {\n                return this._englishBundle;\n            }\n            else {\n                domain = normalizeDomain(domain);\n                if (!(domain in this._translationBundles)) {\n                    let translationBundle = new Gettext({\n                        domain: domain,\n                        locale: this._currentLocale,\n                        stringsPrefix: this._stringsPrefix\n                    });\n                    if (domain in this._domainData) {\n                        let metadata = this._domainData[domain][''];\n                        if ('plural_forms' in metadata) {\n                            metadata.pluralForms = metadata.plural_forms;\n                            delete metadata.plural_forms;\n                            this._domainData[domain][''] = metadata;\n                        }\n                        translationBundle.loadJSON(this._domainData[domain], domain);\n                    }\n                    this._translationBundles[domain] = translationBundle;\n                }\n                return this._translationBundles[domain];\n            }\n        }\n        else {\n            return this._englishBundle;\n        }\n    }\n}\n//# sourceMappingURL=manager.js.map"],"names":["normalizeDomain","domain","replace","Gettext","constructor","options","this","_defaults","locale","document","documentElement","getAttribute","pluralFunc","n","nplurals","plural","contextDelimiter","String","fromCharCode","stringsPrefix","_locale","_domain","_contextDelimiter","_stringsPrefix","_pluralFuncs","_dictionary","_pluralForms","messages","pluralForms","setContextDelimiter","delimiter","getContextDelimiter","setLocale","getLocale","setDomain","getDomain","setStringsPrefix","prefix","getStringsPrefix","static","fmt","args","str","p1","loadJSON","jsonData","Error","headers","jsonDataCopy","JSON","parse","stringify","setMessages","__","msgid","gettext","_n","msgid_plural","ngettext","_p","msgctxt","pgettext","_np","npgettext","dcnpgettext","translation","key","pluralForm","exist","locales","expandLocale","i","length","t","value","lastIndexOf","slice","push","getPluralFunc","RegExp","test","strfmt","Function","removeContext","indexOf","split","concat","nullTranslator","bundle","_languageBundle","load","async","requestTranslationsAPI","translationsUrl","init","serverSettings","settings","ServerConnection","appUrl","requestUrl","URLExt","baseUrl","response","error","data","text","console","ok","message","ITranslatorConnector","Token","TranslatorConnector","DataConnector","super","_translationsUrl","_serverSettings","opts","language","ITranslator","TranslationManager","_domainData","_translationBundles","_connector","_englishBundle","_a","_b","_currentLocale","_languageData","fetch","warn","translationBundle","metadata","plural_forms"],"sourceRoot":""}