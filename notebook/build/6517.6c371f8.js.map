{"version":3,"file":"6517.6c371f8.js","mappings":"2OAMO,MAAMA,UAAkB,EAAAC,OAI3BC,YAAYC,GACRC,QACAC,KAAKC,OAAS,KACdD,KAAKE,MAAQC,SAASC,cAAc,SACpCJ,KAAKF,WAAaA,GAAc,EAAAO,eAChCL,KAAKM,OAASN,KAAKF,WAAWS,KAAK,cACnCP,KAAKQ,SAAS,OACdR,KAAKS,SAAU,EACfT,KAAKU,WAKTA,WACI,MAAMC,EAAOX,KAAKE,OAASC,SAASC,cAAc,SAClDO,EAAKC,MAAQZ,KAAKM,OAAOO,GAAG,WAC5BF,EAAKG,gBAAkB,OACvBH,EAAKI,UAAY,UACjBJ,EAAKK,MAAMC,MAAQ,OACnBjB,KAAKE,MAAQS,EACb,MAAMO,EAAMf,SAASC,cAAc,OACnCc,EAAIH,UAAY,aAChBG,EAAIC,YAAYR,GAChB,MAAMS,EAAgB,EAAAC,QAAA,QAAgB,CAClCH,IAAK,OACLI,gBAAiB,SACjBC,OAAQ,OACRN,MAAO,OACPO,WAAY,MACZC,YAAa,SAEjBzB,KAAKQ,SAAS,iBACdU,EAAIC,YAAYC,GAChBpB,KAAK0B,KAAKP,YAAYD,GAK1BS,gBACI3B,KAAK0B,KAAKE,iBAAiB,YAAa5B,MACxCA,KAAKE,MAAM0B,iBAAiB,UAAW5B,MACvCA,KAAKE,MAAM0B,iBAAiB,QAAS5B,MACrCA,KAAKE,MAAM0B,iBAAiB,OAAQ5B,MAKxC6B,iBACI7B,KAAK0B,KAAKI,oBAAoB,YAAa9B,MAC3CA,KAAKE,MAAM4B,oBAAoB,UAAW9B,MAC1CA,KAAKE,MAAM4B,oBAAoB,QAAS9B,MACxCA,KAAKE,MAAM4B,oBAAoB,OAAQ9B,MAY3C+B,YAAYC,GACR,OAAQA,EAAMC,MACV,IAAK,YACDjC,KAAKkC,cAAcF,GACnB,MACJ,IAAK,UACDhC,KAAKmC,YAAYH,GACjB,MACJ,IAAK,OACDhC,KAAKoC,WACL,MACJ,IAAK,QACDpC,KAAKqC,aAWjBH,cAAcF,GACV,GAAKhC,KAAKS,SAKL,GAAIuB,EAAMM,SAAWtC,KAAKE,OACF,KAArBF,KAAKE,MAAMU,MAAc,CACzB,MAAMA,EAAQZ,KAAKE,MAAMU,MACzBZ,KAAKC,OAAOsC,OAAO3B,GACnBZ,KAAKE,MAAMsC,OACXxC,KAAKoC,iBATTpC,KAAKS,SAAU,EACfT,KAAKE,MAAMU,MAAQ,GACnBZ,KAAKE,MAAMuC,QAUfT,EAAMU,iBAKVL,YACSrC,KAAKS,SACNT,KAAKE,MAAMsC,OAQnBL,YAAYH,GACR,MAAMW,EAAMxC,SAASC,cAAc,QAQnC,GAPAuC,EAAI5B,UAAY,UAChB4B,EAAIC,UAAY5C,KAAKE,MAAMU,MAE3BT,SAAS0C,KAAK1B,YAAYwB,GAC1B3C,KAAKE,MAAMc,MAAMC,MAAQ0B,EAAIG,wBAAwB7B,MAAQ,EAAI,KACjEd,SAAS0C,KAAKE,YAAYJ,GAEJ,KAAlBX,EAAMgB,QAAgB,CACtB,MAAMpC,EAAQZ,KAAKE,MAAMU,MACzBZ,KAAKC,OAAOsC,OAAO3B,GACnBZ,KAAKE,MAAMsC,OACXxC,KAAKoC,YAMbA,WACQpC,KAAKS,UACLT,KAAKS,SAAU,EACfT,KAAKE,MAAMU,MAAQZ,KAAKM,OAAOO,GAAG,WAClCb,KAAKE,MAAMc,MAAMC,MAAQ,S,yBC/I9B,MAAMgC,UAAkB,EAAArD,OAI3BC,YAAYqD,GACRnD,QACAC,KAAKC,OAAS,KACdD,KAAKmD,SAAU,EACfnD,KAAKkD,KAAOA,EACZlD,KAAKQ,SAAS,OACdR,KAAKU,WAKTA,WACI,MAAMC,EAAOR,SAASC,cAAc,QACpCO,EAAKyC,YAAcpD,KAAKkD,KACxBvC,EAAKK,MAAMqC,aAAe,WAC1B,MAAMnC,EAAMf,SAASC,cAAc,OACnCc,EAAIH,UAAY,aAChBG,EAAIC,YAAYR,GAChB,MAAMS,EAAgB,EAAAkC,UAAA,QAAkB,CACpCpC,IAAK,OACLI,gBAAiB,SACjBC,OAAQ,OACRN,MAAO,OACPO,WAAY,MACZC,YAAa,SAEbzB,KAAKmD,QACLnD,KAAKQ,SAAS,gBAGdR,KAAKQ,SAAS,iBACdY,EAAcJ,MAAMuC,QAAU,QAElCrC,EAAIC,YAAYC,GAChBpB,KAAK0B,KAAKP,YAAYD,GAK1BS,gBACI3B,KAAK0B,KAAKE,iBAAiB,YAAa5B,MACxCA,KAAK0B,KAAKE,iBAAiB,YAAa5B,MACxCA,KAAK0B,KAAKE,iBAAiB,WAAY5B,MAK3C6B,iBACI7B,KAAK0B,KAAKI,oBAAoB,YAAa9B,MAC3CA,KAAK0B,KAAKI,oBAAoB,YAAa9B,MAC3CA,KAAK0B,KAAKI,oBAAoB,WAAY9B,MAY9C+B,YAAYC,GACR,OAAQA,EAAMC,MACV,IAAK,YACDjC,KAAKwD,YACL,MACJ,IAAK,YACDxD,KAAKyD,gBACL,MACJ,IAAK,WACDzD,KAAK0D,gBASjBC,kBACI,IAAIC,GACmC,QAAtBA,EAAK5D,KAAKC,cAA2B,IAAP2D,OAAgB,EAASA,EAAGC,aAAa7D,KAAKkD,SAC7ElD,KAAKmD,SACjBnD,KAAK8D,gBAMbA,gBACI,IAAIF,EAAIG,EACJ/D,KAAKmD,SACLnD,KAAKgE,YAAY,gBACgB,QAA/BJ,EAAK5D,KAAK0B,KAAKuC,kBAA+B,IAAPL,OAAgB,EAASA,EAAGM,WAAWlD,MAAMuC,QAClF,OACJvD,KAAKQ,SAAS,mBAGdR,KAAKgE,YAAY,kBACgB,QAA/BD,EAAK/D,KAAK0B,KAAKuC,kBAA+B,IAAPF,OAAgB,EAASA,EAAGG,WAAWlD,MAAMuC,QAClF,eACJvD,KAAKQ,SAAS,gBAElBR,KAAKmD,SAAWnD,KAAKmD,QAKzBK,YACI,IAAII,EAAIG,EACJ/D,KAAKmD,QACkB,QAAtBS,EAAK5D,KAAKC,cAA2B,IAAP2D,GAAyBA,EAAGO,UAAUnE,KAAKkD,MAGnD,QAAtBa,EAAK/D,KAAKC,cAA2B,IAAP8D,GAAyBA,EAAGxB,OAAOvC,KAAKkD,MAE3ElD,KAAK8D,gBAKTL,gBACIzD,KAAK0B,KAAK0C,UAAUC,IAAI,aAK5BX,eACI1D,KAAK0B,KAAK0C,UAAUE,OAAO,cCjI5B,MAAMC,UAAgB,EAAAC,cAAA,KAMzB3E,YAAY4E,EAASC,EAAK5E,GACtBC,QACAC,KAAK2E,QAAU,GACf3E,KAAK4E,OAAQ,EAEb5E,KAAKF,WAAaA,GAAc,EAAAO,eAChCL,KAAKM,OAASN,KAAKF,WAAWS,KAAK,cACnCP,KAAKyE,QAAUA,EACfzE,KAAK6E,OAAS,IAAI,EAAAC,YAClB9E,KAAK+E,iBACL/E,KAAKQ,SAAS,cAKlBuE,iBACI,MAAMF,EAAS7E,KAAK6E,OACd3E,EAAQ,IAAIP,EAAUK,KAAKF,YACjCI,EAAM8E,GAAK,UACXH,EAAOI,aAAa,EAAG/E,GAS3B2D,aAAaX,GACT,IAAIU,EACJ,MAAMsB,EAAqC,QAAvBtB,EAAK5D,KAAKyE,eAA4B,IAAPb,OAAgB,EAASA,EAAGsB,WAC/E,GAAIA,EAAY,CACZ,MAAMC,EAAOD,EAAWE,MAAMC,SAASC,IAAI,QAC3C,GAAIH,EACA,OAAOA,EAAKI,SAASrC,GAG7B,OAAO,EAOXX,OAAOW,GACH,IAAIU,EAAIG,EACR,MAAMyB,EAA+B,QAAvB5B,EAAK5D,KAAKyE,eAA4B,IAAPb,OAAgB,EAASA,EAAGsB,WACzE,GAAIM,EAAM,CACN,MAAMC,EAAU,IACmC,QAA1C1B,EAAKyB,EAAKJ,MAAMC,SAASC,IAAI,eAA4B,IAAPvB,EAAgBA,EAAK,IAEhF,IAAI2B,EAAYxC,EAAKyC,MAAM,UAC3BD,EAAYA,EAAUE,QAAO1E,GAAe,KAARA,IAAeuE,EAAQF,SAASrE,KACpEsE,EAAKJ,MAAMC,SAASQ,IAAI,OAAQJ,EAAQK,OAAOJ,IAC/C1F,KAAK+F,cACL/F,KAAKgG,kBAQb7B,UAAUjB,GACN,IAAIU,EAAIG,EACR,MAAMyB,EAA+B,QAAvB5B,EAAK5D,KAAKyE,eAA4B,IAAPb,OAAgB,EAASA,EAAGsB,WACzE,GAAIM,EAAM,CAIN,IAAIL,EAHY,IACmC,QAA1CpB,EAAKyB,EAAKJ,MAAMC,SAASC,IAAI,eAA4B,IAAPvB,EAAgBA,EAAK,IAE7D6B,QAAO1E,GAAOA,IAAQgC,IACzCsC,EAAKJ,MAAMC,SAASQ,IAAI,OAAQV,GACZ,IAAhBA,EAAKc,QACLT,EAAKJ,MAAMC,SAASa,OAAO,QAE/BlG,KAAK+F,cACL/F,KAAKgG,kBAObA,iBACI,MAAMnB,EAAS7E,KAAK6E,OACpB,IAAK,MAAMsB,KAAUtB,EAAOuB,QACxBD,EAAOE,SAOfC,WACI,IAAI1C,EAAIG,EAAIwC,EACZ,MAAMC,EAAmC,QAAvB5C,EAAK5D,KAAKyE,eAA4B,IAAPb,OAAgB,EAASA,EAAG6C,cACvEC,EAA2I,QAAlIH,EAAmF,QAA7ExC,EAAKyC,MAAAA,OAA2C,EAASA,EAASpB,aAA0B,IAAPrB,OAAgB,EAASA,EAAG2C,aAA0B,IAAPH,EAAgBA,EAAK,GACxKI,GAAU,IAAAC,QAAOF,GAAO,CAACC,EAASnB,KACpC,IAAI5B,EAEJ,MAAO,IAAI+C,KADuC,QAApC/C,EAAK4B,EAAKH,SAASC,IAAI,eAA4B,IAAP1B,EAAgBA,EAAK,MAEhF,IACH5D,KAAK2E,QAAU,IAAI,IAAIkC,IAAIF,IAAUf,QAAO1E,GAAe,KAARA,IAMvD6E,cACI/F,KAAKsG,WACL,MAAMzB,EAAS7E,KAAK6E,OACdiC,EAAajC,EAAOuB,QAAQR,QAAOmB,GAAc,YAATA,EAAE/B,KAChD8B,EAAWE,SAAQb,IACVnG,KAAK2E,QAAQY,SAASY,EAAOjD,OAC9BiD,EAAOc,aAGf,MAAMC,EAAiBJ,EAAWK,KAAIJ,GAAKA,EAAE7D,OAC7ClD,KAAK2E,QAAQqC,SAAQ9F,IACjB,IAAKgG,EAAe3B,SAASrE,GAAM,CAC/B,MAAMkG,EAAMvC,EAAOuB,QAAQH,OAAS,EACpCpB,EAAOI,aAAamC,EAAK,IAAInE,EAAU/B,QAQnDmG,aAAa7B,EAAML,GACfA,EAAOA,EAAKS,QAAO1E,GAAsB,iBAARA,IACjCiE,GAAO,IAAAyB,QAAOzB,GAAM,CAACwB,EAASzF,IACnB,IAAIyF,KAAYzF,EAAIyE,MAAM,YAClC,IACH,MAAM2B,EAAY,IAAI,IAAIT,IAAI1B,IAAOS,QAAO1E,GAAe,KAARA,IACnDsE,EAAKJ,MAAMC,SAASQ,IAAI,OAAQyB,GAChCtH,KAAK+F,cACL/F,KAAKgG,iBAKTuB,sBACIvH,KAAKgG,iBAKTwB,cACIxH,KAAK+F,cACL/F,KAAKgG,iBAMTrE,gBACI,IAAK3B,KAAK4E,MAAO,CACb,MAAMA,EAAQzE,SAASC,cAAc,SACrCwE,EAAMxB,YAAcpD,KAAKM,OAAOO,GAAG,aACnC+D,EAAM7D,UAAY,YAClBf,KAAKC,OAAOyB,KAAK+F,aAAa7C,EAAO5E,KAAK0B,MAC1C1B,KAAK4E,OAAQ,EAEb5E,KAAKyE,QAAQgC,gBACRzG,KAAKyE,QAAQgC,cAAciB,QAAQC,MAAMC,MAAK,KAC/C5H,KAAK+F,cACL/F,KAAKgG,oBAEThG,KAAKyE,QAAQgC,cAAcrB,MAAMsB,MAAMmB,QAAQC,SAAQ,KACnD9H,KAAK+F,cACL/F,KAAKgG,oBAEThG,KAAKyE,QAAQgC,cAAcsB,QAAQC,kBAAkBF,SAAQ,KACzD9H,KAAK+F,cACL/F,KAAKgG,qBAGbhG,KAAKyE,QAAQwD,eAAeH,SAAQ,KAChC9H,KAAK+F,cACL/F,KAAKgG,oBAMbkC,8BACI,MAAM/C,EAAOnF,KAAKyE,QAAQS,WAAWE,MAAMC,SAASC,IAAI,QACxD,IAAI6C,EAAU,GACVhD,IACoB,iBAATA,EACPgD,EAAQC,KAAKjD,GAGbgD,EAAUhD,GAGlBnF,KAAKqH,aAAarH,KAAKyE,QAAQS,WAAYiD","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/addwidget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/tool.js"],"sourcesContent":["import { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class AddWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(translator) {\n        super();\n        this.parent = null;\n        this.input = document.createElement('input');\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass('tag');\n        this.editing = false;\n        this.buildTag();\n    }\n    /**\n     * Create input box with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = this.input || document.createElement('input');\n        text.value = this._trans.__('Add Tag');\n        text.contentEditable = 'true';\n        text.className = 'add-tag';\n        text.style.width = '49px';\n        this.input = text;\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = addIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '3px',\n            marginRight: '-5px'\n        });\n        this.addClass('unapplied-tag');\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('focus', this);\n        this.input.addEventListener('blur', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('focus', this);\n        this.input.removeEventListener('blur', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'blur':\n                this._evtBlur();\n                break;\n            case 'focus':\n                this._evtFocus();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMouseDown(event) {\n        if (!this.editing) {\n            this.editing = true;\n            this.input.value = '';\n            this.input.focus();\n        }\n        else if (event.target !== this.input) {\n            if (this.input.value !== '') {\n                const value = this.input.value;\n                this.parent.addTag(value);\n                this.input.blur();\n                this._evtBlur();\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'focus'` event for the input box.\n     */\n    _evtFocus() {\n        if (!this.editing) {\n            this.input.blur();\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtKeyDown(event) {\n        const tmp = document.createElement('span');\n        tmp.className = 'add-tag';\n        tmp.innerHTML = this.input.value;\n        // set width to the pixel length of the text\n        document.body.appendChild(tmp);\n        this.input.style.width = tmp.getBoundingClientRect().width + 8 + 'px';\n        document.body.removeChild(tmp);\n        // if they hit Enter, add the tag and reset state\n        if (event.keyCode === 13) {\n            const value = this.input.value;\n            this.parent.addTag(value);\n            this.input.blur();\n            this._evtBlur();\n        }\n    }\n    /**\n     * Handle the `'focusout'` event for the input box.\n     */\n    _evtBlur() {\n        if (this.editing) {\n            this.editing = false;\n            this.input.value = this._trans.__('Add Tag');\n            this.input.style.width = '49px';\n        }\n    }\n}\n//# sourceMappingURL=addwidget.js.map","import { checkIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class TagWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(name) {\n        super();\n        this.parent = null;\n        this.applied = true;\n        this.name = name;\n        this.addClass('tag');\n        this.buildTag();\n    }\n    /**\n     * Create tag div with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = document.createElement('span');\n        text.textContent = this.name;\n        text.style.textOverflow = 'ellipsis';\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = checkIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '5px',\n            marginRight: '-3px'\n        });\n        if (this.applied) {\n            this.addClass('applied-tag');\n        }\n        else {\n            this.addClass('unapplied-tag');\n            iconContainer.style.display = 'none';\n        }\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.node.addEventListener('mouseover', this);\n        this.node.addEventListener('mouseout', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.node.removeEventListener('mouseover', this);\n        this.node.removeEventListener('mouseout', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtClick();\n                break;\n            case 'mouseover':\n                this._evtMouseOver();\n                break;\n            case 'mouseout':\n                this._evtMouseOut();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `update-request` messages. Check if applied to current active cell.\n     */\n    onUpdateRequest() {\n        var _a;\n        const applied = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.checkApplied(this.name);\n        if (applied !== this.applied) {\n            this.toggleApplied();\n        }\n    }\n    /**\n     * Update styling to reflect whether tag is applied to current active cell.\n     */\n    toggleApplied() {\n        var _a, _b;\n        if (this.applied) {\n            this.removeClass('applied-tag');\n            ((_a = this.node.firstChild) === null || _a === void 0 ? void 0 : _a.lastChild).style.display =\n                'none';\n            this.addClass('unapplied-tag');\n        }\n        else {\n            this.removeClass('unapplied-tag');\n            ((_b = this.node.firstChild) === null || _b === void 0 ? void 0 : _b.lastChild).style.display =\n                'inline-block';\n            this.addClass('applied-tag');\n        }\n        this.applied = !this.applied;\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick() {\n        var _a, _b;\n        if (this.applied) {\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.removeTag(this.name);\n        }\n        else {\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.addTag(this.name);\n        }\n        this.toggleApplied();\n    }\n    /**\n     * Handle the `'mouseover'` event for the widget.\n     */\n    _evtMouseOver() {\n        this.node.classList.add('tag-hover');\n    }\n    /**\n     * Handle the `'mouseout'` event for the widget.\n     */\n    _evtMouseOut() {\n        this.node.classList.remove('tag-hover');\n    }\n}\n//# sourceMappingURL=widget.js.map","import { NotebookTools } from '@jupyterlab/notebook';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { reduce } from '@lumino/algorithm';\nimport { PanelLayout } from '@lumino/widgets';\nimport { AddWidget } from './addwidget';\nimport { TagWidget } from './widget';\n/**\n * A Tool for tag operations.\n */\nexport class TagTool extends NotebookTools.Tool {\n    /**\n     * Construct a new tag Tool.\n     *\n     * @param tracker - The notebook tracker.\n     */\n    constructor(tracker, app, translator) {\n        super();\n        this.tagList = [];\n        this.label = false;\n        app;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.tracker = tracker;\n        this.layout = new PanelLayout();\n        this.createTagInput();\n        this.addClass('jp-TagTool');\n    }\n    /**\n     * Add an AddWidget input box to the layout.\n     */\n    createTagInput() {\n        const layout = this.layout;\n        const input = new AddWidget(this.translator);\n        input.id = 'add-tag';\n        layout.insertWidget(0, input);\n    }\n    /**\n     * Check whether a tag is applied to the current active cell\n     *\n     * @param name - The name of the tag.\n     *\n     * @returns A boolean representing whether it is applied.\n     */\n    checkApplied(name) {\n        var _a;\n        const activeCell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (activeCell) {\n            const tags = activeCell.model.metadata.get('tags');\n            if (tags) {\n                return tags.includes(name);\n            }\n        }\n        return false;\n    }\n    /**\n     * Add a tag to the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    addTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tagsToAdd = name.split(/[,\\s]+/);\n            tagsToAdd = tagsToAdd.filter(tag => tag !== '' && !oldTags.includes(tag));\n            cell.model.metadata.set('tags', oldTags.concat(tagsToAdd));\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Remove a tag from the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    removeTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tags = oldTags.filter(tag => tag !== name);\n            cell.model.metadata.set('tags', tags);\n            if (tags.length === 0) {\n                cell.model.metadata.delete('tags');\n            }\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Update each tag widget to represent whether it is applied to the current\n     * active cell.\n     */\n    loadActiveTags() {\n        const layout = this.layout;\n        for (const widget of layout.widgets) {\n            widget.update();\n        }\n    }\n    /**\n     * Pull from cell metadata all the tags used in the notebook and update the\n     * stored tag list.\n     */\n    pullTags() {\n        var _a, _b, _c;\n        const notebook = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.currentWidget;\n        const cells = (_c = (_b = notebook === null || notebook === void 0 ? void 0 : notebook.model) === null || _b === void 0 ? void 0 : _b.cells) !== null && _c !== void 0 ? _c : [];\n        const allTags = reduce(cells, (allTags, cell) => {\n            var _a;\n            const tags = (_a = cell.metadata.get('tags')) !== null && _a !== void 0 ? _a : [];\n            return [...allTags, ...tags];\n        }, []);\n        this.tagList = [...new Set(allTags)].filter(tag => tag !== '');\n    }\n    /**\n     * Pull the most recent list of tags and update the tag widgets - dispose if\n     * the tag no longer exists, and create new widgets for new tags.\n     */\n    refreshTags() {\n        this.pullTags();\n        const layout = this.layout;\n        const tagWidgets = layout.widgets.filter(w => w.id !== 'add-tag');\n        tagWidgets.forEach(widget => {\n            if (!this.tagList.includes(widget.name)) {\n                widget.dispose();\n            }\n        });\n        const tagWidgetNames = tagWidgets.map(w => w.name);\n        this.tagList.forEach(tag => {\n            if (!tagWidgetNames.includes(tag)) {\n                const idx = layout.widgets.length - 1;\n                layout.insertWidget(idx, new TagWidget(tag));\n            }\n        });\n    }\n    /**\n     * Validate the 'tags' of cell metadata, ensuring it is a list of strings and\n     * that each string doesn't include spaces.\n     */\n    validateTags(cell, tags) {\n        tags = tags.filter(tag => typeof tag === 'string');\n        tags = reduce(tags, (allTags, tag) => {\n            return [...allTags, ...tag.split(/[,\\s]+/)];\n        }, []);\n        const validTags = [...new Set(tags)].filter(tag => tag !== '');\n        cell.model.metadata.set('tags', validTags);\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    onActiveCellChanged() {\n        this.loadActiveTags();\n    }\n    /**\n     * Get all tags once available.\n     */\n    onAfterShow() {\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Upon attach, add label if it doesn't already exist and listen for changes\n     * from the notebook tracker.\n     */\n    onAfterAttach() {\n        if (!this.label) {\n            const label = document.createElement('label');\n            label.textContent = this._trans.__('Cell Tags');\n            label.className = 'tag-label';\n            this.parent.node.insertBefore(label, this.node);\n            this.label = true;\n        }\n        if (this.tracker.currentWidget) {\n            void this.tracker.currentWidget.context.ready.then(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n            this.tracker.currentWidget.model.cells.changed.connect(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n            this.tracker.currentWidget.content.activeCellChanged.connect(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n        }\n        this.tracker.currentChanged.connect(() => {\n            this.refreshTags();\n            this.loadActiveTags();\n        });\n    }\n    /**\n     * Handle a change to active cell metadata.\n     */\n    onActiveCellMetadataChanged() {\n        const tags = this.tracker.activeCell.model.metadata.get('tags');\n        let taglist = [];\n        if (tags) {\n            if (typeof tags === 'string') {\n                taglist.push(tags);\n            }\n            else {\n                taglist = tags;\n            }\n        }\n        this.validateTags(this.tracker.activeCell, taglist);\n    }\n}\n//# sourceMappingURL=tool.js.map"],"names":["AddWidget","Widget","constructor","translator","super","this","parent","input","document","createElement","nullTranslator","_trans","load","addClass","editing","buildTag","text","value","__","contentEditable","className","style","width","tag","appendChild","iconContainer","addIcon","elementPosition","height","marginLeft","marginRight","node","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","handleEvent","event","type","_evtMouseDown","_evtKeyDown","_evtBlur","_evtFocus","target","addTag","blur","focus","preventDefault","tmp","innerHTML","body","getBoundingClientRect","removeChild","keyCode","TagWidget","name","applied","textContent","textOverflow","checkIcon","display","_evtClick","_evtMouseOver","_evtMouseOut","onUpdateRequest","_a","checkApplied","toggleApplied","_b","removeClass","firstChild","lastChild","removeTag","classList","add","remove","TagTool","NotebookTools","tracker","app","tagList","label","layout","PanelLayout","createTagInput","id","insertWidget","activeCell","tags","model","metadata","get","includes","cell","oldTags","tagsToAdd","split","filter","set","concat","refreshTags","loadActiveTags","length","delete","widget","widgets","update","pullTags","_c","notebook","currentWidget","cells","allTags","reduce","Set","tagWidgets","w","forEach","dispose","tagWidgetNames","map","idx","validateTags","validTags","onActiveCellChanged","onAfterShow","insertBefore","context","ready","then","changed","connect","content","activeCellChanged","currentChanged","onActiveCellMetadataChanged","taglist","push"],"sourceRoot":""}