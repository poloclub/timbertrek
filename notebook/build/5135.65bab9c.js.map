{"version":3,"file":"5135.65bab9c.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/running-extension/lib/opentabs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/running-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/running-extension/lib/kernels.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { fileIcon, LabIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A class used to consolidate the signals used to rerender the open tabs section.\n */\nclass OpenTabsSignaler {\n    constructor(labShell) {\n        this._tabsChanged = new Signal(this);\n        this._widgets = [];\n        this._labShell = labShell;\n        this._labShell.layoutModified.connect(this._emitTabsChanged, this);\n    }\n    /**\n     * A signal that fires when the open tabs section should be rerendered.\n     */\n    get tabsChanged() {\n        return this._tabsChanged;\n    }\n    /**\n     * Add a widget to watch for title changing.\n     *\n     * @param widget A widget whose title may change.\n     */\n    addWidget(widget) {\n        widget.title.changed.connect(this._emitTabsChanged, this);\n        this._widgets.push(widget);\n    }\n    /**\n     * Emit the main signal that indicates the open tabs should be rerendered.\n     */\n    _emitTabsChanged() {\n        this._widgets.forEach(widget => {\n            widget.title.changed.disconnect(this._emitTabsChanged, this);\n        });\n        this._widgets = [];\n        this._tabsChanged.emit(void 0);\n    }\n}\n/**\n * Add the open tabs section to the running panel.\n *\n * @param managers - The IRunningSessionManagers used to register this section.\n * @param translator - The translator to use.\n * @param labShell - The ILabShell.\n */\nexport function addOpenTabsSessionManager(managers, translator, labShell) {\n    const signaler = new OpenTabsSignaler(labShell);\n    const trans = translator.load('jupyterlab');\n    managers.add({\n        name: trans.__('Open Tabs'),\n        running: () => {\n            return toArray(labShell.widgets('main')).map((widget) => {\n                signaler.addWidget(widget);\n                return new OpenTab(widget);\n            });\n        },\n        shutdownAll: () => {\n            toArray(labShell.widgets('main')).forEach((widget) => {\n                widget.close();\n            });\n        },\n        refreshRunning: () => {\n            return void 0;\n        },\n        runningChanged: signaler.tabsChanged,\n        shutdownLabel: trans.__('Close'),\n        shutdownAllLabel: trans.__('Close All'),\n        shutdownAllConfirmationText: trans.__('Are you sure you want to close all open tabs?')\n    });\n    class OpenTab {\n        constructor(widget) {\n            this._widget = widget;\n        }\n        open() {\n            labShell.activateById(this._widget.id);\n        }\n        shutdown() {\n            this._widget.close();\n        }\n        icon() {\n            const widgetIcon = this._widget.title.icon;\n            return widgetIcon instanceof LabIcon ? widgetIcon : fileIcon;\n        }\n        label() {\n            return this._widget.title.label;\n        }\n        labelTitle() {\n            let labelTitle;\n            if (this._widget instanceof DocumentWidget) {\n                labelTitle = this._widget.context.path;\n            }\n            else {\n                labelTitle = this._widget.title.label;\n            }\n            return labelTitle;\n        }\n    }\n}\n//# sourceMappingURL=opentabs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module running-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IRunningSessionManagers, RunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { runningIcon } from '@jupyterlab/ui-components';\nimport { addKernelRunningSessionManager } from './kernels';\nimport { addOpenTabsSessionManager } from './opentabs';\n/**\n * The default running sessions extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/running-extension:plugin',\n    provides: IRunningSessionManagers,\n    requires: [ITranslator],\n    optional: [ILayoutRestorer, ILabShell],\n    autoStart: true\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n/**\n * Activate the running plugin.\n */\nfunction activate(app, translator, restorer, labShell) {\n    const trans = translator.load('jupyterlab');\n    const runningSessionManagers = new RunningSessionManagers();\n    const running = new RunningSessions(runningSessionManagers, translator);\n    running.id = 'jp-running-sessions';\n    running.title.caption = trans.__('Running Terminals and Kernels');\n    running.title.icon = runningIcon;\n    running.node.setAttribute('role', 'region');\n    running.node.setAttribute('aria-label', trans.__('Running Sessions section'));\n    // Let the application restorer track the running panel for restoration of\n    // application state (e.g. setting the running panel as the current side bar\n    // widget).\n    if (restorer) {\n        restorer.add(running, 'running-sessions');\n    }\n    if (labShell) {\n        addOpenTabsSessionManager(runningSessionManagers, translator, labShell);\n    }\n    addKernelRunningSessionManager(runningSessionManagers, translator, app);\n    // Rank has been chosen somewhat arbitrarily to give priority to the running\n    // sessions widget in the sidebar.\n    app.shell.add(running, 'left', { rank: 200 });\n    return runningSessionManagers;\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { consoleIcon, fileIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\n/**\n * Add the running kernel manager (notebooks & consoles) to the running panel.\n */\nexport function addKernelRunningSessionManager(managers, translator, app) {\n    const trans = translator.load('jupyterlab');\n    const manager = app.serviceManager.sessions;\n    const specsManager = app.serviceManager.kernelspecs;\n    function filterSessions(m) {\n        return !!((m.name || PathExt.basename(m.path)).indexOf('.') !== -1 || m.name);\n    }\n    managers.add({\n        name: trans.__('Kernels'),\n        running: () => {\n            return toArray(manager.running())\n                .filter(filterSessions)\n                .map(model => new RunningKernel(model));\n        },\n        shutdownAll: () => manager.shutdownAll(),\n        refreshRunning: () => manager.refreshRunning(),\n        runningChanged: manager.runningChanged,\n        shutdownLabel: trans.__('Shut Down'),\n        shutdownAllLabel: trans.__('Shut Down All'),\n        shutdownAllConfirmationText: trans.__('Are you sure you want to permanently shut down all running kernels?')\n    });\n    class RunningKernel {\n        constructor(model) {\n            this._model = model;\n        }\n        open() {\n            const { path, type } = this._model;\n            if (type.toLowerCase() === 'console') {\n                void app.commands.execute('console:open', { path });\n            }\n            else {\n                void app.commands.execute('docmanager:open', { path });\n            }\n        }\n        shutdown() {\n            return manager.shutdown(this._model.id);\n        }\n        icon() {\n            const { name, path, type } = this._model;\n            if ((name || PathExt.basename(path)).indexOf('.ipynb') !== -1) {\n                return notebookIcon;\n            }\n            else if (type.toLowerCase() === 'console') {\n                return consoleIcon;\n            }\n            return fileIcon;\n        }\n        label() {\n            return this._model.name || PathExt.basename(this._model.path);\n        }\n        labelTitle() {\n            const { kernel, path } = this._model;\n            let kernelName = kernel === null || kernel === void 0 ? void 0 : kernel.name;\n            if (kernelName && specsManager.specs) {\n                const spec = specsManager.specs.kernelspecs[kernelName];\n                kernelName = spec ? spec.display_name : 'unknown';\n            }\n            return trans.__('Path: %1\\nKernel: %2', path, kernelName);\n        }\n    }\n}\n//# sourceMappingURL=kernels.js.map"],"names":["OpenTabsSignaler","constructor","labShell","this","_tabsChanged","Signal","_widgets","_labShell","layoutModified","connect","_emitTabsChanged","tabsChanged","addWidget","widget","title","changed","push","forEach","disconnect","emit","activate","app","translator","restorer","trans","load","runningSessionManagers","RunningSessionManagers","running","RunningSessions","id","caption","__","icon","runningIcon","node","setAttribute","add","managers","signaler","name","toArray","widgets","map","OpenTab","shutdownAll","close","refreshRunning","runningChanged","shutdownLabel","shutdownAllLabel","shutdownAllConfirmationText","_widget","open","activateById","shutdown","widgetIcon","LabIcon","fileIcon","label","labelTitle","DocumentWidget","context","path","addOpenTabsSessionManager","manager","serviceManager","sessions","specsManager","kernelspecs","filterSessions","m","PathExt","indexOf","filter","model","RunningKernel","_model","type","toLowerCase","commands","execute","notebookIcon","consoleIcon","kernel","kernelName","specs","spec","display_name","addKernelRunningSessionManager","shell","rank","provides","IRunningSessionManagers","requires","ITranslator","optional","ILayoutRestorer","ILabShell","autoStart"],"sourceRoot":""}