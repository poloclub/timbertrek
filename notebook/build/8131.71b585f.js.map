{"version":3,"file":"8131.71b585f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/./lab/build/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLab } from '@jupyterlab/application';\n\nimport { JupyterLiteServer } from '@jupyterlite/server';\n\n// The webpack public path needs to be set before loading the CSS assets.\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nconst styles = import('./style.js');\n\nconst serverExtensions = [\n  import('@jupyterlite/javascript-kernel-extension'),\n  import('@jupyterlite/pyolite-kernel-extension'),\n  import('@jupyterlite/server-extension')\n];\n\n// custom list of disabled plugins\nconst disabled = [\n  '@jupyterlab/apputils-extension:workspaces',\n  '@jupyterlab/application-extension:logo',\n  '@jupyterlab/application-extension:main',\n  '@jupyterlab/application-extension:tree-resolver',\n  '@jupyterlab/apputils-extension:resolver',\n  '@jupyterlab/docmanager-extension:download',\n  '@jupyterlab/filebrowser-extension:download',\n  '@jupyterlab/filebrowser-extension:share-file',\n  '@jupyterlab/help-extension:about'\n];\n\nasync function createModule(scope, module) {\n  try {\n    const factory = await window._JUPYTERLAB[scope].get(module);\n    return factory();\n  } catch (e) {\n    console.warn(`Failed to create module: package: ${scope}; module: ${module}`);\n    throw e;\n  }\n}\n\n/**\n * The main entry point for the application.\n */\nasync function main() {\n  // Make sure the styles have loaded\n  await styles;\n\n  const pluginsToRegister = [];\n  const federatedExtensionPromises = [];\n  const federatedMimeExtensionPromises = [];\n  const federatedStylePromises = [];\n  const litePluginsToRegister = [];\n  const liteExtensionPromises = [];\n\n  // This is all the data needed to load and activate plugins. This should be\n  // gathered by the server and put onto the initial page template.\n  const extensions = JSON.parse(\n    PageConfig.getOption('federated_extensions')\n  );\n\n  // The set of federated extension names.\n  const federatedExtensionNames = new Set();\n\n  extensions.forEach(data => {\n    if (data.liteExtension) {\n      liteExtensionPromises.push(createModule(data.name, data.extension));\n      return;\n    }\n    if (data.extension) {\n      federatedExtensionNames.add(data.name);\n      federatedExtensionPromises.push(createModule(data.name, data.extension));\n    }\n    if (data.mimeExtension) {\n      federatedExtensionNames.add(data.name);\n      federatedMimeExtensionPromises.push(createModule(data.name, data.mimeExtension));\n    }\n    if (data.style) {\n      federatedStylePromises.push(createModule(data.name, data.style));\n    }\n  });\n\n  /**\n   * Iterate over active plugins in an extension.\n   */\n  function* activePlugins(extension) {\n    // Handle commonjs or es2015 modules\n    let exports;\n    if (extension.hasOwnProperty('__esModule')) {\n      exports = extension.default;\n    } else {\n      // CommonJS exports.\n      exports = extension;\n    }\n\n    let plugins = Array.isArray(exports) ? exports : [exports];\n    for (let plugin of plugins) {\n      if (\n        PageConfig.Extension.isDisabled(plugin.id) ||\n        disabled.includes(plugin.id) ||\n        disabled.includes(plugin.id.split(':')[0])\n      ) {\n        continue;\n      }\n      yield plugin;\n    }\n  }\n\n  // Handle the mime extensions.\n  const mimeExtensions = [];\n  if (!federatedExtensionNames.has('@jupyterlab/json-extension')) {\n    try {\n      let ext = require('@jupyterlab/json-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/javascript-extension')) {\n    try {\n      let ext = require('@jupyterlab/javascript-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/pdf-extension')) {\n    try {\n      let ext = require('@jupyterlab/pdf-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/vega5-extension')) {\n    try {\n      let ext = require('@jupyterlab/vega5-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlite/iframe-extension')) {\n    try {\n      let ext = require('@jupyterlite/iframe-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated mime extensions.\n  const federatedMimeExtensions = await Promise.allSettled(federatedMimeExtensionPromises);\n  federatedMimeExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        mimeExtensions.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Handled the standard extensions.\n  if (!federatedExtensionNames.has('@jupyterlab/application-extension')) {\n    try {\n      let ext = require('@jupyterlab/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/apputils-extension')) {\n    try {\n      let ext = require('@jupyterlab/apputils-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/celltags-extension')) {\n    try {\n      let ext = require('@jupyterlab/celltags-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/codemirror-extension')) {\n    try {\n      let ext = require('@jupyterlab/codemirror-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/completer-extension')) {\n    try {\n      let ext = require('@jupyterlab/completer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/console-extension')) {\n    try {\n      let ext = require('@jupyterlab/console-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/csvviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/csvviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/docmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/docmanager-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/filebrowser-extension')) {\n    try {\n      let ext = require('@jupyterlab/filebrowser-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/fileeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/fileeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/help-extension')) {\n    try {\n      let ext = require('@jupyterlab/help-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/htmlviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/htmlviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/imageviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/imageviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/inspector-extension')) {\n    try {\n      let ext = require('@jupyterlab/inspector-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/launcher-extension')) {\n    try {\n      let ext = require('@jupyterlab/launcher-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/logconsole-extension')) {\n    try {\n      let ext = require('@jupyterlab/logconsole-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mainmenu-extension')) {\n    try {\n      let ext = require('@jupyterlab/mainmenu-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/markdownviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/markdownviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mathjax2-extension')) {\n    try {\n      let ext = require('@jupyterlab/mathjax2-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/notebook-extension')) {\n    try {\n      let ext = require('@jupyterlab/notebook-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/rendermime-extension')) {\n    try {\n      let ext = require('@jupyterlab/rendermime-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/running-extension')) {\n    try {\n      let ext = require('@jupyterlab/running-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/settingeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/settingeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/shortcuts-extension')) {\n    try {\n      let ext = require('@jupyterlab/shortcuts-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/statusbar-extension')) {\n    try {\n      let ext = require('@jupyterlab/statusbar-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-dark-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-dark-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-light-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-light-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/toc-extension')) {\n    try {\n      let ext = require('@jupyterlab/toc-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/tooltip-extension')) {\n    try {\n      let ext = require('@jupyterlab/tooltip-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/translation-extension')) {\n    try {\n      let ext = require('@jupyterlab/translation-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/ui-components-extension')) {\n    try {\n      let ext = require('@jupyterlab/ui-components-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlite/application-extension')) {\n    try {\n      let ext = require('@jupyterlite/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated extensions.\n  const federatedExtensions = await Promise.allSettled(federatedExtensionPromises);\n  federatedExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        pluginsToRegister.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Add the base serverlite extensions\n  const baseServerExtensions = await Promise.all(serverExtensions);\n  baseServerExtensions.forEach(p => {\n    for (let plugin of activePlugins(p)) {\n      litePluginsToRegister.push(plugin);\n    }\n  })\n\n  // Add the serverlite federated extensions.\n  const federatedLiteExtensions = await Promise.allSettled(liteExtensionPromises);\n  federatedLiteExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        litePluginsToRegister.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Load all federated component styles and log errors for any that do not\n  (await Promise.allSettled(federatedStylePromises)).filter(({status}) => status === \"rejected\").forEach(({reason}) => {\n     console.error(reason);\n    });\n\n  // create the in-browser JupyterLite Server\n  const jupyterLiteServer = new JupyterLiteServer({});\n  jupyterLiteServer.registerPluginModules(litePluginsToRegister);\n  // start the server\n  await jupyterLiteServer.start();\n\n  // retrieve the custom service manager from the server app\n  const { serviceManager } = jupyterLiteServer;\n\n  // create a full-blown JupyterLab frontend\n  const lab = new JupyterLab({\n    mimeExtensions,\n    serviceManager,\n    disabled\n  });\n  lab.name = PageConfig.getOption('appName') || 'JupyterLite';\n\n  lab.registerPluginModules(pluginsToRegister);\n\n  // Expose global app instance when in dev mode or when toggled explicitly.\n  const exposeAppInBrowser =\n    (PageConfig.getOption('exposeAppInBrowser') || '').toLowerCase() === 'true';\n\n  if (exposeAppInBrowser) {\n    window.jupyterapp = lab;\n  }\n\n  /* eslint-disable no-console */\n  await lab.start();\n  await lab.restored;\n}\n\nmain();\n"],"names":["styles","serverExtensions","disabled","async","createModule","scope","module","window","_JUPYTERLAB","get","e","console","warn","pluginsToRegister","federatedExtensionPromises","federatedMimeExtensionPromises","federatedStylePromises","litePluginsToRegister","liteExtensionPromises","extensions","JSON","parse","PageConfig","federatedExtensionNames","Set","activePlugins","extension","exports","hasOwnProperty","default","plugins","Array","isArray","plugin","id","includes","split","forEach","data","liteExtension","push","name","add","mimeExtension","style","mimeExtensions","has","ext","error","Promise","allSettled","p","status","value","reason","all","filter","jupyterLiteServer","JupyterLiteServer","registerPluginModules","start","serviceManager","lab","JupyterLab","toLowerCase","jupyterapp","restored","main"],"sourceRoot":""}