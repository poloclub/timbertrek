{"version":3,"file":"4171.a7bd277.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole-extension/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { GroupItem, interactiveItem, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { listIcon } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport React from 'react';\n/**\n * A pure functional component for a Log Console status item.\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for rendering the Log Console status.\n */\nfunction LogConsoleStatusComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    let title = '';\n    if (props.newMessages > 0) {\n        title = trans.__('%1 new messages, %2 log entries for %3', props.newMessages, props.logEntries, props.source);\n    }\n    else {\n        title += trans.__('%1 log entries for %2', props.logEntries, props.source);\n    }\n    return (React.createElement(GroupItem, { spacing: 0, onClick: props.handleClick, title: title },\n        React.createElement(listIcon.react, { top: '2px', stylesheet: 'statusBar' }),\n        props.newMessages > 0 ? React.createElement(TextItem, { source: props.newMessages }) : React.createElement(React.Fragment, null)));\n}\n/**\n * A VDomRenderer widget for displaying the status of Log Console logs.\n */\nexport class LogConsoleStatus extends VDomRenderer {\n    /**\n     * Construct the log console status widget.\n     *\n     * @param options - The status widget initialization options.\n     */\n    constructor(options) {\n        super(new LogConsoleStatus.Model(options.loggerRegistry));\n        this.translator = options.translator || nullTranslator;\n        this._handleClick = options.handleClick;\n        this.addClass(interactiveItem);\n        this.addClass('jp-LogConsoleStatusItem');\n    }\n    /**\n     * Render the log console status item.\n     */\n    render() {\n        if (this.model === null || this.model.version === 0) {\n            return null;\n        }\n        const { flashEnabled, messages, source, version, versionDisplayed, versionNotified } = this.model;\n        if (source !== null && flashEnabled && version > versionNotified) {\n            this._flashHighlight();\n            this.model.sourceNotified(source, version);\n        }\n        else if (source !== null && flashEnabled && version > versionDisplayed) {\n            this._showHighlighted();\n        }\n        else {\n            this._clearHighlight();\n        }\n        return (React.createElement(LogConsoleStatusComponent, { handleClick: this._handleClick, logEntries: messages, newMessages: version - versionDisplayed, source: this.model.source, translator: this.translator }));\n    }\n    _flashHighlight() {\n        this._showHighlighted();\n        // To make sure the browser triggers the animation, we remove the class,\n        // wait for an animation frame, then add it back\n        this.removeClass('jp-LogConsole-flash');\n        requestAnimationFrame(() => {\n            this.addClass('jp-LogConsole-flash');\n        });\n    }\n    _showHighlighted() {\n        this.addClass('jp-mod-selected');\n    }\n    _clearHighlight() {\n        this.removeClass('jp-LogConsole-flash');\n        this.removeClass('jp-mod-selected');\n    }\n}\n/**\n * A namespace for Log Console log status.\n */\n(function (LogConsoleStatus) {\n    /**\n     * A VDomModel for the LogConsoleStatus item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Create a new LogConsoleStatus model.\n         *\n         * @param loggerRegistry - The logger registry providing the logs.\n         */\n        constructor(loggerRegistry) {\n            super();\n            /**\n             * A signal emitted when the flash enablement changes.\n             */\n            this.flashEnabledChanged = new Signal(this);\n            this._flashEnabled = true;\n            this._source = null;\n            /**\n             * The view status of each source.\n             *\n             * #### Notes\n             * Keys are source names, value is a list of two numbers. The first\n             * represents the version of the messages that was last displayed to the\n             * user, the second represents the version that we last notified the user\n             * about.\n             */\n            this._sourceVersion = new Map();\n            this._loggerRegistry = loggerRegistry;\n            this._loggerRegistry.registryChanged.connect(this._handleLogRegistryChange, this);\n            this._handleLogRegistryChange();\n        }\n        /**\n         * Number of messages currently in the current source.\n         */\n        get messages() {\n            if (this._source === null) {\n                return 0;\n            }\n            const logger = this._loggerRegistry.getLogger(this._source);\n            return logger.length;\n        }\n        /**\n         * The number of messages ever stored by the current source.\n         */\n        get version() {\n            if (this._source === null) {\n                return 0;\n            }\n            const logger = this._loggerRegistry.getLogger(this._source);\n            return logger.version;\n        }\n        /**\n         * The name of the active log source\n         */\n        get source() {\n            return this._source;\n        }\n        set source(name) {\n            if (this._source === name) {\n                return;\n            }\n            this._source = name;\n            // refresh rendering\n            this.stateChanged.emit();\n        }\n        /**\n         * The last source version that was displayed.\n         */\n        get versionDisplayed() {\n            var _a, _b;\n            if (this._source === null) {\n                return 0;\n            }\n            return (_b = (_a = this._sourceVersion.get(this._source)) === null || _a === void 0 ? void 0 : _a.lastDisplayed) !== null && _b !== void 0 ? _b : 0;\n        }\n        /**\n         * The last source version we notified the user about.\n         */\n        get versionNotified() {\n            var _a, _b;\n            if (this._source === null) {\n                return 0;\n            }\n            return (_b = (_a = this._sourceVersion.get(this._source)) === null || _a === void 0 ? void 0 : _a.lastNotified) !== null && _b !== void 0 ? _b : 0;\n        }\n        /**\n         * Flag to toggle flashing when new logs added.\n         */\n        get flashEnabled() {\n            return this._flashEnabled;\n        }\n        set flashEnabled(enabled) {\n            if (this._flashEnabled === enabled) {\n                return;\n            }\n            this._flashEnabled = enabled;\n            this.flashEnabledChanged.emit();\n            // refresh rendering\n            this.stateChanged.emit();\n        }\n        /**\n         * Record the last source version displayed to the user.\n         *\n         * @param source - The name of the log source.\n         * @param version - The version of the log that was displayed.\n         *\n         * #### Notes\n         * This will also update the last notified version so that the last\n         * notified version is always at least the last displayed version.\n         */\n        sourceDisplayed(source, version) {\n            if (source === null || version === null) {\n                return;\n            }\n            const versions = this._sourceVersion.get(source);\n            let change = false;\n            if (versions.lastDisplayed < version) {\n                versions.lastDisplayed = version;\n                change = true;\n            }\n            if (versions.lastNotified < version) {\n                versions.lastNotified = version;\n                change = true;\n            }\n            if (change && source === this._source) {\n                this.stateChanged.emit();\n            }\n        }\n        /**\n         * Record a source version we notified the user about.\n         *\n         * @param source - The name of the log source.\n         * @param version - The version of the log.\n         */\n        sourceNotified(source, version) {\n            if (source === null) {\n                return;\n            }\n            const versions = this._sourceVersion.get(source);\n            if (versions.lastNotified < version) {\n                versions.lastNotified = version;\n                if (source === this._source) {\n                    this.stateChanged.emit();\n                }\n            }\n        }\n        _handleLogRegistryChange() {\n            const loggers = this._loggerRegistry.getLoggers();\n            for (const logger of loggers) {\n                if (!this._sourceVersion.has(logger.source)) {\n                    logger.contentChanged.connect(this._handleLogContentChange, this);\n                    this._sourceVersion.set(logger.source, {\n                        lastDisplayed: 0,\n                        lastNotified: 0\n                    });\n                }\n            }\n        }\n        _handleLogContentChange({ source }, change) {\n            if (source === this._source) {\n                this.stateChanged.emit();\n            }\n        }\n    }\n    LogConsoleStatus.Model = Model;\n})(LogConsoleStatus || (LogConsoleStatus = {}));\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module logconsole-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette, MainAreaWidget, ReactWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { ILoggerRegistry, LogConsolePanel, LoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { addIcon, clearIcon, HTMLSelect, listIcon } from '@jupyterlab/ui-components';\nimport { UUID } from '@lumino/coreutils';\nimport * as React from 'react';\nimport { LogConsoleStatus } from './status';\nconst LOG_CONSOLE_PLUGIN_ID = '@jupyterlab/logconsole-extension:plugin';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.addCheckpoint = 'logconsole:add-checkpoint';\n    CommandIDs.clear = 'logconsole:clear';\n    CommandIDs.open = 'logconsole:open';\n    CommandIDs.setLevel = 'logconsole:set-level';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The Log Console extension.\n */\nconst logConsolePlugin = {\n    activate: activateLogConsole,\n    id: LOG_CONSOLE_PLUGIN_ID,\n    provides: ILoggerRegistry,\n    requires: [ILabShell, IRenderMimeRegistry, INotebookTracker, ITranslator],\n    optional: [ICommandPalette, ILayoutRestorer, ISettingRegistry, IStatusBar],\n    autoStart: true\n};\n/**\n * Activate the Log Console extension.\n */\nfunction activateLogConsole(app, labShell, rendermime, nbtracker, translator, palette, restorer, settingRegistry, statusBar) {\n    const trans = translator.load('jupyterlab');\n    let logConsoleWidget = null;\n    let logConsolePanel = null;\n    const loggerRegistry = new LoggerRegistry({\n        defaultRendermime: rendermime,\n        // The maxLength is reset below from settings\n        maxLength: 1000\n    });\n    const tracker = new WidgetTracker({\n        namespace: 'logconsole'\n    });\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.open,\n            name: () => 'logconsole'\n        });\n    }\n    const status = new LogConsoleStatus({\n        loggerRegistry: loggerRegistry,\n        handleClick: () => {\n            var _a;\n            if (!logConsoleWidget) {\n                createLogConsoleWidget({\n                    insertMode: 'split-bottom',\n                    ref: (_a = app.shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id\n                });\n            }\n            else {\n                app.shell.activateById(logConsoleWidget.id);\n            }\n        },\n        translator\n    });\n    const createLogConsoleWidget = (options = {}) => {\n        logConsolePanel = new LogConsolePanel(loggerRegistry, translator);\n        logConsolePanel.source =\n            options.source !== undefined\n                ? options.source\n                : nbtracker.currentWidget\n                    ? nbtracker.currentWidget.context.path\n                    : null;\n        logConsoleWidget = new MainAreaWidget({ content: logConsolePanel });\n        logConsoleWidget.addClass('jp-LogConsole');\n        logConsoleWidget.title.closable = true;\n        logConsoleWidget.title.icon = listIcon;\n        logConsoleWidget.title.label = trans.__('Log Console');\n        const addCheckpointButton = new CommandToolbarButton({\n            commands: app.commands,\n            id: CommandIDs.addCheckpoint\n        });\n        const clearButton = new CommandToolbarButton({\n            commands: app.commands,\n            id: CommandIDs.clear\n        });\n        logConsoleWidget.toolbar.addItem('lab-log-console-add-checkpoint', addCheckpointButton);\n        logConsoleWidget.toolbar.addItem('lab-log-console-clear', clearButton);\n        logConsoleWidget.toolbar.addItem('level', new LogLevelSwitcher(logConsoleWidget.content, translator));\n        logConsolePanel.sourceChanged.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        logConsolePanel.sourceDisplayed.connect((panel, { source, version }) => {\n            status.model.sourceDisplayed(source, version);\n        });\n        logConsoleWidget.disposed.connect(() => {\n            logConsoleWidget = null;\n            logConsolePanel = null;\n            app.commands.notifyCommandChanged();\n        });\n        app.shell.add(logConsoleWidget, 'down', {\n            ref: options.ref,\n            mode: options.insertMode\n        });\n        void tracker.add(logConsoleWidget);\n        app.shell.activateById(logConsoleWidget.id);\n        logConsoleWidget.update();\n        app.commands.notifyCommandChanged();\n    };\n    app.commands.addCommand(CommandIDs.open, {\n        label: trans.__('Show Log Console'),\n        execute: (options = {}) => {\n            // Toggle the display\n            if (logConsoleWidget) {\n                logConsoleWidget.dispose();\n            }\n            else {\n                createLogConsoleWidget(options);\n            }\n        },\n        isToggled: () => {\n            return logConsoleWidget !== null;\n        }\n    });\n    app.commands.addCommand(CommandIDs.addCheckpoint, {\n        execute: () => {\n            var _a;\n            (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.checkpoint();\n        },\n        icon: addIcon,\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: trans.__('Add Checkpoint')\n    });\n    app.commands.addCommand(CommandIDs.clear, {\n        execute: () => {\n            var _a;\n            (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.clear();\n        },\n        icon: clearIcon,\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: trans.__('Clear Log')\n    });\n    function toTitleCase(value) {\n        return value.length === 0 ? value : value[0].toUpperCase() + value.slice(1);\n    }\n    app.commands.addCommand(CommandIDs.setLevel, {\n        // TODO: find good icon class\n        execute: (args) => {\n            if (logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) {\n                logConsolePanel.logger.level = args.level;\n            }\n        },\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: args => trans.__('Set Log Level to %1', toTitleCase(args.level))\n    });\n    if (palette) {\n        palette.addItem({\n            command: CommandIDs.open,\n            category: trans.__('Main Area')\n        });\n    }\n    if (statusBar) {\n        statusBar.registerStatusItem('@jupyterlab/logconsole-extension:status', {\n            item: status,\n            align: 'left',\n            isActive: () => { var _a; return ((_a = status.model) === null || _a === void 0 ? void 0 : _a.version) > 0; },\n            activeStateChanged: status.model.stateChanged\n        });\n    }\n    function setSource(newValue) {\n        if (logConsoleWidget && newValue === logConsoleWidget) {\n            // Do not change anything if we are just focusing on ourselves\n            return;\n        }\n        let source;\n        if (newValue && nbtracker.has(newValue)) {\n            source = newValue.context.path;\n        }\n        else {\n            source = null;\n        }\n        if (logConsolePanel) {\n            logConsolePanel.source = source;\n        }\n        status.model.source = source;\n    }\n    void app.restored.then(() => {\n        // Set source only after app is restored in order to allow restorer to\n        // restore previous source first, which may set the renderer\n        setSource(labShell.currentWidget);\n        labShell.currentChanged.connect((_, { newValue }) => setSource(newValue));\n    });\n    if (settingRegistry) {\n        const updateSettings = (settings) => {\n            loggerRegistry.maxLength = settings.get('maxLogEntries')\n                .composite;\n            status.model.flashEnabled = settings.get('flash').composite;\n        };\n        Promise.all([settingRegistry.load(LOG_CONSOLE_PLUGIN_ID), app.restored])\n            .then(([settings]) => {\n            updateSettings(settings);\n            settings.changed.connect(settings => {\n                updateSettings(settings);\n            });\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    return loggerRegistry;\n}\n/**\n * A toolbar widget that switches log levels.\n */\nexport class LogLevelSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     */\n    constructor(widget, translator) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            if (this._logConsole.logger) {\n                this._logConsole.logger.level = event.target.value;\n            }\n            this.update();\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._logConsole.activate();\n            }\n        };\n        this._id = `level-${UUID.uuid4()}`;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass('jp-LogConsole-toolbarLogLevel');\n        this._logConsole = widget;\n        if (widget.source) {\n            this.update();\n        }\n        widget.sourceChanged.connect(this._updateSource, this);\n    }\n    _updateSource(sender, { oldValue, newValue }) {\n        // Transfer stateChanged handler to new source logger\n        if (oldValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(oldValue);\n            logger.stateChanged.disconnect(this.update, this);\n        }\n        if (newValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(newValue);\n            logger.stateChanged.connect(this.update, this);\n        }\n        this.update();\n    }\n    render() {\n        const logger = this._logConsole.logger;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"label\", { htmlFor: this._id, className: logger === null\n                    ? 'jp-LogConsole-toolbarLogLevel-disabled'\n                    : undefined }, this._trans.__('Log Level:')),\n            React.createElement(HTMLSelect, { id: this._id, className: \"jp-LogConsole-toolbarLogLevelDropdown\", onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: logger === null || logger === void 0 ? void 0 : logger.level, \"aria-label\": this._trans.__('Log level'), disabled: logger === null, options: logger === null\n                    ? []\n                    : [\n                        [this._trans.__('Critical'), 'Critical'],\n                        [this._trans.__('Error'), 'Error'],\n                        [this._trans.__('Warning'), 'Warning'],\n                        [this._trans.__('Info'), 'Info'],\n                        [this._trans.__('Debug'), 'Debug']\n                    ].map(data => ({\n                        label: data[0],\n                        value: data[1].toLowerCase()\n                    })) })));\n    }\n}\nexport default logConsolePlugin;\n//# sourceMappingURL=index.js.map"],"names":["LogConsoleStatusComponent","props","trans","translator","nullTranslator","load","title","newMessages","__","logEntries","source","GroupItem","spacing","onClick","handleClick","listIcon","top","stylesheet","TextItem","LogConsoleStatus","VDomRenderer","constructor","options","super","Model","loggerRegistry","this","_handleClick","addClass","interactiveItem","render","model","version","flashEnabled","messages","versionDisplayed","versionNotified","_flashHighlight","sourceNotified","_showHighlighted","_clearHighlight","removeClass","requestAnimationFrame","VDomModel","flashEnabledChanged","Signal","_flashEnabled","_source","_sourceVersion","Map","_loggerRegistry","registryChanged","connect","_handleLogRegistryChange","getLogger","length","name","stateChanged","emit","_a","_b","get","lastDisplayed","lastNotified","enabled","sourceDisplayed","versions","change","loggers","getLoggers","logger","has","contentChanged","_handleLogContentChange","set","LOG_CONSOLE_PLUGIN_ID","CommandIDs","addCheckpoint","clear","open","setLevel","logConsolePlugin","activate","app","labShell","rendermime","nbtracker","palette","restorer","settingRegistry","statusBar","logConsoleWidget","logConsolePanel","LoggerRegistry","defaultRendermime","maxLength","tracker","WidgetTracker","namespace","restore","command","status","shell","activateById","id","createLogConsoleWidget","insertMode","ref","currentWidget","LogConsolePanel","undefined","context","path","MainAreaWidget","content","closable","icon","label","addCheckpointButton","CommandToolbarButton","commands","clearButton","toolbar","addItem","LogLevelSwitcher","sourceChanged","notifyCommandChanged","panel","disposed","add","mode","update","setSource","newValue","addCommand","execute","dispose","isToggled","checkpoint","addIcon","isEnabled","clearIcon","args","level","value","toUpperCase","slice","category","registerStatusItem","item","align","isActive","activeStateChanged","restored","then","currentChanged","_","updateSettings","settings","composite","Promise","all","changed","catch","reason","console","error","message","provides","ILoggerRegistry","requires","ILabShell","IRenderMimeRegistry","INotebookTracker","ITranslator","optional","ICommandPalette","ILayoutRestorer","ISettingRegistry","IStatusBar","autoStart","ReactWidget","widget","handleChange","event","_logConsole","target","handleKeyDown","keyCode","_id","UUID","_trans","_updateSource","sender","oldValue","disconnect","htmlFor","className","HTMLSelect","onChange","onKeyDown","disabled","map","data","toLowerCase"],"sourceRoot":""}