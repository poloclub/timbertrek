{"version":3,"file":"4558.e68694f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/dialogs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/savehandler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/widgetmanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/pathstatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/savingstatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to file dialogs.\n */\nconst FILE_DIALOG_CLASS = 'jp-FileDialog';\n/**\n * The class name added for the new name label in the rename dialog\n */\nconst RENAME_NEW_NAME_TITLE_CLASS = 'jp-new-name-title';\n/**\n * Rename a file with a dialog.\n */\nexport function renameDialog(manager, oldPath, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return showDialog({\n        title: trans.__('Rename File'),\n        body: new RenameHandler(oldPath),\n        focusNodeSelector: 'input',\n        buttons: [\n            Dialog.cancelButton({ label: trans.__('Cancel') }),\n            Dialog.okButton({ label: trans.__('Rename') })\n        ]\n    }).then(result => {\n        if (!result.value) {\n            return null;\n        }\n        if (!isValidFileName(result.value)) {\n            void showErrorMessage(trans.__('Rename Error'), Error(trans.__('\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', result.value)));\n            return null;\n        }\n        const basePath = PathExt.dirname(oldPath);\n        const newPath = PathExt.join(basePath, result.value);\n        return renameFile(manager, oldPath, newPath);\n    });\n}\n/**\n * Rename a file, asking for confirmation if it is overwriting another.\n */\nexport function renameFile(manager, oldPath, newPath) {\n    return manager.rename(oldPath, newPath).catch(error => {\n        if (error.message.indexOf('409') === -1) {\n            throw error;\n        }\n        return shouldOverwrite(newPath).then(value => {\n            if (value) {\n                return manager.overwrite(oldPath, newPath);\n            }\n            return Promise.reject('File not renamed');\n        });\n    });\n}\n/**\n * Ask the user whether to overwrite a file.\n */\nexport function shouldOverwrite(path, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const options = {\n        title: trans.__('Overwrite file?'),\n        body: trans.__('\"%1\" already exists, overwrite?', path),\n        buttons: [\n            Dialog.cancelButton({ label: trans.__('Cancel') }),\n            Dialog.warnButton({ label: trans.__('Overwrite') })\n        ]\n    };\n    return showDialog(options).then(result => {\n        return Promise.resolve(result.button.accept);\n    });\n}\n/**\n * Test whether a name is a valid file name\n *\n * Disallows \"/\", \"\\\", and \":\" in file names, as well as names with zero length.\n */\nexport function isValidFileName(name) {\n    const validNameExp = /[\\/\\\\:]/;\n    return name.length > 0 && !validNameExp.test(name);\n}\n/**\n * A widget used to rename a file.\n */\nclass RenameHandler extends Widget {\n    /**\n     * Construct a new \"rename\" dialog.\n     */\n    constructor(oldPath) {\n        super({ node: Private.createRenameNode(oldPath) });\n        this.addClass(FILE_DIALOG_CLASS);\n        const ext = PathExt.extname(oldPath);\n        const value = (this.inputNode.value = PathExt.basename(oldPath));\n        this.inputNode.setSelectionRange(0, value.length - ext.length);\n    }\n    /**\n     * Get the input text node.\n     */\n    get inputNode() {\n        return this.node.getElementsByTagName('input')[0];\n    }\n    /**\n     * Get the value of the widget.\n     */\n    getValue() {\n        return this.inputNode.value;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for a rename handler.\n     */\n    function createRenameNode(oldPath, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const body = document.createElement('div');\n        const existingLabel = document.createElement('label');\n        existingLabel.textContent = trans.__('File Path');\n        const existingPath = document.createElement('span');\n        existingPath.textContent = oldPath;\n        const nameTitle = document.createElement('label');\n        nameTitle.textContent = trans.__('New Name');\n        nameTitle.className = RENAME_NEW_NAME_TITLE_CLASS;\n        const name = document.createElement('input');\n        body.appendChild(existingLabel);\n        body.appendChild(existingPath);\n        body.appendChild(nameTitle);\n        body.appendChild(name);\n        return body;\n    }\n    Private.createRenameNode = createRenameNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=dialogs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A class that manages the auto saving of a document.\n *\n * #### Notes\n * Implements https://github.com/ipython/ipython/wiki/IPEP-15:-Autosaving-the-IPython-Notebook.\n */\nexport class SaveHandler {\n    /**\n     * Construct a new save handler.\n     */\n    constructor(options) {\n        this._autosaveTimer = -1;\n        this._minInterval = -1;\n        this._interval = -1;\n        this._isActive = false;\n        this._inDialog = false;\n        this._isDisposed = false;\n        this._multiplier = 10;\n        this._context = options.context;\n        const interval = options.saveInterval || 120;\n        this._minInterval = interval * 1000;\n        this._interval = this._minInterval;\n        // Restart the timer when the contents model is updated.\n        this._context.fileChanged.connect(this._setTimer, this);\n        this._context.disposed.connect(this.dispose, this);\n    }\n    /**\n     * The save interval used by the timer (in seconds).\n     */\n    get saveInterval() {\n        return this._interval / 1000;\n    }\n    set saveInterval(value) {\n        this._minInterval = this._interval = value * 1000;\n        if (this._isActive) {\n            this._setTimer();\n        }\n    }\n    /**\n     * Get whether the handler is active.\n     */\n    get isActive() {\n        return this._isActive;\n    }\n    /**\n     * Get whether the save handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the save handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        clearTimeout(this._autosaveTimer);\n        Signal.clearData(this);\n    }\n    /**\n     * Start the autosaver.\n     */\n    start() {\n        this._isActive = true;\n        this._setTimer();\n    }\n    /**\n     * Stop the autosaver.\n     */\n    stop() {\n        this._isActive = false;\n        clearTimeout(this._autosaveTimer);\n    }\n    /**\n     * Set the timer.\n     */\n    _setTimer() {\n        clearTimeout(this._autosaveTimer);\n        if (!this._isActive) {\n            return;\n        }\n        this._autosaveTimer = window.setTimeout(() => {\n            this._save();\n        }, this._interval);\n    }\n    /**\n     * Handle an autosave timeout.\n     */\n    _save() {\n        const context = this._context;\n        // Trigger the next update.\n        this._setTimer();\n        if (!context) {\n            return;\n        }\n        // Bail if the model is not dirty or the file is not writable, or the dialog\n        // is already showing.\n        const writable = context.contentsModel && context.contentsModel.writable;\n        if (!writable || !context.model.dirty || this._inDialog) {\n            return;\n        }\n        const start = new Date().getTime();\n        context\n            .save()\n            .then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            const duration = new Date().getTime() - start;\n            // New save interval: higher of 10x save duration or min interval.\n            this._interval = Math.max(this._multiplier * duration, this._minInterval);\n            // Restart the update to pick up the new interval.\n            this._setTimer();\n        })\n            .catch(err => {\n            // If the user canceled the save, do nothing.\n            // FIXME-TRANS: Is this affected by localization?\n            if (err.message === 'Cancel' ||\n                err.message === 'Modal is already displayed') {\n                return;\n            }\n            // Otherwise, log the error.\n            console.error('Error in Auto-Save', err.message);\n        });\n    }\n}\n//# sourceMappingURL=savehandler.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { Time } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, each, filter, find, map, toArray } from '@lumino/algorithm';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\n/**\n * The class name added to document widgets.\n */\nconst DOCUMENT_CLASS = 'jp-Document';\n/**\n * A class that maintains the lifecycle of file-backed widgets.\n */\nexport class DocumentWidgetManager {\n    /**\n     * Construct a new document widget manager.\n     */\n    constructor(options) {\n        this._activateRequested = new Signal(this);\n        this._isDisposed = false;\n        this._registry = options.registry;\n        this.translator = options.translator || nullTranslator;\n    }\n    /**\n     * A signal emitted when one of the documents is activated.\n     */\n    get activateRequested() {\n        return this._activateRequested;\n    }\n    /**\n     * Test whether the document widget manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the widget manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.disconnectReceiver(this);\n    }\n    /**\n     * Create a widget for a document and handle its lifecycle.\n     *\n     * @param factory - The widget factory.\n     *\n     * @param context - The document context object.\n     *\n     * @returns A widget created by the factory.\n     *\n     * @throws If the factory is not registered.\n     */\n    createWidget(factory, context) {\n        const widget = factory.createNew(context);\n        this._initializeWidget(widget, factory, context);\n        return widget;\n    }\n    /**\n     * When a new widget is created, we need to hook it up\n     * with some signals, update the widget extensions (for\n     * this kind of widget) in the docregistry, among\n     * other things.\n     */\n    _initializeWidget(widget, factory, context) {\n        Private.factoryProperty.set(widget, factory);\n        // Handle widget extensions.\n        const disposables = new DisposableSet();\n        each(this._registry.widgetExtensions(factory.name), extender => {\n            const disposable = extender.createNew(widget, context);\n            if (disposable) {\n                disposables.add(disposable);\n            }\n        });\n        Private.disposablesProperty.set(widget, disposables);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n        this.adoptWidget(context, widget);\n        context.fileChanged.connect(this._onFileChanged, this);\n        context.pathChanged.connect(this._onPathChanged, this);\n        void context.ready.then(() => {\n            void this.setCaption(widget);\n        });\n    }\n    /**\n     * Install the message hook for the widget and add to list\n     * of known widgets.\n     *\n     * @param context - The document context object.\n     *\n     * @param widget - The widget to adopt.\n     */\n    adoptWidget(context, widget) {\n        const widgets = Private.widgetsProperty.get(context);\n        widgets.push(widget);\n        MessageLoop.installMessageHook(widget, this);\n        widget.addClass(DOCUMENT_CLASS);\n        widget.title.closable = true;\n        widget.disposed.connect(this._widgetDisposed, this);\n        Private.contextProperty.set(widget, context);\n    }\n    /**\n     * See if a widget already exists for the given context and widget name.\n     *\n     * @param context - The document context object.\n     *\n     * @returns The found widget, or `undefined`.\n     *\n     * #### Notes\n     * This can be used to use an existing widget instead of opening\n     * a new widget.\n     */\n    findWidget(context, widgetName) {\n        const widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return undefined;\n        }\n        return find(widgets, widget => {\n            const factory = Private.factoryProperty.get(widget);\n            if (!factory) {\n                return false;\n            }\n            return factory.name === widgetName;\n        });\n    }\n    /**\n     * Get the document context for a widget.\n     *\n     * @param widget - The widget of interest.\n     *\n     * @returns The context associated with the widget, or `undefined`.\n     */\n    contextForWidget(widget) {\n        return Private.contextProperty.get(widget);\n    }\n    /**\n     * Clone a widget.\n     *\n     * @param widget - The source widget.\n     *\n     * @returns A new widget or `undefined`.\n     *\n     * #### Notes\n     *  Uses the same widget factory and context as the source, or throws\n     *  if the source widget is not managed by this manager.\n     */\n    cloneWidget(widget) {\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return undefined;\n        }\n        const factory = Private.factoryProperty.get(widget);\n        if (!factory) {\n            return undefined;\n        }\n        const newWidget = factory.createNew(context, widget);\n        this._initializeWidget(newWidget, factory, context);\n        return newWidget;\n    }\n    /**\n     * Close the widgets associated with a given context.\n     *\n     * @param context - The document context object.\n     */\n    closeWidgets(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        return Promise.all(toArray(map(widgets, widget => this.onClose(widget)))).then(() => undefined);\n    }\n    /**\n     * Dispose of the widgets associated with a given context\n     * regardless of the widget's dirty state.\n     *\n     * @param context - The document context object.\n     */\n    deleteWidgets(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        return Promise.all(toArray(map(widgets, widget => this.onDelete(widget)))).then(() => undefined);\n    }\n    /**\n     * Filter a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message dispatched to the handler.\n     *\n     * @returns `false` if the message should be filtered, of `true`\n     *   if the message should be dispatched to the handler as normal.\n     */\n    messageHook(handler, msg) {\n        switch (msg.type) {\n            case 'close-request':\n                void this.onClose(handler);\n                return false;\n            case 'activate-request': {\n                const context = this.contextForWidget(handler);\n                if (context) {\n                    this._activateRequested.emit(context.path);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n        return true;\n    }\n    /**\n     * Set the caption for widget title.\n     *\n     * @param widget - The target widget.\n     */\n    async setCaption(widget) {\n        const trans = this.translator.load('jupyterlab');\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return;\n        }\n        const model = context.contentsModel;\n        if (!model) {\n            widget.title.caption = '';\n            return;\n        }\n        return context\n            .listCheckpoints()\n            .then((checkpoints) => {\n            if (widget.isDisposed) {\n                return;\n            }\n            const last = checkpoints[checkpoints.length - 1];\n            const checkpoint = last ? Time.format(last.last_modified) : 'None';\n            let caption = trans.__('Name: %1\\nPath: %2\\n', model.name, model.path);\n            if (context.model.readOnly) {\n                caption += trans.__('Read-only');\n            }\n            else {\n                caption +=\n                    trans.__('Last Saved: %1\\n', Time.format(model.last_modified)) +\n                        trans.__('Last Checkpoint: %1', checkpoint);\n            }\n            widget.title.caption = caption;\n        });\n    }\n    /**\n     * Handle `'close-request'` messages.\n     *\n     * @param widget - The target widget.\n     *\n     * @returns A promise that resolves with whether the widget was closed.\n     */\n    async onClose(widget) {\n        var _a;\n        // Handle dirty state.\n        const [shouldClose, ignoreSave] = await this._maybeClose(widget, this.translator);\n        if (widget.isDisposed) {\n            return true;\n        }\n        if (shouldClose) {\n            if (!ignoreSave) {\n                const context = Private.contextProperty.get(widget);\n                if (!context) {\n                    return true;\n                }\n                if ((_a = context.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) {\n                    await context.save();\n                }\n                else {\n                    await context.saveAs();\n                }\n            }\n            if (widget.isDisposed) {\n                return true;\n            }\n            widget.dispose();\n        }\n        return shouldClose;\n    }\n    /**\n     * Dispose of widget regardless of widget's dirty state.\n     *\n     * @param widget - The target widget.\n     */\n    onDelete(widget) {\n        widget.dispose();\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Ask the user whether to close an unsaved file.\n     */\n    _maybeClose(widget, translator) {\n        var _a;\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        // Bail if the model is not dirty or other widgets are using the model.)\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return Promise.resolve([true, true]);\n        }\n        let widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return Promise.resolve([true, true]);\n        }\n        // Filter by whether the factories are read only.\n        widgets = toArray(filter(widgets, widget => {\n            const factory = Private.factoryProperty.get(widget);\n            if (!factory) {\n                return false;\n            }\n            return factory.readOnly === false;\n        }));\n        const factory = Private.factoryProperty.get(widget);\n        if (!factory) {\n            return Promise.resolve([true, true]);\n        }\n        const model = context.model;\n        if (!model.dirty || widgets.length > 1 || factory.readOnly) {\n            return Promise.resolve([true, true]);\n        }\n        const fileName = widget.title.label;\n        const saveLabel = ((_a = context.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) ? trans.__('Save')\n            : trans.__('Save as');\n        return showDialog({\n            title: trans.__('Save your work'),\n            body: trans.__('Save changes in \"%1\" before closing?', fileName),\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: trans.__('Discard') }),\n                Dialog.okButton({ label: saveLabel })\n            ]\n        }).then(result => {\n            return [result.button.accept, result.button.displayType === 'warn'];\n        });\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _widgetDisposed(widget) {\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return;\n        }\n        const widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return;\n        }\n        // Remove the widget.\n        ArrayExt.removeFirstOf(widgets, widget);\n        // Dispose of the context if this is the last widget using it.\n        if (!widgets.length) {\n            context.dispose();\n        }\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _onWidgetDisposed(widget) {\n        const disposables = Private.disposablesProperty.get(widget);\n        disposables.dispose();\n    }\n    /**\n     * Handle a file changed signal for a context.\n     */\n    _onFileChanged(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        each(widgets, widget => {\n            void this.setCaption(widget);\n        });\n    }\n    /**\n     * Handle a path changed signal for a context.\n     */\n    _onPathChanged(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        each(widgets, widget => {\n            void this.setCaption(widget);\n        });\n    }\n}\n/**\n * A private namespace for DocumentManager data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A private attached property for a widget context.\n     */\n    Private.contextProperty = new AttachedProperty({\n        name: 'context',\n        create: () => undefined\n    });\n    /**\n     * A private attached property for a widget factory.\n     */\n    Private.factoryProperty = new AttachedProperty({\n        name: 'factory',\n        create: () => undefined\n    });\n    /**\n     * A private attached property for the widgets associated with a context.\n     */\n    Private.widgetsProperty = new AttachedProperty({\n        name: 'widgets',\n        create: () => []\n    });\n    /**\n     * A private attached property for a widget's disposables.\n     */\n    Private.disposablesProperty = new AttachedProperty({\n        name: 'disposables',\n        create: () => new DisposableSet()\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=widgetmanager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Context } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, find } from '@lumino/algorithm';\nimport { UUID } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { SaveHandler } from './savehandler';\nimport { DocumentWidgetManager } from './widgetmanager';\n/**\n * The document manager.\n *\n * #### Notes\n * The document manager is used to register model and widget creators,\n * and the file browser uses the document manager to create widgets. The\n * document manager maintains a context for each path and model type that is\n * open, and a list of widgets for each context. The document manager is in\n * control of the proper closing and disposal of the widgets and contexts.\n */\nexport class DocumentManager {\n    /**\n     * Construct a new document manager.\n     */\n    constructor(options) {\n        this._activateRequested = new Signal(this);\n        this._contexts = [];\n        this._isDisposed = false;\n        this._autosave = true;\n        this._autosaveInterval = 120;\n        this._lastModifiedCheckMargin = 500;\n        this.translator = options.translator || nullTranslator;\n        this.registry = options.registry;\n        this.services = options.manager;\n        this._collaborative = !!options.collaborative;\n        this._dialogs = options.sessionDialogs || sessionContextDialogs;\n        this._docProviderFactory = options.docProviderFactory;\n        this._opener = options.opener;\n        this._when = options.when || options.manager.ready;\n        const widgetManager = new DocumentWidgetManager({\n            registry: this.registry,\n            translator: this.translator\n        });\n        widgetManager.activateRequested.connect(this._onActivateRequested, this);\n        this._widgetManager = widgetManager;\n        this._setBusy = options.setBusy;\n    }\n    /**\n     * A signal emitted when one of the documents is activated.\n     */\n    get activateRequested() {\n        return this._activateRequested;\n    }\n    /**\n     * Whether to autosave documents.\n     */\n    get autosave() {\n        return this._autosave;\n    }\n    set autosave(value) {\n        this._autosave = value;\n        // For each existing context, start/stop the autosave handler as needed.\n        this._contexts.forEach(context => {\n            const handler = Private.saveHandlerProperty.get(context);\n            if (!handler) {\n                return;\n            }\n            if (value === true && !handler.isActive) {\n                handler.start();\n            }\n            else if (value === false && handler.isActive) {\n                handler.stop();\n            }\n        });\n    }\n    /**\n     * Determines the time interval for autosave in seconds.\n     */\n    get autosaveInterval() {\n        return this._autosaveInterval;\n    }\n    set autosaveInterval(value) {\n        this._autosaveInterval = value;\n        // For each existing context, set the save interval as needed.\n        this._contexts.forEach(context => {\n            const handler = Private.saveHandlerProperty.get(context);\n            if (!handler) {\n                return;\n            }\n            handler.saveInterval = value || 120;\n        });\n    }\n    /**\n     * Defines max acceptable difference, in milliseconds, between last modified timestamps on disk and client\n     */\n    get lastModifiedCheckMargin() {\n        return this._lastModifiedCheckMargin;\n    }\n    set lastModifiedCheckMargin(value) {\n        this._lastModifiedCheckMargin = value;\n        // For each existing context, update the margin value.\n        this._contexts.forEach(context => {\n            context.lastModifiedCheckMargin = value;\n        });\n    }\n    /**\n     * Get whether the document manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the document manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        // Clear any listeners for our signals.\n        Signal.clearData(this);\n        // Close all the widgets for our contexts and dispose the widget manager.\n        this._contexts.forEach(context => {\n            return this._widgetManager.closeWidgets(context);\n        });\n        this._widgetManager.dispose();\n        // Clear the context list.\n        this._contexts.length = 0;\n    }\n    /**\n     * Clone a widget.\n     *\n     * @param widget - The source widget.\n     *\n     * @returns A new widget or `undefined`.\n     *\n     * #### Notes\n     *  Uses the same widget factory and context as the source, or returns\n     *  `undefined` if the source widget is not managed by this manager.\n     */\n    cloneWidget(widget) {\n        return this._widgetManager.cloneWidget(widget);\n    }\n    /**\n     * Close all of the open documents.\n     *\n     * @returns A promise resolving when the widgets are closed.\n     */\n    closeAll() {\n        return Promise.all(this._contexts.map(context => this._widgetManager.closeWidgets(context))).then(() => undefined);\n    }\n    /**\n     * Close the widgets associated with a given path.\n     *\n     * @param path - The target path.\n     *\n     * @returns A promise resolving when the widgets are closed.\n     */\n    closeFile(path) {\n        const close = this._contextsForPath(path).map(c => this._widgetManager.closeWidgets(c));\n        return Promise.all(close).then(x => undefined);\n    }\n    /**\n     * Get the document context for a widget.\n     *\n     * @param widget - The widget of interest.\n     *\n     * @returns The context associated with the widget, or `undefined` if no such\n     * context exists.\n     */\n    contextForWidget(widget) {\n        return this._widgetManager.contextForWidget(widget);\n    }\n    /**\n     * Copy a file.\n     *\n     * @param fromFile - The full path of the original file.\n     *\n     * @param toDir - The full path to the target directory.\n     *\n     * @returns A promise which resolves to the contents of the file.\n     */\n    copy(fromFile, toDir) {\n        return this.services.contents.copy(fromFile, toDir);\n    }\n    /**\n     * Create a new file and return the widget used to view it.\n     *\n     * @param path - The file path to create.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    createNew(path, widgetName = 'default', kernel) {\n        return this._createOrOpenDocument('create', path, widgetName, kernel);\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The full path to the file to be deleted.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     *\n     * #### Notes\n     * If there is a running session associated with the file and no other\n     * sessions are using the kernel, the session will be shut down.\n     */\n    deleteFile(path) {\n        return this.services.sessions\n            .stopIfNeeded(path)\n            .then(() => {\n            return this.services.contents.delete(path);\n        })\n            .then(() => {\n            this._contextsForPath(path).forEach(context => this._widgetManager.deleteWidgets(context));\n            return Promise.resolve(void 0);\n        });\n    }\n    /**\n     * See if a widget already exists for the given path and widget name.\n     *\n     * @param path - The file path to use.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @returns The found widget, or `undefined`.\n     *\n     * #### Notes\n     * This can be used to find an existing widget instead of opening\n     * a new widget.\n     */\n    findWidget(path, widgetName = 'default') {\n        const newPath = PathExt.normalize(path);\n        let widgetNames = [widgetName];\n        if (widgetName === 'default') {\n            const factory = this.registry.defaultWidgetFactory(newPath);\n            if (!factory) {\n                return undefined;\n            }\n            widgetNames = [factory.name];\n        }\n        else if (widgetName === null) {\n            widgetNames = this.registry\n                .preferredWidgetFactories(newPath)\n                .map(f => f.name);\n        }\n        for (const context of this._contextsForPath(newPath)) {\n            for (const widgetName of widgetNames) {\n                if (widgetName !== null) {\n                    const widget = this._widgetManager.findWidget(context, widgetName);\n                    if (widget) {\n                        return widget;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Create a new untitled file.\n     *\n     * @param options - The file content creation options.\n     */\n    newUntitled(options) {\n        if (options.type === 'file') {\n            options.ext = options.ext || '.txt';\n        }\n        return this.services.contents.newUntitled(options);\n    }\n    /**\n     * Open a file and return the widget used to view it.\n     *\n     * @param path - The file path to open.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    open(path, widgetName = 'default', kernel, options) {\n        return this._createOrOpenDocument('open', path, widgetName, kernel, options);\n    }\n    /**\n     * Open a file and return the widget used to view it.\n     * Reveals an already existing editor.\n     *\n     * @param path - The file path to open.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    openOrReveal(path, widgetName = 'default', kernel, options) {\n        const widget = this.findWidget(path, widgetName);\n        if (widget) {\n            this._opener.open(widget, options || {});\n            return widget;\n        }\n        return this.open(path, widgetName, kernel, options || {});\n    }\n    /**\n     * Overwrite a file.\n     *\n     * @param oldPath - The full path to the original file.\n     *\n     * @param newPath - The full path to the new file.\n     *\n     * @returns A promise containing the new file contents model.\n     */\n    overwrite(oldPath, newPath) {\n        // Cleanly overwrite the file by moving it, making sure the original does\n        // not exist, and then renaming to the new path.\n        const tempPath = `${newPath}.${UUID.uuid4()}`;\n        const cb = () => this.rename(tempPath, newPath);\n        return this.rename(oldPath, tempPath)\n            .then(() => {\n            return this.deleteFile(newPath);\n        })\n            .then(cb, cb);\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldPath - The full path to the original file.\n     *\n     * @param newPath - The full path to the new file.\n     *\n     * @returns A promise containing the new file contents model.  The promise\n     * will reject if the newPath already exists.  Use [[overwrite]] to overwrite\n     * a file.\n     */\n    rename(oldPath, newPath) {\n        return this.services.contents.rename(oldPath, newPath);\n    }\n    /**\n     * Find a context for a given path and factory name.\n     */\n    _findContext(path, factoryName) {\n        const normalizedPath = this.services.contents.normalize(path);\n        return find(this._contexts, context => {\n            return (context.path === normalizedPath && context.factoryName === factoryName);\n        });\n    }\n    /**\n     * Get the contexts for a given path.\n     *\n     * #### Notes\n     * There may be more than one context for a given path if the path is open\n     * with multiple model factories (for example, a notebook can be open with a\n     * notebook model factory and a text model factory).\n     */\n    _contextsForPath(path) {\n        const normalizedPath = this.services.contents.normalize(path);\n        return this._contexts.filter(context => context.path === normalizedPath);\n    }\n    /**\n     * Create a context from a path and a model factory.\n     */\n    _createContext(path, factory, kernelPreference) {\n        // TODO: Make it impossible to open two different contexts for the same\n        // path. Or at least prompt the closing of all widgets associated with the\n        // old context before opening the new context. This will make things much\n        // more consistent for the users, at the cost of some confusion about what\n        // models are and why sometimes they cannot open the same file in different\n        // widgets that have different models.\n        // Allow options to be passed when adding a sibling.\n        const adopter = (widget, options) => {\n            this._widgetManager.adoptWidget(context, widget);\n            this._opener.open(widget, options);\n        };\n        const modelDBFactory = this.services.contents.getModelDBFactory(path) || undefined;\n        const context = new Context({\n            opener: adopter,\n            manager: this.services,\n            factory,\n            path,\n            kernelPreference,\n            modelDBFactory,\n            setBusy: this._setBusy,\n            sessionDialogs: this._dialogs,\n            collaborative: this._collaborative,\n            docProviderFactory: this._docProviderFactory,\n            lastModifiedCheckMargin: this._lastModifiedCheckMargin,\n            translator: this.translator\n        });\n        const handler = new SaveHandler({\n            context,\n            saveInterval: this.autosaveInterval\n        });\n        Private.saveHandlerProperty.set(context, handler);\n        void context.ready.then(() => {\n            if (this.autosave) {\n                handler.start();\n            }\n        });\n        context.disposed.connect(this._onContextDisposed, this);\n        this._contexts.push(context);\n        return context;\n    }\n    /**\n     * Handle a context disposal.\n     */\n    _onContextDisposed(context) {\n        ArrayExt.removeFirstOf(this._contexts, context);\n    }\n    /**\n     * Get the widget factory for a given widget name.\n     */\n    _widgetFactoryFor(path, widgetName) {\n        const { registry } = this;\n        if (widgetName === 'default') {\n            const factory = registry.defaultWidgetFactory(path);\n            if (!factory) {\n                return undefined;\n            }\n            widgetName = factory.name;\n        }\n        return registry.getWidgetFactory(widgetName);\n    }\n    /**\n     * Creates a new document, or loads one from disk, depending on the `which` argument.\n     * If `which==='create'`, then it creates a new document. If `which==='open'`,\n     * then it loads the document from disk.\n     *\n     * The two cases differ in how the document context is handled, but the creation\n     * of the widget and launching of the kernel are identical.\n     */\n    _createOrOpenDocument(which, path, widgetName = 'default', kernel, options) {\n        const widgetFactory = this._widgetFactoryFor(path, widgetName);\n        if (!widgetFactory) {\n            return undefined;\n        }\n        const modelName = widgetFactory.modelName || 'text';\n        const factory = this.registry.getModelFactory(modelName);\n        if (!factory) {\n            return undefined;\n        }\n        // Handle the kernel preference.\n        const preference = this.registry.getKernelPreference(path, widgetFactory.name, kernel);\n        let context;\n        let ready = Promise.resolve(undefined);\n        // Handle the load-from-disk case\n        if (which === 'open') {\n            // Use an existing context if available.\n            context = this._findContext(path, factory.name) || null;\n            if (!context) {\n                context = this._createContext(path, factory, preference);\n                // Populate the model, either from disk or a\n                // model backend.\n                ready = this._when.then(() => context.initialize(false));\n            }\n        }\n        else if (which === 'create') {\n            context = this._createContext(path, factory, preference);\n            // Immediately save the contents to disk.\n            ready = this._when.then(() => context.initialize(true));\n        }\n        else {\n            throw new Error(`Invalid argument 'which': ${which}`);\n        }\n        const widget = this._widgetManager.createWidget(widgetFactory, context);\n        this._opener.open(widget, options || {});\n        // If the initial opening of the context fails, dispose of the widget.\n        ready.catch(err => {\n            console.error(`Failed to initialize the context with '${factory.name}' for ${path}`, err);\n            widget.close();\n        });\n        return widget;\n    }\n    /**\n     * Handle an activateRequested signal from the widget manager.\n     */\n    _onActivateRequested(sender, args) {\n        this._activateRequested.emit(args);\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a context save handler.\n     */\n    Private.saveHandlerProperty = new AttachedProperty({\n        name: 'saveHandler',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { TextItem } from '@jupyterlab/statusbar';\nimport React from 'react';\n/**\n * A pure component for rendering a file path (or activity name).\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for a file path.\n */\nfunction PathStatusComponent(props) {\n    return React.createElement(TextItem, { source: props.name, title: props.fullPath });\n}\n/**\n * A status bar item for the current file path (or activity name).\n */\nexport class PathStatus extends VDomRenderer {\n    /**\n     * Construct a new PathStatus status item.\n     */\n    constructor(opts) {\n        super(new PathStatus.Model(opts.docManager));\n        this.node.title = this.model.path;\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        return (React.createElement(PathStatusComponent, { fullPath: this.model.path, name: this.model.name }));\n    }\n}\n/**\n * A namespace for PathStatus statics.\n */\n(function (PathStatus) {\n    /**\n     * A VDomModel for rendering the PathStatus status item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         *\n         * @param docManager: the application document manager. Used to check\n         *   whether the current widget is a document.\n         */\n        constructor(docManager) {\n            super();\n            /**\n             * React to a title change for the current widget.\n             */\n            this._onTitleChange = (title) => {\n                const oldState = this._getAllState();\n                this._name = title.label;\n                this._triggerChange(oldState, this._getAllState());\n            };\n            /**\n             * React to a path change for the current document.\n             */\n            this._onPathChange = (_documentModel, newPath) => {\n                const oldState = this._getAllState();\n                this._path = newPath;\n                this._name = PathExt.basename(newPath);\n                this._triggerChange(oldState, this._getAllState());\n            };\n            this._path = '';\n            this._name = '';\n            this._widget = null;\n            this._docManager = docManager;\n        }\n        /**\n         * The current path for the application.\n         */\n        get path() {\n            return this._path;\n        }\n        /**\n         * The name of the current activity.\n         */\n        get name() {\n            return this._name;\n        }\n        /**\n         * The current widget for the application.\n         */\n        get widget() {\n            return this._widget;\n        }\n        set widget(widget) {\n            const oldWidget = this._widget;\n            if (oldWidget !== null) {\n                const oldContext = this._docManager.contextForWidget(oldWidget);\n                if (oldContext) {\n                    oldContext.pathChanged.disconnect(this._onPathChange);\n                }\n                else {\n                    oldWidget.title.changed.disconnect(this._onTitleChange);\n                }\n            }\n            const oldState = this._getAllState();\n            this._widget = widget;\n            if (this._widget === null) {\n                this._path = '';\n                this._name = '';\n            }\n            else {\n                const widgetContext = this._docManager.contextForWidget(this._widget);\n                if (widgetContext) {\n                    this._path = widgetContext.path;\n                    this._name = PathExt.basename(widgetContext.path);\n                    widgetContext.pathChanged.connect(this._onPathChange);\n                }\n                else {\n                    this._path = '';\n                    this._name = this._widget.title.label;\n                    this._widget.title.changed.connect(this._onTitleChange);\n                }\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * Get the current state of the model.\n         */\n        _getAllState() {\n            return [this._path, this._name];\n        }\n        /**\n         * Trigger a state change to rerender.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] || oldState[1] !== newState[1]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    PathStatus.Model = Model;\n})(PathStatus || (PathStatus = {}));\n//# sourceMappingURL=pathstatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport React from 'react';\n/**\n * A pure functional component for a Saving status item.\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for rendering the saving state.\n */\nfunction SavingStatusComponent(props) {\n    return React.createElement(TextItem, { source: props.fileStatus });\n}\n/**\n * The amount of time (in ms) to retain the saving completed message\n * before hiding the status item.\n */\nconst SAVING_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * A VDomRenderer for a saving status item.\n */\nexport class SavingStatus extends VDomRenderer {\n    /**\n     * Create a new SavingStatus item.\n     */\n    constructor(opts) {\n        super(new SavingStatus.Model(opts.docManager));\n        const translator = opts.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        this._statusMap = {\n            completed: trans.__('Saving completed'),\n            started: trans.__('Saving started'),\n            failed: trans.__('Saving failed')\n        };\n    }\n    /**\n     * Render the SavingStatus item.\n     */\n    render() {\n        if (this.model === null || this.model.status === null) {\n            return null;\n        }\n        else {\n            return (React.createElement(SavingStatusComponent, { fileStatus: this._statusMap[this.model.status] }));\n        }\n    }\n}\n/**\n * A namespace for SavingStatus statics.\n */\n(function (SavingStatus) {\n    /**\n     * A VDomModel for the SavingStatus item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Create a new SavingStatus model.\n         */\n        constructor(docManager) {\n            super();\n            /**\n             * React to a saving status change from the current document widget.\n             */\n            this._onStatusChange = (_, newStatus) => {\n                this._status = newStatus;\n                if (this._status === 'completed') {\n                    setTimeout(() => {\n                        this._status = null;\n                        this.stateChanged.emit(void 0);\n                    }, SAVING_COMPLETE_MESSAGE_MILLIS);\n                    this.stateChanged.emit(void 0);\n                }\n                else {\n                    this.stateChanged.emit(void 0);\n                }\n            };\n            this._status = null;\n            this._widget = null;\n            this._status = null;\n            this.widget = null;\n            this._docManager = docManager;\n        }\n        /**\n         * The current status of the model.\n         */\n        get status() {\n            return this._status;\n        }\n        /**\n         * The current widget for the model. Any widget can be assigned,\n         * but it only has any effect if the widget is an IDocument widget\n         * known to the application document manager.\n         */\n        get widget() {\n            return this._widget;\n        }\n        set widget(widget) {\n            var _a, _b;\n            const oldWidget = this._widget;\n            if (oldWidget !== null) {\n                const oldContext = this._docManager.contextForWidget(oldWidget);\n                if (oldContext) {\n                    oldContext.saveState.disconnect(this._onStatusChange);\n                }\n                else if ((_a = this._widget.content) === null || _a === void 0 ? void 0 : _a.saveStateChanged) {\n                    this._widget.content.saveStateChanged.disconnect(this._onStatusChange);\n                }\n            }\n            this._widget = widget;\n            if (this._widget === null) {\n                this._status = null;\n            }\n            else {\n                const widgetContext = this._docManager.contextForWidget(this._widget);\n                if (widgetContext) {\n                    widgetContext.saveState.connect(this._onStatusChange);\n                }\n                else if ((_b = this._widget.content) === null || _b === void 0 ? void 0 : _b.saveStateChanged) {\n                    this._widget.content.saveStateChanged.connect(this._onStatusChange);\n                }\n            }\n        }\n    }\n    SavingStatus.Model = Model;\n})(SavingStatus || (SavingStatus = {}));\n//# sourceMappingURL=savingstatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The document registry token.\n */\nexport const IDocumentManager = new Token('@jupyterlab/docmanager:IDocumentManager');\n//# sourceMappingURL=tokens.js.map"],"names":["Private","renameDialog","manager","oldPath","translator","trans","nullTranslator","load","showDialog","title","__","body","RenameHandler","focusNodeSelector","buttons","Dialog","label","then","result","value","isValidFileName","showErrorMessage","Error","basePath","PathExt","newPath","renameFile","rename","catch","error","message","indexOf","shouldOverwrite","overwrite","Promise","reject","path","options","resolve","button","accept","name","length","test","Widget","constructor","super","node","createRenameNode","this","addClass","ext","inputNode","setSelectionRange","getElementsByTagName","getValue","document","createElement","existingLabel","textContent","existingPath","nameTitle","className","appendChild","SaveHandler","_autosaveTimer","_minInterval","_interval","_isActive","_inDialog","_isDisposed","_multiplier","_context","context","interval","saveInterval","fileChanged","connect","_setTimer","disposed","dispose","isActive","isDisposed","clearTimeout","Signal","start","stop","window","setTimeout","_save","contentsModel","writable","model","dirty","Date","getTime","save","duration","Math","max","err","console","DocumentWidgetManager","_activateRequested","_registry","registry","activateRequested","createWidget","factory","widget","createNew","_initializeWidget","factoryProperty","set","disposables","DisposableSet","each","widgetExtensions","extender","disposable","add","disposablesProperty","_onWidgetDisposed","adoptWidget","_onFileChanged","pathChanged","_onPathChanged","ready","setCaption","widgetsProperty","get","push","MessageLoop","closable","_widgetDisposed","contextProperty","findWidget","widgetName","widgets","find","contextForWidget","cloneWidget","newWidget","closeWidgets","all","toArray","map","onClose","deleteWidgets","onDelete","messageHook","handler","msg","type","emit","async","listCheckpoints","checkpoints","last","checkpoint","Time","last_modified","caption","readOnly","_a","shouldClose","ignoreSave","_maybeClose","saveAs","filter","fileName","saveLabel","displayType","ArrayExt","AttachedProperty","create","DocumentManager","_contexts","_autosave","_autosaveInterval","_lastModifiedCheckMargin","services","_collaborative","collaborative","_dialogs","sessionDialogs","sessionContextDialogs","_docProviderFactory","docProviderFactory","_opener","opener","_when","when","widgetManager","_onActivateRequested","_widgetManager","_setBusy","setBusy","autosave","forEach","saveHandlerProperty","autosaveInterval","lastModifiedCheckMargin","closeAll","closeFile","close","_contextsForPath","c","x","copy","fromFile","toDir","contents","kernel","_createOrOpenDocument","deleteFile","sessions","stopIfNeeded","delete","widgetNames","defaultWidgetFactory","preferredWidgetFactories","f","newUntitled","open","openOrReveal","tempPath","UUID","cb","_findContext","factoryName","normalizedPath","normalize","_createContext","kernelPreference","modelDBFactory","getModelDBFactory","undefined","Context","_onContextDisposed","_widgetFactoryFor","getWidgetFactory","which","widgetFactory","modelName","getModelFactory","preference","getKernelPreference","initialize","sender","args","PathStatusComponent","props","TextItem","source","fullPath","PathStatus","VDomRenderer","opts","Model","docManager","render","SavingStatusComponent","fileStatus","VDomModel","_onTitleChange","oldState","_getAllState","_name","_triggerChange","_onPathChange","_documentModel","_path","_widget","_docManager","oldWidget","oldContext","disconnect","changed","widgetContext","newState","stateChanged","SavingStatus","_statusMap","completed","started","failed","status","_onStatusChange","_","newStatus","_status","_b","saveState","content","saveStateChanged","IDocumentManager","Token"],"sourceRoot":""}