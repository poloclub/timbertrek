{"version":3,"file":"724.11031db.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/actions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/default-toolbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/celllist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/modelfactory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/modestatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/notebooktools.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/tracker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/truststatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/widgetfactory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook/lib/executionindicator.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Clipboard, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeCell, isCodeCellModel, isMarkdownCellModel, isRawCellModel, MarkdownCell } from '@jupyterlab/cells';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, each, findIndex, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport * as React from 'react';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\nexport class KernelError extends Error {\n    /**\n     * Construct the kernel error.\n     */\n    constructor(content) {\n        const errorContent = content;\n        const errorName = errorContent.ename;\n        const errorValue = errorContent.evalue;\n        super(`KernelReplyNotOK: ${errorName} ${errorValue}`);\n        this.errorName = errorName;\n        this.errorValue = errorValue;\n        this.traceback = errorContent.traceback;\n        Object.setPrototypeOf(this, KernelError.prototype);\n    }\n}\n/**\n * A collection of actions that run against notebooks.\n *\n * #### Notes\n * All of the actions are a no-op if there is no model on the notebook.\n * The actions set the widget `mode` to `'command'` unless otherwise specified.\n * The actions will preserve the selection on the notebook widget unless\n * otherwise specified.\n */\nexport class NotebookActions {\n    /**\n     * A signal that emits whenever a cell completes execution.\n     */\n    static get executed() {\n        return Private.executed;\n    }\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    static get executionScheduled() {\n        return Private.executionScheduled;\n    }\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    static get selectionExecuted() {\n        return Private.selectionExecuted;\n    }\n    /**\n     * A private constructor for the `NotebookActions` class.\n     *\n     * #### Notes\n     * This class can never be instantiated. Its static member `executed` will be\n     * merged with the `NotebookActions` namespace. The reason it exists as a\n     * standalone class is because at run time, the `Private.executed` variable\n     * does not yet exist, so it needs to be referenced via a getter.\n     */\n    constructor() {\n        // Intentionally empty.\n    }\n}\n/**\n * A namespace for `NotebookActions` static methods.\n */\n(function (NotebookActions) {\n    /**\n     * Split the active cell into two or more cells.\n     *\n     * @param notebook The target notebook widget.\n     *\n     * #### Notes\n     * It will preserve the existing mode.\n     * The last cell will be activated if no selection is found.\n     * If text was selected, the cell containing the selection will\n     * be activated.\n     * The existing selection will be cleared.\n     * The activated cell will have focus and the cursor will\n     * remain in the initial position.\n     * The leading whitespace in the second cell will be removed.\n     * If there is no content, two empty cells will be created.\n     * Both cells will have the same type as the original cell.\n     * This action can be undone.\n     */\n    function splitCell(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        const nbModel = notebook.model;\n        const index = notebook.activeCellIndex;\n        const child = notebook.widgets[index];\n        const editor = child.editor;\n        const selections = editor.getSelections();\n        const orig = child.model.value.text;\n        const offsets = [0];\n        let start = -1;\n        let end = -1;\n        for (let i = 0; i < selections.length; i++) {\n            // append start and end to handle selections\n            // cursors will have same start and end\n            start = editor.getOffsetAt(selections[i].start);\n            end = editor.getOffsetAt(selections[i].end);\n            if (start < end) {\n                offsets.push(start);\n                offsets.push(end);\n            }\n            else if (end < start) {\n                offsets.push(end);\n                offsets.push(start);\n            }\n            else {\n                offsets.push(start);\n            }\n        }\n        offsets.push(orig.length);\n        const clones = [];\n        for (let i = 0; i + 1 < offsets.length; i++) {\n            const clone = Private.cloneCell(nbModel, child.model);\n            clones.push(clone);\n        }\n        for (let i = 0; i < clones.length; i++) {\n            if (i !== clones.length - 1 && clones[i].type === 'code') {\n                clones[i].outputs.clear();\n            }\n            clones[i].value.text = orig\n                .slice(offsets[i], offsets[i + 1])\n                .replace(/^\\n+/, '')\n                .replace(/\\n+$/, '');\n        }\n        const cells = nbModel.cells;\n        cells.beginCompoundOperation();\n        for (let i = 0; i < clones.length; i++) {\n            if (i === 0) {\n                cells.set(index, clones[i]);\n            }\n            else {\n                cells.insert(index + i, clones[i]);\n            }\n        }\n        cells.endCompoundOperation();\n        // If there is a selection the selected cell will be activated\n        const activeCellDelta = start !== end ? 2 : 1;\n        notebook.activeCellIndex = index + clones.length - activeCellDelta;\n        const focusedEditor = notebook.activeCell.editor;\n        focusedEditor.focus();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.splitCell = splitCell;\n    /**\n     * Merge the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mergeAbove - If only one cell is selected, indicates whether to merge it\n     *    with the cell above (true) or below (false, default).\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * If only one cell is selected and `mergeAbove` is true, the above cell will be selected.\n     * If only one cell is selected and `mergeAbove` is false, the below cell will be selected.\n     * If the active cell is a code cell, its outputs will be cleared.\n     * This action can be undone.\n     * The final cell will have the same type as the active cell.\n     * If the active cell is a markdown cell, it will be unrendered.\n     */\n    function mergeCells(notebook, mergeAbove = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const toMerge = [];\n        const toDelete = [];\n        const model = notebook.model;\n        const cells = model.cells;\n        const primary = notebook.activeCell;\n        const active = notebook.activeCellIndex;\n        const attachments = {};\n        // Get the cells to merge.\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                toMerge.push(child.model.value.text);\n                if (index !== active) {\n                    toDelete.push(child.model);\n                }\n                // Collect attachments if the cell is a markdown cell or a raw cell\n                const model = child.model;\n                if (isRawCellModel(model) || isMarkdownCellModel(model)) {\n                    for (const key of model.attachments.keys) {\n                        attachments[key] = model.attachments.get(key).toJSON();\n                    }\n                }\n            }\n        });\n        // Check for only a single cell selected.\n        if (toMerge.length === 1) {\n            // Merge with the cell above when mergeAbove is true\n            if (mergeAbove === true) {\n                // Bail if it is the first cell.\n                if (active === 0) {\n                    return;\n                }\n                // Otherwise merge with the previous cell.\n                const cellModel = cells.get(active - 1);\n                toMerge.unshift(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n            else if (mergeAbove === false) {\n                // Bail if it is the last cell.\n                if (active === cells.length - 1) {\n                    return;\n                }\n                // Otherwise merge with the next cell.\n                const cellModel = cells.get(active + 1);\n                toMerge.push(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n        }\n        notebook.deselectAll();\n        // Create a new cell for the source to preserve history.\n        const newModel = Private.cloneCell(model, primary.model);\n        newModel.value.text = toMerge.join('\\n\\n');\n        if (isCodeCellModel(newModel)) {\n            newModel.outputs.clear();\n        }\n        else if (isMarkdownCellModel(newModel) || isRawCellModel(newModel)) {\n            newModel.attachments.fromJSON(attachments);\n        }\n        // Make the changes while preserving history.\n        cells.beginCompoundOperation();\n        cells.set(active, newModel);\n        toDelete.forEach(cell => {\n            cells.removeValue(cell);\n        });\n        cells.endCompoundOperation();\n        // If the original cell is a markdown cell, make sure\n        // the new cell is unrendered.\n        if (primary instanceof MarkdownCell) {\n            notebook.activeCell.rendered = false;\n        }\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.mergeCells = mergeCells;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.deleteCells(notebook);\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.deleteCells = deleteCells;\n    /**\n     * Insert a new code cell above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will the active cell.\n     */\n    function insertAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        const active = notebook.activeCellIndex;\n        model.cells.insert(active, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex = active;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertAbove = insertAbove;\n    /**\n     * Insert a new code cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will be the active cell.\n     */\n    function insertBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex++;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertBelow = insertBelow;\n    /**\n     * Move the selected cell(s) down.\n     *\n     * @param notebook = The target notebook widget.\n     */\n    function moveDown(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = cells.length - 2; i > -1; i--) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i + 1])) {\n                    cells.move(i, i + 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex++;\n                    }\n                    notebook.select(widgets[i + 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveDown = moveDown;\n    /**\n     * Move the selected cell(s) up.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function moveUp(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = 1; i < cells.length; i++) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i - 1])) {\n                    cells.move(i, i - 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex--;\n                    }\n                    notebook.select(widgets[i - 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveUp = moveUp;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.changeCellType(notebook, value);\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.changeCellType = changeCellType;\n    /**\n     * Run the selected cell(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The last selected cell will be activated, but not scrolled into view.\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     */\n    function run(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, false);\n        return promise;\n    }\n    NotebookActions.run = run;\n    /**\n     * Run the selected cell(s) and advance to the next cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * The cell after the last selected cell will be activated and scrolled into view.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * If the last selected cell is the last cell, a new code cell\n     * will be created in `'edit'` mode.  The new cell creation can be undone.\n     */\n    function runAndAdvance(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n            // Do not use push here, as we want an widget insertion\n            // to make sure no placeholder widget is rendered.\n            model.cells.insert(notebook.widgets.length, cell);\n            notebook.activeCellIndex++;\n            notebook.mode = 'edit';\n        }\n        else {\n            notebook.activeCellIndex++;\n        }\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndAdvance = runAndAdvance;\n    /**\n     * Run the selected cell(s) and insert a new code cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The widget mode will be set to `'edit'` after running.\n     * The existing selection will be cleared.\n     * The cell insert can be undone.\n     * The new cell will be scrolled into view.\n     */\n    function runAndInsert(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        notebook.activeCellIndex++;\n        notebook.mode = 'edit';\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndInsert = runAndInsert;\n    /**\n     * Run all of the cells in the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAll(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAll = runAll;\n    function renderAllMarkdown(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const previousIndex = notebook.activeCellIndex;\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach((child, index) => {\n            if (child.model.type === 'markdown') {\n                notebook.select(child);\n                // This is to make sure that the activeCell\n                // does not get executed\n                notebook.activeCellIndex = index;\n            }\n        });\n        if (notebook.activeCell.model.type !== 'markdown') {\n            return Promise.resolve(true);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex = previousIndex;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.renderAllMarkdown = renderAllMarkdown;\n    /**\n     * Run all of the cells before the currently active cell (exclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The currently active cell will remain selected.\n     */\n    function runAllAbove(notebook, sessionContext) {\n        const { activeCell, activeCellIndex, model } = notebook;\n        if (!model || !activeCell || activeCellIndex < 1) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex--;\n        notebook.deselectAll();\n        for (let i = 0; i < notebook.activeCellIndex; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex++;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllAbove = runAllAbove;\n    /**\n     * Run all of the cells after the currently active cell (inclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAllBelow(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        for (let i = notebook.activeCellIndex; i < notebook.widgets.length; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllBelow = runAllBelow;\n    /**\n     * Replaces the selection in the active cell of the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     * @param text - The text to replace the selection.\n     */\n    function replaceSelection(notebook, text) {\n        var _a, _b;\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        (_b = (_a = notebook.activeCell.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n    }\n    NotebookActions.replaceSelection = replaceSelection;\n    /**\n     * Select the above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the first cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        let possibleNextCellIndex = notebook.activeCellIndex - 1;\n        // find first non hidden cell above current cell\n        while (possibleNextCellIndex >= 0) {\n            const possibleNextCell = notebook.widgets[possibleNextCellIndex];\n            if (!possibleNextCell.inputHidden && !possibleNextCell.isHidden) {\n                break;\n            }\n            possibleNextCellIndex -= 1;\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCellIndex;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectAbove = selectAbove;\n    /**\n     * Select the cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the last cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        let maxCellIndex = notebook.widgets.length - 1;\n        // Find last non-hidden cell\n        while (notebook.widgets[maxCellIndex].isHidden ||\n            notebook.widgets[maxCellIndex].inputHidden) {\n            maxCellIndex -= 1;\n        }\n        if (notebook.activeCellIndex === maxCellIndex) {\n            return;\n        }\n        let possibleNextCellIndex = notebook.activeCellIndex + 1;\n        // find first non hidden cell below current cell\n        while (possibleNextCellIndex < maxCellIndex) {\n            let possibleNextCell = notebook.widgets[possibleNextCellIndex];\n            if (!possibleNextCell.inputHidden && !possibleNextCell.isHidden) {\n                break;\n            }\n            possibleNextCellIndex += 1;\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCellIndex;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectBelow = selectBelow;\n    /**\n     * Extend the selection to the cell above.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toTop - If true, denotes selection to extend to the top.\n     *\n     * #### Notes\n     * This is a no-op if the first cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionAbove(notebook, toTop = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toTop is true, if yes, selection is made to the top.\n        if (toTop) {\n            notebook.extendContiguousSelectionTo(0);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex - 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionAbove = extendSelectionAbove;\n    /**\n     * Extend the selection to the cell below.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toBottom - If true, denotes selection to extend to the bottom.\n     *\n     * #### Notes\n     * This is a no-op if the last cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionBelow(notebook, toBottom = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toBottom is true, if yes selection is made to the bottom.\n        if (toBottom) {\n            notebook.extendContiguousSelectionTo(notebook.widgets.length - 1);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex + 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionBelow = extendSelectionBelow;\n    /**\n     * Select all of the cells of the notebook.\n     *\n     * @param notebook - the target notebook widget.\n     */\n    function selectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n    }\n    NotebookActions.selectAll = selectAll;\n    /**\n     * Deselect all of the cells of the notebook.\n     *\n     * @param notebook - the target notebook widget.\n     */\n    function deselectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.deselectAll();\n    }\n    NotebookActions.deselectAll = deselectAll;\n    /**\n     * Copy the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function copy(notebook) {\n        Private.copyOrCut(notebook, false);\n    }\n    NotebookActions.copy = copy;\n    /**\n     * Cut the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This action can be undone.\n     * A new code cell is added if all cells are cut.\n     */\n    function cut(notebook) {\n        Private.copyOrCut(notebook, true);\n    }\n    NotebookActions.cut = cut;\n    /**\n     * Paste cells from the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mode - the mode of the paste operation: 'below' pastes cells\n     *   below the active cell, 'above' pastes cells above the active cell,\n     *   and 'replace' removes the currently selected cells and pastes cells\n     *   in their place.\n     *\n     * #### Notes\n     * The last pasted cell becomes the active cell.\n     * This is a no-op if there is no cell data on the clipboard.\n     * This action can be undone.\n     */\n    function paste(notebook, mode = 'below') {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const clipboard = Clipboard.getInstance();\n        if (!clipboard.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const values = clipboard.getData(JUPYTER_CELL_MIME);\n        const model = notebook.model;\n        notebook.mode = 'command';\n        const newCells = values.map(cell => {\n            switch (cell.cell_type) {\n                case 'code':\n                    if (notebook.lastClipboardInteraction === 'cut' &&\n                        typeof cell.id === 'string') {\n                        let cell_id = cell.id;\n                        return model.contentFactory.createCodeCell({\n                            id: cell_id,\n                            cell: cell\n                        });\n                    }\n                    else {\n                        return model.contentFactory.createCodeCell({ cell });\n                    }\n                case 'markdown':\n                    return model.contentFactory.createMarkdownCell({ cell });\n                default:\n                    return model.contentFactory.createRawCell({ cell });\n            }\n        });\n        const cells = notebook.model.cells;\n        let index;\n        cells.beginCompoundOperation();\n        // Set the starting index of the paste operation depending upon the mode.\n        switch (mode) {\n            case 'below':\n                index = notebook.activeCellIndex;\n                break;\n            case 'above':\n                index = notebook.activeCellIndex - 1;\n                break;\n            case 'replace': {\n                // Find the cells to delete.\n                const toDelete = [];\n                notebook.widgets.forEach((child, index) => {\n                    const deletable = child.model.metadata.get('deletable') !== false;\n                    if (notebook.isSelectedOrActive(child) && deletable) {\n                        toDelete.push(index);\n                    }\n                });\n                // If cells are not deletable, we may not have anything to delete.\n                if (toDelete.length > 0) {\n                    // Delete the cells as one undo event.\n                    toDelete.reverse().forEach(i => {\n                        cells.remove(i);\n                    });\n                }\n                index = toDelete[0];\n                break;\n            }\n            default:\n                break;\n        }\n        newCells.forEach(cell => {\n            cells.insert(++index, cell);\n        });\n        cells.endCompoundOperation();\n        notebook.activeCellIndex += newCells.length;\n        notebook.deselectAll();\n        notebook.lastClipboardInteraction = 'paste';\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.paste = paste;\n    /**\n     * Undo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if if there are no cell actions to undo.\n     */\n    function undo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.undo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.undo = undo;\n    /**\n     * Redo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if there are no cell actions to redo.\n     */\n    function redo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.redo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.redo = redo;\n    /**\n     * Toggle the line number of all cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The original state is based on the state of the active cell.\n     * The `mode` of the widget will be preserved.\n     */\n    function toggleAllLineNumbers(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const config = notebook.editorConfig;\n        const lineNumbers = !(config.code.lineNumbers &&\n            config.markdown.lineNumbers &&\n            config.raw.lineNumbers);\n        const newConfig = {\n            code: Object.assign(Object.assign({}, config.code), { lineNumbers }),\n            markdown: Object.assign(Object.assign({}, config.markdown), { lineNumbers }),\n            raw: Object.assign(Object.assign({}, config.raw), { lineNumbers })\n        };\n        notebook.editorConfig = newConfig;\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.toggleAllLineNumbers = toggleAllLineNumbers;\n    /**\n     * Clear the code outputs of the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (notebook.isSelectedOrActive(child) && cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearOutputs = clearOutputs;\n    /**\n     * Clear all the code outputs on the widget.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearAllOutputs = clearAllOutputs;\n    /**\n     * Hide the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideCode = hideCode;\n    /**\n     * Show the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showCode = showCode;\n    /**\n     * Hide the code on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideAllCode = hideAllCode;\n    /**\n     * Show the code on all code cells.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function showAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllCode = showAllCode;\n    /**\n     * Hide the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideOutput = hideOutput;\n    /**\n     * Show the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showOutput = showOutput;\n    /**\n     * Hide the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideAllOutputs = hideAllOutputs;\n    /**\n     * Render side-by-side.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function renderSideBySide(notebook) {\n        notebook.renderingLayout = 'side-by-side';\n    }\n    NotebookActions.renderSideBySide = renderSideBySide;\n    /**\n     * Render not side-by-side.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function renderDefault(notebook) {\n        notebook.renderingLayout = 'default';\n    }\n    NotebookActions.renderDefault = renderDefault;\n    /**\n     * Show the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllOutputs = showAllOutputs;\n    /**\n     * Enable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function enableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.enableOutputScrolling = enableOutputScrolling;\n    /**\n     * Disable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function disableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.disableOutputScrolling = disableOutputScrolling;\n    /**\n     * Go to the last cell that is run or current if it is running.\n     *\n     * Note: This requires execution timing to be toggled on or this will have\n     * no effect.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function selectLastRunCell(notebook) {\n        let latestTime = null;\n        let latestCellIdx = null;\n        notebook.widgets.forEach((cell, cellIndx) => {\n            if (cell.model.type === 'code') {\n                const execution = cell.model.metadata.get('execution');\n                if (execution &&\n                    JSONExt.isObject(execution) &&\n                    execution['iopub.status.busy'] !== undefined) {\n                    // The busy status is used as soon as a request is received:\n                    // https://jupyter-client.readthedocs.io/en/stable/messaging.html\n                    const timestamp = execution['iopub.status.busy'].toString();\n                    if (timestamp) {\n                        const startTime = new Date(timestamp);\n                        if (!latestTime || startTime >= latestTime) {\n                            latestTime = startTime;\n                            latestCellIdx = cellIndx;\n                        }\n                    }\n                }\n            }\n        });\n        if (latestCellIdx !== null) {\n            notebook.activeCellIndex = latestCellIdx;\n        }\n    }\n    NotebookActions.selectLastRunCell = selectLastRunCell;\n    /**\n     * Set the markdown header level.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param level - The header level.\n     *\n     * #### Notes\n     * All selected cells will be switched to markdown.\n     * The level will be clamped between 1 and 6.\n     * If there is an existing header, it will be replaced.\n     * There will always be one blank space after the header.\n     * The cells will be unrendered.\n     */\n    function setMarkdownHeader(notebook, level) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        level = Math.min(Math.max(level, 1), 6);\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                Private.setMarkdownHeader(cells.get(index), level);\n            }\n        });\n        Private.changeCellType(notebook, 'markdown');\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.setMarkdownHeader = setMarkdownHeader;\n    /**\n     * Collapse all cells in given notebook.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function collapseAll(notebook) {\n        for (const cell of notebook.widgets) {\n            if (NotebookActions.getHeadingInfo(cell).isHeading) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n                NotebookActions.setCellCollapse(cell, true);\n            }\n        }\n    }\n    NotebookActions.collapseAll = collapseAll;\n    /**\n     * Un-collapse all cells in given notebook.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function expandAllHeadings(notebook) {\n        for (const cell of notebook.widgets) {\n            if (NotebookActions.getHeadingInfo(cell).isHeading) {\n                NotebookActions.setHeadingCollapse(cell, false, notebook);\n                // similar to collapseAll.\n                NotebookActions.setCellCollapse(cell, false);\n            }\n        }\n    }\n    NotebookActions.expandAllHeadings = expandAllHeadings;\n    function findNearestParentHeader(cell, notebook) {\n        const index = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (index === -1) {\n            return;\n        }\n        // Finds the nearest header above the given cell. If the cell is a header itself, it does not return itself;\n        // this can be checked directly by calling functions.\n        if (index >= notebook.widgets.length) {\n            return;\n        }\n        let childHeaderInfo = getHeadingInfo(notebook.widgets[index]);\n        for (let cellN = index - 1; cellN >= 0; cellN--) {\n            if (cellN < notebook.widgets.length) {\n                let hInfo = getHeadingInfo(notebook.widgets[cellN]);\n                if (hInfo.isHeading &&\n                    hInfo.headingLevel < childHeaderInfo.headingLevel) {\n                    return notebook.widgets[cellN];\n                }\n            }\n        }\n        // else no parent header found.\n        return;\n    }\n    /**\n     * Finds the \"parent\" heading of the given cell and expands.\n     * Used for the case that a cell becomes active that is within a collapsed heading.\n     * @param cell - \"Child\" cell that has become the active cell\n     * @param notebook - The target notebook widget.\n     */\n    function expandParent(cell, notebook) {\n        let nearestParentCell = findNearestParentHeader(cell, notebook);\n        if (!nearestParentCell) {\n            return;\n        }\n        if (!getHeadingInfo(nearestParentCell).collapsed &&\n            !nearestParentCell.isHidden) {\n            return;\n        }\n        if (nearestParentCell.isHidden) {\n            expandParent(nearestParentCell, notebook);\n        }\n        if (getHeadingInfo(nearestParentCell).collapsed) {\n            setHeadingCollapse(nearestParentCell, false, notebook);\n        }\n    }\n    NotebookActions.expandParent = expandParent;\n    /**\n     * Finds the next heading that isn't a child of the given markdown heading.\n     * @param cell - \"Child\" cell that has become the active cell\n     * @param notebook - The target notebook widget.\n     */\n    function findNextParentHeading(cell, notebook) {\n        let index = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (index === -1) {\n            return -1;\n        }\n        let childHeaderInfo = getHeadingInfo(cell);\n        for (index = index + 1; index < notebook.widgets.length; index++) {\n            let hInfo = getHeadingInfo(notebook.widgets[index]);\n            if (hInfo.isHeading &&\n                hInfo.headingLevel <= childHeaderInfo.headingLevel) {\n                return index;\n            }\n        }\n        // else no parent header found. return the index of the last cell\n        return notebook.widgets.length;\n    }\n    NotebookActions.findNextParentHeading = findNextParentHeading;\n    /**\n     * Set the given cell and ** all \"child\" cells **\n     * to the given collapse / expand if cell is\n     * a markdown header.\n     *\n     * @param cell - The cell\n     * @param collapsing - Whether to collapse or expand the cell\n     * @param notebook - The target notebook widget.\n     */\n    function setHeadingCollapse(cell, collapsing, notebook) {\n        const which = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (which === -1) {\n            return -1;\n        }\n        if (!notebook.widgets.length) {\n            return which + 1;\n        }\n        let selectedHeadingInfo = NotebookActions.getHeadingInfo(cell);\n        if (cell.isHidden ||\n            !(cell instanceof MarkdownCell) ||\n            !selectedHeadingInfo.isHeading) {\n            // otherwise collapsing and uncollapsing already hidden stuff can\n            // cause some funny looking bugs.\n            return which + 1;\n        }\n        let localCollapsed = false;\n        let localCollapsedLevel = 0;\n        // iterate through all cells after the active cell.\n        let cellNum;\n        for (cellNum = which + 1; cellNum < notebook.widgets.length; cellNum++) {\n            let subCell = notebook.widgets[cellNum];\n            let subCellHeadingInfo = NotebookActions.getHeadingInfo(subCell);\n            if (subCellHeadingInfo.isHeading &&\n                subCellHeadingInfo.headingLevel <= selectedHeadingInfo.headingLevel) {\n                // then reached an equivalent or higher heading level than the\n                // original the end of the collapse.\n                cellNum -= 1;\n                break;\n            }\n            if (localCollapsed &&\n                subCellHeadingInfo.isHeading &&\n                subCellHeadingInfo.headingLevel <= localCollapsedLevel) {\n                // then reached the end of the local collapsed, so unset NotebookActions.\n                localCollapsed = false;\n            }\n            if (collapsing || localCollapsed) {\n                // then no extra handling is needed for further locally collapsed\n                // headings.\n                subCell.setHidden(true);\n                continue;\n            }\n            if (subCellHeadingInfo.collapsed && subCellHeadingInfo.isHeading) {\n                localCollapsed = true;\n                localCollapsedLevel = subCellHeadingInfo.headingLevel;\n                // but don't collapse the locally collapsed heading, so continue to\n                // expand the heading. This will get noticed in the next round.\n            }\n            subCell.setHidden(false);\n        }\n        if (cellNum === notebook.widgets.length) {\n            cell.numberChildNodes = cellNum - which - 1;\n        }\n        else {\n            cell.numberChildNodes = cellNum - which;\n        }\n        NotebookActions.setCellCollapse(cell, collapsing);\n        return cellNum + 1;\n    }\n    NotebookActions.setHeadingCollapse = setHeadingCollapse;\n    /**\n     * Toggles the collapse state of the active cell of the given notebook\n     * and ** all of its \"child\" cells ** if the cell is a heading.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function toggleCurrentHeadingCollapse(notebook) {\n        if (!notebook.activeCell || notebook.activeCellIndex === undefined) {\n            return;\n        }\n        let headingInfo = NotebookActions.getHeadingInfo(notebook.activeCell);\n        if (headingInfo.isHeading) {\n            // Then toggle!\n            NotebookActions.setHeadingCollapse(notebook.activeCell, !headingInfo.collapsed, notebook);\n        }\n        ElementExt.scrollIntoViewIfNeeded(notebook.node, notebook.activeCell.node);\n    }\n    NotebookActions.toggleCurrentHeadingCollapse = toggleCurrentHeadingCollapse;\n    /**\n     * If cell is a markdown heading, sets the headingCollapsed field,\n     * and otherwise hides the cell.\n     *\n     * @param cell - The cell to collapse / expand\n     * @param collapsing - Whether to collapse or expand the given cell\n     */\n    function setCellCollapse(cell, collapsing) {\n        if (cell instanceof MarkdownCell) {\n            cell.headingCollapsed = collapsing;\n        }\n        else {\n            cell.setHidden(collapsing);\n        }\n    }\n    NotebookActions.setCellCollapse = setCellCollapse;\n    /**\n     * If given cell is a markdown heading, returns the heading level.\n     * If given cell is not markdown, returns 7 (there are only 6 levels of markdown headings)\n     *\n     * @param cell - The target cell widget.\n     */\n    function getHeadingInfo(cell) {\n        if (!(cell instanceof MarkdownCell)) {\n            return { isHeading: false, headingLevel: 7 };\n        }\n        let level = cell.headingInfo.level;\n        let collapsed = cell.headingCollapsed;\n        return { isHeading: level > 0, headingLevel: level, collapsed: collapsed };\n    }\n    NotebookActions.getHeadingInfo = getHeadingInfo;\n    /**\n     * Trust the notebook after prompting the user.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @returns a promise that resolves when the transaction is finished.\n     *\n     * #### Notes\n     * No dialog will be presented if the notebook is already trusted.\n     */\n    function trust(notebook, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        if (!notebook.model) {\n            return Promise.resolve();\n        }\n        // Do nothing if already trusted.\n        const cells = toArray(notebook.model.cells);\n        const trusted = cells.every(cell => cell.trusted);\n        // FIXME\n        const trustMessage = (React.createElement(\"p\", null,\n            trans.__('A trusted Jupyter notebook may execute hidden malicious code when you open it.'),\n            React.createElement(\"br\", null),\n            trans.__('Selecting trust will re-render this notebook in a trusted state.'),\n            React.createElement(\"br\", null),\n            trans.__('For more information, see'),\n            ' ',\n            React.createElement(\"a\", { href: \"https://jupyter-server.readthedocs.io/en/stable/operators/security.html\", target: \"_blank\", rel: \"noopener noreferrer\" }, trans.__('the Jupyter security documentation'))));\n        if (trusted) {\n            return showDialog({\n                body: trans.__('Notebook is already trusted'),\n                buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n            }).then(() => undefined);\n        }\n        return showDialog({\n            body: trustMessage,\n            title: trans.__('Trust this notebook?'),\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: trans.__('Ok') })\n            ] // FIXME?\n        }).then(result => {\n            if (result.button.accept) {\n                cells.forEach(cell => {\n                    cell.trusted = true;\n                });\n            }\n        });\n    }\n    NotebookActions.trust = trust;\n})(NotebookActions || (NotebookActions = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A signal that emits whenever a cell completes execution.\n     */\n    Private.executed = new Signal({});\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    Private.executionScheduled = new Signal({});\n    /**\n     * A signal that emits when one notebook's cells are all executed.\n     */\n    Private.selectionExecuted = new Signal({});\n    /**\n     * Get the state of a widget before running an action.\n     */\n    function getState(notebook) {\n        return {\n            wasFocused: notebook.node.contains(document.activeElement),\n            activeCell: notebook.activeCell\n        };\n    }\n    Private.getState = getState;\n    /**\n     * Handle the state of a widget after running an action.\n     */\n    function handleState(notebook, state, scrollIfNeeded = false) {\n        const { activeCell, node } = notebook;\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scrollIfNeeded && activeCell) {\n            ElementExt.scrollIntoViewIfNeeded(node, activeCell.node);\n        }\n    }\n    Private.handleState = handleState;\n    /**\n     * Handle the state of a widget after running a run action.\n     */\n    function handleRunState(notebook, state, scroll = false) {\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scroll && state.activeCell) {\n            // Scroll to the top of the previous active cell output.\n            const rect = state.activeCell.inputArea.node.getBoundingClientRect();\n            notebook.scrollToPosition(rect.bottom, 45);\n        }\n    }\n    Private.handleRunState = handleRunState;\n    /**\n     * Clone a cell model.\n     */\n    function cloneCell(model, cell) {\n        switch (cell.type) {\n            case 'code':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createCodeCell({ cell: cell.toJSON() });\n            case 'markdown':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createMarkdownCell({ cell: cell.toJSON() });\n            default:\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createRawCell({ cell: cell.toJSON() });\n        }\n    }\n    Private.cloneCell = cloneCell;\n    /**\n     * Run the selected cells.\n     */\n    function runSelected(notebook, sessionContext) {\n        notebook.mode = 'command';\n        let lastIndex = notebook.activeCellIndex;\n        const selected = notebook.widgets.filter((child, index) => {\n            const active = notebook.isSelectedOrActive(child);\n            if (active) {\n                lastIndex = index;\n            }\n            return active;\n        });\n        notebook.activeCellIndex = lastIndex;\n        notebook.deselectAll();\n        return Promise.all(selected.map(child => runCell(notebook, child, sessionContext)))\n            .then(results => {\n            if (notebook.isDisposed) {\n                return false;\n            }\n            Private.selectionExecuted.emit({\n                notebook,\n                lastCell: notebook.widgets[lastIndex]\n            });\n            // Post an update request.\n            notebook.update();\n            return results.every(result => result);\n        })\n            .catch(reason => {\n            if (reason.message.startsWith('KernelReplyNotOK')) {\n                selected.map(cell => {\n                    // Remove '*' prompt from cells that didn't execute\n                    if (cell.model.type === 'code' &&\n                        cell.model.executionCount == null) {\n                        cell.setPrompt('');\n                    }\n                });\n            }\n            else {\n                throw reason;\n            }\n            Private.selectionExecuted.emit({\n                notebook,\n                lastCell: notebook.widgets[lastIndex]\n            });\n            notebook.update();\n            return false;\n        });\n    }\n    Private.runSelected = runSelected;\n    /**\n     * Run a cell.\n     */\n    function runCell(notebook, cell, sessionContext, translator) {\n        var _a, _b, _c;\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        switch (cell.model.type) {\n            case 'markdown':\n                cell.rendered = true;\n                cell.inputHidden = false;\n                Private.executed.emit({ notebook, cell, success: true });\n                break;\n            case 'code':\n                if (sessionContext) {\n                    if (sessionContext.isTerminating) {\n                        void showDialog({\n                            title: trans.__('Kernel Terminating'),\n                            body: trans.__('The kernel for %1 appears to be terminating. You can not run any cell for now.', (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                        });\n                        break;\n                    }\n                    if (sessionContext.pendingInput) {\n                        void showDialog({\n                            title: trans.__('Cell not executed due to pending input'),\n                            body: trans.__('The cell has not been executed to avoid kernel deadlock as there is another pending input! Submit your pending input and try again.'),\n                            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                        });\n                        return Promise.resolve(false);\n                    }\n                    const deletedCells = (_c = (_b = notebook.model) === null || _b === void 0 ? void 0 : _b.deletedCells) !== null && _c !== void 0 ? _c : [];\n                    Private.executionScheduled.emit({ notebook, cell });\n                    return CodeCell.execute(cell, sessionContext, {\n                        deletedCells,\n                        recordTiming: notebook.notebookConfig.recordTiming\n                    })\n                        .then(reply => {\n                        deletedCells.splice(0, deletedCells.length);\n                        if (cell.isDisposed) {\n                            return false;\n                        }\n                        if (!reply) {\n                            return true;\n                        }\n                        if (reply.content.status === 'ok') {\n                            const content = reply.content;\n                            if (content.payload && content.payload.length) {\n                                handlePayload(content, notebook, cell);\n                            }\n                            return true;\n                        }\n                        else {\n                            throw new KernelError(reply.content);\n                        }\n                    })\n                        .catch(reason => {\n                        if (cell.isDisposed || reason.message.startsWith('Canceled')) {\n                            return false;\n                        }\n                        Private.executed.emit({ notebook, cell, success: false, error: reason });\n                        throw reason;\n                    })\n                        .then(ran => {\n                        if (ran) {\n                            Private.executed.emit({ notebook, cell, success: true });\n                        }\n                        return ran;\n                    });\n                }\n                cell.model.clearExecution();\n                break;\n            default:\n                break;\n        }\n        return Promise.resolve(true);\n    }\n    /**\n     * Handle payloads from an execute reply.\n     *\n     * #### Notes\n     * Payloads are deprecated and there are no official interfaces for them in\n     * the kernel type definitions.\n     * See [Payloads (DEPRECATED)](https://jupyter-client.readthedocs.io/en/latest/messaging.html#payloads-deprecated).\n     */\n    function handlePayload(content, notebook, cell) {\n        var _a;\n        const setNextInput = (_a = content.payload) === null || _a === void 0 ? void 0 : _a.filter(i => {\n            return i.source === 'set_next_input';\n        })[0];\n        if (!setNextInput) {\n            return;\n        }\n        const text = setNextInput.text;\n        const replace = setNextInput.replace;\n        if (replace) {\n            cell.model.value.text = text;\n            return;\n        }\n        // Create a new code cell and add as the next cell.\n        const newCell = notebook.model.contentFactory.createCodeCell({});\n        const cells = notebook.model.cells;\n        const index = ArrayExt.firstIndexOf(toArray(cells), cell.model);\n        newCell.value.text = text;\n        if (index === -1) {\n            cells.push(newCell);\n        }\n        else {\n            cells.insert(index + 1, newCell);\n        }\n    }\n    /**\n     * Copy or cut the selected cell data to the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param cut - Whether to copy or cut.\n     */\n    function copyOrCut(notebook, cut) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = getState(notebook);\n        const clipboard = Clipboard.getInstance();\n        notebook.mode = 'command';\n        clipboard.clear();\n        const data = notebook.widgets\n            .filter(cell => notebook.isSelectedOrActive(cell))\n            .map(cell => cell.model.toJSON())\n            .map(cellJSON => {\n            if (cellJSON.metadata.deletable !== undefined) {\n                delete cellJSON.metadata.deletable;\n            }\n            return cellJSON;\n        });\n        clipboard.setData(JUPYTER_CELL_MIME, data);\n        if (cut) {\n            deleteCells(notebook);\n        }\n        else {\n            notebook.deselectAll();\n        }\n        if (cut) {\n            notebook.lastClipboardInteraction = 'cut';\n        }\n        else {\n            notebook.lastClipboardInteraction = 'copy';\n        }\n        handleState(notebook, state);\n    }\n    Private.copyOrCut = copyOrCut;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        const model = notebook.model;\n        const cells = model.cells;\n        cells.beginCompoundOperation();\n        notebook.widgets.forEach((child, index) => {\n            if (!notebook.isSelectedOrActive(child)) {\n                return;\n            }\n            if (child.model.type !== value) {\n                const cell = child.model.toJSON();\n                let newCell;\n                switch (value) {\n                    case 'code':\n                        newCell = model.contentFactory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        newCell = model.contentFactory.createMarkdownCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                        break;\n                    default:\n                        newCell = model.contentFactory.createRawCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                }\n                cells.set(index, newCell);\n            }\n            if (value === 'markdown') {\n                // Fetch the new widget and unrender it.\n                child = notebook.widgets[index];\n                child.rendered = false;\n            }\n        });\n        cells.endCompoundOperation();\n        notebook.deselectAll();\n    }\n    Private.changeCellType = changeCellType;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * If the last cell is deleted, then the previous one will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        const model = notebook.model;\n        const cells = model.cells;\n        const toDelete = [];\n        notebook.mode = 'command';\n        // Find the cells to delete.\n        notebook.widgets.forEach((child, index) => {\n            const deletable = child.model.metadata.get('deletable') !== false;\n            if (notebook.isSelectedOrActive(child) && deletable) {\n                toDelete.push(index);\n                model.deletedCells.push(child.model.id);\n            }\n        });\n        // If cells are not deletable, we may not have anything to delete.\n        if (toDelete.length > 0) {\n            // Delete the cells as one undo event.\n            cells.beginCompoundOperation();\n            // Delete cells in reverse order to maintain the correct indices.\n            toDelete.reverse().forEach(index => {\n                cells.remove(index);\n            });\n            // Add a new cell if the notebook is empty. This is done\n            // within the compound operation to make the deletion of\n            // a notebook's last cell undoable.\n            if (!cells.length) {\n                cells.push(model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {}));\n            }\n            cells.endCompoundOperation();\n            // Select the *first* interior cell not deleted or the cell\n            // *after* the last selected cell.\n            // Note: The activeCellIndex is clamped to the available cells,\n            // so if the last cell is deleted the previous cell will be activated.\n            // The *first* index is the index of the last cell in the initial\n            // toDelete list due to the `reverse` operation above.\n            notebook.activeCellIndex = toDelete[0] - toDelete.length + 1;\n        }\n        // Deselect any remaining, undeletable cells. Do this even if we don't\n        // delete anything so that users are aware *something* happened.\n        notebook.deselectAll();\n    }\n    Private.deleteCells = deleteCells;\n    /**\n     * Set the markdown header level of a cell.\n     */\n    function setMarkdownHeader(cell, level) {\n        // Remove existing header or leading white space.\n        let source = cell.value.text;\n        const regex = /^(#+\\s*)|^(\\s*)/;\n        const newHeader = Array(level + 1).join('#') + ' ';\n        const matches = regex.exec(source);\n        if (matches) {\n            source = source.slice(matches[0].length);\n        }\n        cell.value.text = newHeader + source;\n    }\n    Private.setMarkdownHeader = setMarkdownHeader;\n})(Private || (Private = {}));\n//# sourceMappingURL=actions.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { addToolbarButtonClass, Dialog, ReactWidget, sessionContextDialogs, showDialog, Toolbar, ToolbarButton, ToolbarButtonComponent, UseSignal } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon, copyIcon, cutIcon, fastForwardIcon, HTMLSelect, pasteIcon, runIcon, saveIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { NotebookActions } from './actions';\n/**\n * The class name added to toolbar cell type dropdown wrapper.\n */\nconst TOOLBAR_CELLTYPE_CLASS = 'jp-Notebook-toolbarCellType';\n/**\n * The class name added to toolbar cell type dropdown.\n */\nconst TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';\n/**\n * A namespace for the default toolbar items.\n */\nexport var ToolbarItems;\n(function (ToolbarItems) {\n    /**\n     * Create save button toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createSaveButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        function onClick() {\n            if (panel.context.model.readOnly) {\n                return showDialog({\n                    title: trans.__('Cannot Save'),\n                    body: trans.__('Document is read-only'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            void panel.context.save().then(() => {\n                if (!panel.isDisposed) {\n                    return panel.context.createCheckpoint();\n                }\n            });\n        }\n        return addToolbarButtonClass(ReactWidget.create(React.createElement(UseSignal, { signal: panel.context.fileChanged }, () => (React.createElement(ToolbarButtonComponent, { icon: saveIcon, onClick: onClick, tooltip: trans.__('Save the notebook contents and create checkpoint'), enabled: !!(panel &&\n                panel.context &&\n                panel.context.contentsModel &&\n                panel.context.contentsModel.writable) })))));\n    }\n    ToolbarItems.createSaveButton = createSaveButton;\n    /**\n     * Create an insert toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createInsertButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                NotebookActions.insertBelow(panel.content);\n            },\n            tooltip: trans.__('Insert a cell below')\n        });\n    }\n    ToolbarItems.createInsertButton = createInsertButton;\n    /**\n     * Create a cut toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createCutButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: cutIcon,\n            onClick: () => {\n                NotebookActions.cut(panel.content);\n            },\n            tooltip: trans.__('Cut the selected cells')\n        });\n    }\n    ToolbarItems.createCutButton = createCutButton;\n    /**\n     * Create a copy toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createCopyButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: copyIcon,\n            onClick: () => {\n                NotebookActions.copy(panel.content);\n            },\n            tooltip: trans.__('Copy the selected cells')\n        });\n    }\n    ToolbarItems.createCopyButton = createCopyButton;\n    /**\n     * Create a paste toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createPasteButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: pasteIcon,\n            onClick: () => {\n                NotebookActions.paste(panel.content);\n            },\n            tooltip: trans.__('Paste cells from the clipboard')\n        });\n    }\n    ToolbarItems.createPasteButton = createPasteButton;\n    /**\n     * Create a run toolbar item.\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createRunButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: runIcon,\n            onClick: () => {\n                void NotebookActions.runAndAdvance(panel.content, panel.sessionContext);\n            },\n            tooltip: trans.__('Run the selected cells and advance')\n        });\n    }\n    ToolbarItems.createRunButton = createRunButton;\n    /**\n     * Create a restart run all toolbar item\n     *\n     * @deprecated since v3.2\n     * This is dead code now.\n     */\n    function createRestartRunAllButton(panel, dialogs, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: fastForwardIcon,\n            onClick: () => {\n                void (dialogs !== null && dialogs !== void 0 ? dialogs : sessionContextDialogs)\n                    .restart(panel.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(panel.content, panel.sessionContext);\n                    }\n                    return restarted;\n                });\n            },\n            tooltip: trans.__('Restart the kernel, then re-run the whole notebook')\n        });\n    }\n    ToolbarItems.createRestartRunAllButton = createRestartRunAllButton;\n    /**\n     * Create a cell type switcher item.\n     *\n     * #### Notes\n     * It will display the type of the current active cell.\n     * If more than one cell is selected but are of different types,\n     * it will display `'-'`.\n     * When the user changes the cell type, it will change the\n     * cell types of the selected cells.\n     * It can handle a change to the context.\n     */\n    function createCellTypeItem(panel, translator) {\n        return new CellTypeSwitcher(panel.content, translator);\n    }\n    ToolbarItems.createCellTypeItem = createCellTypeItem;\n    /**\n     * Get the default toolbar items for panel\n     */\n    function getDefaultItems(panel, sessionDialogs, translator) {\n        return [\n            { name: 'save', widget: createSaveButton(panel, translator) },\n            { name: 'insert', widget: createInsertButton(panel, translator) },\n            { name: 'cut', widget: createCutButton(panel, translator) },\n            { name: 'copy', widget: createCopyButton(panel, translator) },\n            { name: 'paste', widget: createPasteButton(panel, translator) },\n            { name: 'run', widget: createRunButton(panel, translator) },\n            {\n                name: 'interrupt',\n                widget: Toolbar.createInterruptButton(panel.sessionContext, translator)\n            },\n            {\n                name: 'restart',\n                widget: Toolbar.createRestartButton(panel.sessionContext, sessionDialogs, translator)\n            },\n            {\n                name: 'restart-and-run',\n                widget: createRestartRunAllButton(panel, sessionDialogs, translator)\n            },\n            { name: 'cellType', widget: createCellTypeItem(panel, translator) },\n            { name: 'spacer', widget: Toolbar.createSpacerItem() },\n            {\n                name: 'kernelName',\n                widget: Toolbar.createKernelNameItem(panel.sessionContext, sessionDialogs, translator)\n            }\n        ];\n    }\n    ToolbarItems.getDefaultItems = getDefaultItems;\n})(ToolbarItems || (ToolbarItems = {}));\n/**\n * A toolbar widget that switches cell types.\n */\nexport class CellTypeSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     */\n    constructor(widget, translator) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            if (event.target.value !== '-') {\n                NotebookActions.changeCellType(this._notebook, event.target.value);\n                this._notebook.activate();\n            }\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._notebook.activate();\n            }\n        };\n        this._trans = (translator || nullTranslator).load('jupyterlab');\n        this.addClass(TOOLBAR_CELLTYPE_CLASS);\n        this._notebook = widget;\n        if (widget.model) {\n            this.update();\n        }\n        widget.activeCellChanged.connect(this.update, this);\n        // Follow a change in the selection.\n        widget.selectionChanged.connect(this.update, this);\n    }\n    render() {\n        let value = '-';\n        if (this._notebook.activeCell) {\n            value = this._notebook.activeCell.model.type;\n        }\n        for (const widget of this._notebook.widgets) {\n            if (this._notebook.isSelectedOrActive(widget)) {\n                if (widget.model.type !== value) {\n                    value = '-';\n                    break;\n                }\n            }\n        }\n        return (React.createElement(HTMLSelect, { className: TOOLBAR_CELLTYPE_DROPDOWN_CLASS, onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: value, \"aria-label\": this._trans.__('Cell type'), title: this._trans.__('Select the cell type') },\n            React.createElement(\"option\", { value: \"-\" }, \"-\"),\n            React.createElement(\"option\", { value: \"code\" }, this._trans.__('Code')),\n            React.createElement(\"option\", { value: \"markdown\" }, this._trans.__('Markdown')),\n            React.createElement(\"option\", { value: \"raw\" }, this._trans.__('Raw'))));\n    }\n}\n//# sourceMappingURL=default-toolbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport * as models from '@jupyterlab/shared-models';\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A cell list object that supports undo/redo.\n */\nexport class CellList {\n    /**\n     * Construct the cell list.\n     */\n    constructor(modelDB, factory, model) {\n        /**\n         * Prevents that the modeldb event handler is executed when the shared-model event handler is executed and vice-versa.\n         */\n        this._mutex = models.createMutex();\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._factory = factory;\n        this._cellOrder = modelDB.createList('cellOrder');\n        this._cellMap = new ObservableMap();\n        this._cellOrder.changed.connect(this._onOrderChanged, this);\n        this.nbmodel = model;\n        this.nbmodel.changed.connect(this.onSharedModelChanged, this);\n        this.changed.connect(this.onModelDBChanged, this);\n    }\n    onModelDBChanged(self, change) {\n        this._mutex(() => {\n            const nbmodel = this.nbmodel;\n            nbmodel.transact(() => {\n                if (change.type === 'set' || change.type === 'remove') {\n                    nbmodel.deleteCellRange(change.oldIndex, change.oldIndex + change.oldValues.length);\n                }\n                if (change.type === 'set' ||\n                    change.type === 'add' ||\n                    change.type === 'move') {\n                    const cells = change.newValues.map(cell => {\n                        return cell.sharedModel.clone();\n                    });\n                    let insertLocation = change.newIndex;\n                    if (change.type === 'move' && insertLocation > change.oldIndex) {\n                        insertLocation += change.oldValues.length;\n                    }\n                    nbmodel.insertCells(insertLocation, cells);\n                    change.newValues.forEach((cell, index) => {\n                        cell.switchSharedModel(cells[index], false);\n                    });\n                }\n                if (change.type === 'move') {\n                    let from = change.oldIndex;\n                    if (from >= change.newIndex) {\n                        from += change.oldValues.length;\n                    }\n                    nbmodel.deleteCellRange(from, from + change.oldValues.length);\n                }\n            });\n        });\n    }\n    onSharedModelChanged(self, change) {\n        this._mutex(() => {\n            var _a;\n            let currpos = 0;\n            (_a = change.cellsChange) === null || _a === void 0 ? void 0 : _a.forEach(delta => {\n                if (delta.insert != null) {\n                    const cells = delta.insert.map(nbcell => {\n                        const cell = this._factory.createCell(nbcell.cell_type, {});\n                        cell.switchSharedModel(nbcell, true);\n                        return cell;\n                    });\n                    this.insertAll(currpos, cells);\n                    currpos += delta.insert.length;\n                }\n                else if (delta.delete != null) {\n                    this.removeRange(currpos, currpos + delta.delete);\n                }\n                else if (delta.retain != null) {\n                    currpos += delta.retain;\n                }\n            });\n        });\n    }\n    /**\n     * A signal emitted when the cell list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Test whether the cell list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Test whether the list is empty.\n     *\n     * @returns `true` if the cell list is empty, `false` otherwise.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get isEmpty() {\n        return this._cellOrder.length === 0;\n    }\n    /**\n     * Get the length of the cell list.\n     *\n     * @return The number of cells in the cell list.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get length() {\n        return this._cellOrder.length;\n    }\n    /**\n     * Create an iterator over the cells in the cell list.\n     *\n     * @returns A new iterator starting at the front of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        const arr = [];\n        for (const id of toArray(this._cellOrder)) {\n            arr.push(this._cellMap.get(id));\n        }\n        return new ArrayIterator(arr);\n    }\n    /**\n     * Dispose of the resources held by the cell list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        // Clean up the cell map and cell order objects.\n        for (const cell of this._cellMap.values()) {\n            cell.dispose();\n        }\n        this._cellMap.dispose();\n        this._cellOrder.dispose();\n    }\n    /**\n     * Get the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The cell at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._cellMap.get(this._cellOrder.get(index));\n    }\n    /**\n     * Set the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    set(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.set(index, cell.id);\n    }\n    /**\n     * Add a cell to the back of the cell list.\n     *\n     * @param cell - The cell to add to the back of the cell list.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    push(cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        const num = this._cellOrder.push(cell.id);\n        return num;\n    }\n    /**\n     * Insert a cell into the cell list at a specific index.\n     *\n     * @param index - The index at which to insert the cell.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insert(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.insert(index, cell.id);\n    }\n    /**\n     * Remove the first occurrence of a cell from the cell list.\n     *\n     * @param cell - The cell of interest.\n     *\n     * @returns The index of the removed cell, or `-1` if the cell\n     *   is not contained in the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     */\n    removeValue(cell) {\n        const index = ArrayExt.findFirstIndex(toArray(this._cellOrder), id => this._cellMap.get(id) === cell);\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the cell at a specific index.\n     *\n     * @param index - The index of the cell of interest.\n     *\n     * @returns The cell at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const id = this._cellOrder.get(index);\n        this._cellOrder.remove(index);\n        const cell = this._cellMap.get(id);\n        return cell;\n    }\n    /**\n     * Remove all cells from the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        this._cellOrder.clear();\n    }\n    /**\n     * Move a cell from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        this._cellOrder.move(fromIndex, toIndex);\n    }\n    /**\n     * Push a set of cells to the back of the cell list.\n     *\n     * @param cells - An iterable or array-like set of cells to add.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    pushAll(cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            // Set the internal data structures.\n            this._cellMap.set(cell.id, cell);\n            this._cellOrder.push(cell.id);\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the cell list at the specified index.\n     *\n     * @param index - The index at which to insert the cells.\n     *\n     * @param cells - The cells to insert at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insertAll(index, cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            this._cellMap.set(cell.id, cell);\n            // @todo it looks like this compound operation shoult start before the `each` loop.\n            this._cellOrder.beginCompoundOperation();\n            this._cellOrder.insert(index++, cell.id);\n            this._cellOrder.endCompoundOperation();\n        });\n        return this.length;\n    }\n    /**\n     * Remove a range of items from the cell list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed cell and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        this._cellOrder.removeRange(startIndex, endIndex);\n        return this.length;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this.nbmodel.canRedo();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this.nbmodel.canUndo();\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._cellOrder.beginCompoundOperation(isUndoAble);\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._cellOrder.endCompoundOperation();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.nbmodel.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.nbmodel.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this.nbmodel.clearUndoHistory();\n    }\n    _onOrderChanged(order, change) {\n        if (change.type === 'add' || change.type === 'set') {\n            each(change.newValues, id => {\n                const existingCell = this._cellMap.get(id);\n                if (existingCell == null) {\n                    const cellDB = this._factory.modelDB;\n                    const cellType = cellDB.createValue(id + '.type');\n                    let cell;\n                    switch (cellType.get()) {\n                        case 'code':\n                            cell = this._factory.createCodeCell({ id: id });\n                            break;\n                        case 'markdown':\n                            cell = this._factory.createMarkdownCell({ id: id });\n                            break;\n                        default:\n                            cell = this._factory.createRawCell({ id: id });\n                            break;\n                    }\n                    this._cellMap.set(id, cell);\n                }\n                else if (!existingCell.sharedModel.isStandalone) {\n                    this._mutex(() => {\n                        // it does already exist, probably because it was deleted previously and we introduced it\n                        // copy it to a fresh codecell instance\n                        const cell = existingCell.toJSON();\n                        let freshCell = null;\n                        switch (cell.cell_type) {\n                            case 'code':\n                                freshCell = this._factory.createCodeCell({ cell });\n                                break;\n                            case 'markdown':\n                                freshCell = this._factory.createMarkdownCell({ cell });\n                                break;\n                            default:\n                                freshCell = this._factory.createRawCell({ cell });\n                                break;\n                        }\n                        this._cellMap.set(id, freshCell);\n                    });\n                }\n            });\n        }\n        const newValues = [];\n        const oldValues = [];\n        each(change.newValues, id => {\n            newValues.push(this._cellMap.get(id));\n        });\n        each(change.oldValues, id => {\n            oldValues.push(this._cellMap.get(id));\n        });\n        this._changed.emit({\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        });\n    }\n}\n//# sourceMappingURL=celllist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeCellModel, MarkdownCellModel, RawCellModel } from '@jupyterlab/cells';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ModelDB } from '@jupyterlab/observables';\nimport * as models from '@jupyterlab/shared-models';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { CellList } from './celllist';\nconst UNSHARED_KEYS = ['kernelspec', 'language_info'];\n/**\n * An implementation of a notebook Model.\n */\nexport class NotebookModel {\n    /**\n     * Construct a new notebook model.\n     */\n    constructor(options = {}) {\n        /**\n         * A mutex to update the shared model.\n         */\n        this._modelDBMutex = models.createMutex();\n        this._readOnly = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._nbformat = nbformat.MAJOR_VERSION;\n        this._nbformatMinor = nbformat.MINOR_VERSION;\n        this._isDisposed = false;\n        if (options.modelDB) {\n            this.modelDB = options.modelDB;\n        }\n        else {\n            this.modelDB = new ModelDB();\n        }\n        this.sharedModel = models.YNotebook.create(options.disableDocumentWideUndoRedo || false);\n        this._isInitialized = options.isInitialized === false ? false : true;\n        const factory = options.contentFactory || NotebookModel.defaultContentFactory;\n        this.contentFactory = factory.clone(this.modelDB.view('cells'));\n        this._cells = new CellList(this.modelDB, this.contentFactory, this.sharedModel);\n        this._trans = (options.translator || nullTranslator).load('jupyterlab');\n        this._cells.changed.connect(this._onCellsChanged, this);\n        // Handle initial metadata.\n        const metadata = this.modelDB.createMap('metadata');\n        if (!metadata.has('language_info')) {\n            const name = options.languagePreference || '';\n            metadata.set('language_info', { name });\n        }\n        this._ensureMetadata();\n        metadata.changed.connect(this._onMetadataChanged, this);\n        this._deletedCells = [];\n        this.sharedModel.dirty = false;\n        this.sharedModel.changed.connect(this._onStateChanged, this);\n    }\n    /**\n     * A signal emitted when the document content changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the document state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The dirty state of the document.\n     */\n    get dirty() {\n        return this.sharedModel.dirty;\n    }\n    set dirty(newValue) {\n        if (newValue === this.dirty) {\n            return;\n        }\n        this.sharedModel.dirty = newValue;\n    }\n    /**\n     * The read only state of the document.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(newValue) {\n        if (newValue === this._readOnly) {\n            return;\n        }\n        const oldValue = this._readOnly;\n        this._readOnly = newValue;\n        this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n    }\n    /**\n     * The metadata associated with the notebook.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the observable list of notebook cells.\n     */\n    get cells() {\n        return this._cells;\n    }\n    /**\n     * The major version number of the nbformat.\n     */\n    get nbformat() {\n        return this._nbformat;\n    }\n    /**\n     * The minor version number of the nbformat.\n     */\n    get nbformatMinor() {\n        return this._nbformatMinor;\n    }\n    /**\n     * The default kernel name of the document.\n     */\n    get defaultKernelName() {\n        const spec = this.metadata.get('kernelspec');\n        return spec ? spec.name : '';\n    }\n    /**\n     * A list of deleted cells for the notebook..\n     */\n    get deletedCells() {\n        return this._deletedCells;\n    }\n    /**\n     * If the model is initialized or not.\n     */\n    get isInitialized() {\n        return this._isInitialized;\n    }\n    /**\n     * The default kernel language of the document.\n     */\n    get defaultKernelLanguage() {\n        const info = this.metadata.get('language_info');\n        return info ? info.name : '';\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        const cells = this.cells;\n        this._cells = null;\n        cells.dispose();\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Serialize the model to a string.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n    /**\n     * Deserialize the model from a string.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromString(value) {\n        this.fromJSON(JSON.parse(value));\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        var _a, _b;\n        const cells = [];\n        for (let i = 0; i < ((_b = (_a = this.cells) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i++) {\n            const cell = this.cells.get(i).toJSON();\n            if (this._nbformat === 4 && this._nbformatMinor <= 4) {\n                // strip cell ids if we have notebook format 4.0-4.4\n                delete cell.id;\n            }\n            cells.push(cell);\n        }\n        this._ensureMetadata();\n        const metadata = this.sharedModel.getMetadata();\n        for (const key of this.metadata.keys()) {\n            metadata[key] = JSON.parse(JSON.stringify(this.metadata.get(key)));\n        }\n        return {\n            metadata,\n            nbformat_minor: this._nbformatMinor,\n            nbformat: this._nbformat,\n            cells\n        };\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromJSON(value) {\n        const cells = [];\n        const factory = this.contentFactory;\n        const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n        for (const cell of value.cells) {\n            const options = { cell };\n            if (useId) {\n                options.id = cell.id;\n            }\n            switch (cell.cell_type) {\n                case 'code':\n                    cells.push(factory.createCodeCell(options));\n                    break;\n                case 'markdown':\n                    cells.push(factory.createMarkdownCell(options));\n                    break;\n                case 'raw':\n                    cells.push(factory.createRawCell(options));\n                    break;\n                default:\n                    continue;\n            }\n        }\n        this.cells.beginCompoundOperation();\n        this.cells.clear();\n        this.cells.pushAll(cells);\n        this.cells.endCompoundOperation();\n        this.sharedModel.nbformat_minor =\n            nbformat.MINOR_VERSION;\n        this.sharedModel.nbformat = nbformat.MAJOR_VERSION;\n        const origNbformat = value.metadata.orig_nbformat;\n        if (value.nbformat !== this._nbformat) {\n            this.sharedModel.nbformat = value.nbformat;\n        }\n        if (value.nbformat_minor > this._nbformatMinor) {\n            this.sharedModel.nbformat_minor =\n                value.nbformat_minor;\n        }\n        // Alert the user if the format changes.\n        if (origNbformat !== undefined && this._nbformat !== origNbformat) {\n            const newer = this._nbformat > origNbformat;\n            let msg;\n            if (newer) {\n                msg = this._trans.__(`This notebook has been converted from an older notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (v%2) will be used.\n'Older versions of Jupyter may not be able to read the new format.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            else {\n                msg = this._trans.__(`This notebook has been converted from an newer notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (v%2) will be used.\nSome features of the original notebook may not be available.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            void showDialog({\n                title: this._trans.__('Notebook converted'),\n                body: msg,\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n        }\n        // Update the metadata.\n        this.metadata.clear();\n        const metadata = value.metadata;\n        for (const key in metadata) {\n            // orig_nbformat is not intended to be stored per spec.\n            if (key === 'orig_nbformat') {\n                continue;\n            }\n            this.metadata.set(key, metadata[key]);\n        }\n        this._ensureMetadata();\n        this.dirty = true;\n    }\n    /**\n     * Initialize the model with its current state.\n     *\n     * # Notes\n     * Adds an empty code cell if the model is empty\n     * and clears undo state.\n     */\n    initialize() {\n        if (!this.cells.length) {\n            const factory = this.contentFactory;\n            this.cells.push(factory.createCodeCell({}));\n        }\n        this._isInitialized = true;\n        this.cells.clearUndo();\n    }\n    /**\n     * Handle a change in the cells list.\n     */\n    _onCellsChanged(list, change) {\n        switch (change.type) {\n            case 'add':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            case 'remove':\n                break;\n            case 'set':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            default:\n                break;\n        }\n        this.triggerContentChange();\n    }\n    _onStateChanged(sender, changes) {\n        if (changes.stateChange) {\n            changes.stateChange.forEach(value => {\n                if (value.name === 'nbformat') {\n                    this._nbformat = value.newValue;\n                }\n                if (value.name === 'nbformatMinor') {\n                    this._nbformatMinor = value.newValue;\n                }\n                if (value.name !== 'dirty' || value.oldValue !== value.newValue) {\n                    this.triggerStateChange(value);\n                }\n            });\n        }\n        if (changes.metadataChange) {\n            const metadata = changes.metadataChange.newValue;\n            this._modelDBMutex(() => {\n                Object.entries(metadata).forEach(([key, value]) => {\n                    this.metadata.set(key, value);\n                });\n            });\n        }\n    }\n    _onMetadataChanged(metadata, change) {\n        if (!UNSHARED_KEYS.includes(change.key)) {\n            this._modelDBMutex(() => {\n                this.sharedModel.updateMetadata(metadata.toJSON());\n            });\n        }\n        this.triggerContentChange();\n    }\n    /**\n     * Make sure we have the required metadata fields.\n     */\n    _ensureMetadata() {\n        const metadata = this.metadata;\n        if (!metadata.has('language_info')) {\n            metadata.set('language_info', { name: '' });\n        }\n        if (!metadata.has('kernelspec')) {\n            metadata.set('kernelspec', { name: '', display_name: '' });\n        }\n    }\n    /**\n     * Trigger a state change signal.\n     */\n    triggerStateChange(args) {\n        this._stateChanged.emit(args);\n    }\n    /**\n     * Trigger a content changed signal.\n     */\n    triggerContentChange() {\n        this._contentChanged.emit(void 0);\n        this.dirty = true;\n    }\n    /**\n     * Whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n}\n/**\n * The namespace for the `NotebookModel` class statics.\n */\n(function (NotebookModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create a new cell model factory.\n         */\n        constructor(options) {\n            this.codeCellContentFactory =\n                options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n            this.modelDB = options.modelDB;\n        }\n        /**\n         * Create a new cell by cell type.\n         *\n         * @param type:  the type of the cell to create.\n         *\n         * @param options: the cell creation options.\n         *\n         * #### Notes\n         * This method is intended to be a convenience method to programmatically\n         * call the other cell creation methods in the factory.\n         */\n        createCell(type, options) {\n            switch (type) {\n                case 'code':\n                    return this.createCodeCell(options);\n                case 'markdown':\n                    return this.createMarkdownCell(options);\n                case 'raw':\n                default:\n                    return this.createRawCell(options);\n            }\n        }\n        /**\n         * Create a new code cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new code cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         *   If the contentFactory is not provided, the instance\n         *   `codeCellContentFactory` will be used.\n         */\n        createCodeCell(options) {\n            if (options.contentFactory) {\n                options.contentFactory = this.codeCellContentFactory;\n            }\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new CodeCellModel(options);\n        }\n        /**\n         * Create a new markdown cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new markdown cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createMarkdownCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new MarkdownCellModel(options);\n        }\n        /**\n         * Create a new raw cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new raw cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createRawCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new RawCellModel(options);\n        }\n        /**\n         * Clone the content factory with a new IModelDB.\n         */\n        clone(modelDB) {\n            return new ContentFactory({\n                modelDB: modelDB,\n                codeCellContentFactory: this.codeCellContentFactory\n            });\n        }\n    }\n    NotebookModel.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    NotebookModel.defaultContentFactory = new ContentFactory({});\n})(NotebookModel || (NotebookModel = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { NotebookModel } from './model';\n/**\n * A model factory for notebooks.\n */\nexport class NotebookModelFactory {\n    /**\n     * Construct a new notebook model factory.\n     */\n    constructor(options) {\n        this._disposed = false;\n        this._disableDocumentWideUndoRedo =\n            options.disableDocumentWideUndoRedo || false;\n        const codeCellContentFactory = options.codeCellContentFactory;\n        this.contentFactory =\n            options.contentFactory ||\n                new NotebookModel.ContentFactory({ codeCellContentFactory });\n    }\n    /**\n     * Define the disableDocumentWideUndoRedo property.\n     */\n    set disableDocumentWideUndoRedo(disableDocumentWideUndoRedo) {\n        this._disableDocumentWideUndoRedo = disableDocumentWideUndoRedo;\n    }\n    /**\n     * The name of the model.\n     */\n    get name() {\n        return 'notebook';\n    }\n    /**\n     * The content type of the file.\n     */\n    get contentType() {\n        return 'notebook';\n    }\n    /**\n     * The format of the file.\n     */\n    get fileFormat() {\n        return 'json';\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the model factory.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Create a new model for a given path.\n     *\n     * @param languagePreference - An optional kernel language preference.\n     *\n     * @returns A new document model.\n     */\n    createNew(languagePreference, modelDB, isInitialized) {\n        const contentFactory = this.contentFactory;\n        return new NotebookModel({\n            languagePreference,\n            contentFactory,\n            modelDB,\n            isInitialized,\n            disableDocumentWideUndoRedo: this._disableDocumentWideUndoRedo\n        });\n    }\n    /**\n     * Get the preferred kernel language given a path.\n     */\n    preferredLanguage(path) {\n        return '';\n    }\n}\n//# sourceMappingURL=modelfactory.js.map","import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport * as React from 'react';\n/**\n * A pure function for rendering a Command/Edit mode component.\n *\n * @param props: the props for rendering the component.\n *\n * @returns a tsx component for command/edit mode.\n */\nfunction CommandEditComponent(props) {\n    const trans = (props.translator || nullTranslator).load('jupyterlab');\n    return (React.createElement(TextItem, { source: trans.__('Mode: %1', props.modeNames[props.notebookMode]) }));\n}\n/**\n * StatusBar item to display which notebook mode user is in.\n */\nexport class CommandEditStatus extends VDomRenderer {\n    /**\n     * Construct a new CommandEdit status item.\n     */\n    constructor(translator) {\n        super(new CommandEditStatus.Model());\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._modeNames = {\n            command: this._trans.__('Command'),\n            edit: this._trans.__('Edit')\n        };\n    }\n    /**\n     * Render the CommandEdit status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = this._trans.__('Notebook is in %1 mode', this._modeNames[this.model.notebookMode]);\n        return (React.createElement(CommandEditComponent, { notebookMode: this.model.notebookMode, translator: this.translator, modeNames: this._modeNames }));\n    }\n}\n/**\n * A namespace for CommandEdit statics.\n */\n(function (CommandEditStatus) {\n    /**\n     * A VDomModel for the CommandEdit renderer.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * On a change to the notebook, update the mode.\n             */\n            this._onChanged = (_notebook) => {\n                const oldMode = this._notebookMode;\n                if (this._notebook) {\n                    this._notebookMode = _notebook.mode;\n                }\n                else {\n                    this._notebookMode = 'command';\n                }\n                this._triggerChange(oldMode, this._notebookMode);\n            };\n            this._notebookMode = 'command';\n            this._notebook = null;\n        }\n        /**\n         * The current mode of the current notebook.\n         */\n        get notebookMode() {\n            return this._notebookMode;\n        }\n        /**\n         * Set the current notebook for the model.\n         */\n        set notebook(notebook) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.stateChanged.disconnect(this._onChanged, this);\n                oldNotebook.activeCellChanged.disconnect(this._onChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onChanged, this);\n            }\n            const oldMode = this._notebookMode;\n            this._notebook = notebook;\n            if (this._notebook === null) {\n                this._notebookMode = 'command';\n            }\n            else {\n                this._notebookMode = this._notebook.mode;\n                this._notebook.stateChanged.connect(this._onChanged, this);\n                this._notebook.activeCellChanged.connect(this._onChanged, this);\n                this._notebook.modelContentChanged.connect(this._onChanged, this);\n            }\n            this._triggerChange(oldMode, this._notebookMode);\n        }\n        /**\n         * Trigger a state change for the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState !== newState) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    CommandEditStatus.Model = Model;\n})(CommandEditStatus || (CommandEditStatus = {}));\n//# sourceMappingURL=modestatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Collapse, Styling } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper, JSONEditor } from '@jupyterlab/codeeditor';\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, chain, each } from '@lumino/algorithm';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nclass RankedPanel extends Widget {\n    constructor() {\n        super();\n        this._items = [];\n        this.layout = new PanelLayout();\n        this.addClass('jp-RankedPanel');\n    }\n    addWidget(widget, rank) {\n        const rankItem = { widget, rank };\n        const index = ArrayExt.upperBound(this._items, rankItem, Private.itemCmp);\n        ArrayExt.insert(this._items, index, rankItem);\n        const layout = this.layout;\n        layout.insertWidget(index, widget);\n    }\n    /**\n     * Handle the removal of a child\n     *\n     */\n    onChildRemoved(msg) {\n        const index = ArrayExt.findFirstIndex(this._items, item => item.widget === msg.child);\n        if (index !== -1) {\n            ArrayExt.removeAt(this._items, index);\n        }\n    }\n}\n/**\n * A widget that provides metadata tools.\n */\nexport class NotebookTools extends Widget {\n    /**\n     * Construct a new NotebookTools object.\n     */\n    constructor(options) {\n        super();\n        this.addClass('jp-NotebookTools');\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._commonTools = new RankedPanel();\n        this._advancedTools = new RankedPanel();\n        this._advancedTools.title.label = this._trans.__('Advanced Tools');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(this._commonTools);\n        layout.addWidget(new Collapse({ widget: this._advancedTools }));\n        this._tracker = options.tracker;\n        this._tracker.currentChanged.connect(this._onActiveNotebookPanelChanged, this);\n        this._tracker.activeCellChanged.connect(this._onActiveCellChanged, this);\n        this._tracker.selectionChanged.connect(this._onSelectionChanged, this);\n        this._onActiveNotebookPanelChanged();\n        this._onActiveCellChanged();\n        this._onSelectionChanged();\n    }\n    /**\n     * The active cell widget.\n     */\n    get activeCell() {\n        return this._tracker.activeCell;\n    }\n    /**\n     * The currently selected cells.\n     */\n    get selectedCells() {\n        const panel = this._tracker.currentWidget;\n        if (!panel) {\n            return [];\n        }\n        const notebook = panel.content;\n        return notebook.widgets.filter(cell => notebook.isSelectedOrActive(cell));\n    }\n    /**\n     * The current notebook.\n     */\n    get activeNotebookPanel() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Add a cell tool item.\n     */\n    addItem(options) {\n        var _a;\n        const tool = options.tool;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        let section;\n        if (options.section === 'advanced') {\n            section = this._advancedTools;\n        }\n        else {\n            section = this._commonTools;\n        }\n        tool.addClass('jp-NotebookTools-tool');\n        section.addWidget(tool, rank);\n        // TODO: perhaps the necessary notebookTools functionality should be\n        // consolidated into a single object, rather than a broad reference to this.\n        tool.notebookTools = this;\n        // Trigger the tool to update its active notebook and cell.\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveNotebookPanelMessage);\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveCellMessage);\n    }\n    /**\n     * Handle a change to the notebook panel.\n     */\n    _onActiveNotebookPanelChanged() {\n        if (this._prevActiveNotebookModel &&\n            !this._prevActiveNotebookModel.isDisposed) {\n            this._prevActiveNotebookModel.metadata.changed.disconnect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        const activeNBModel = this.activeNotebookPanel && this.activeNotebookPanel.content\n            ? this.activeNotebookPanel.content.model\n            : null;\n        this._prevActiveNotebookModel = activeNBModel;\n        if (activeNBModel) {\n            activeNBModel.metadata.changed.connect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveNotebookPanelMessage);\n        });\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    _onActiveCellChanged() {\n        if (this._prevActiveCell && !this._prevActiveCell.isDisposed) {\n            this._prevActiveCell.metadata.changed.disconnect(this._onActiveCellMetadataChanged, this);\n        }\n        const activeCell = this.activeCell ? this.activeCell.model : null;\n        this._prevActiveCell = activeCell;\n        if (activeCell) {\n            activeCell.metadata.changed.connect(this._onActiveCellMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveCellMessage);\n        });\n    }\n    /**\n     * Handle a change in the selection.\n     */\n    _onSelectionChanged() {\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.SelectionMessage);\n        });\n    }\n    /**\n     * Handle a change in the active cell metadata.\n     */\n    _onActiveNotebookPanelMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activenotebookpanel-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    /**\n     * Handle a change in the notebook model metadata.\n     */\n    _onActiveCellMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activecell-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    _toolChildren() {\n        return chain(this._commonTools.children(), this._advancedTools.children());\n    }\n}\n/**\n * The namespace for NotebookTools class statics.\n */\n(function (NotebookTools) {\n    /**\n     * A singleton conflatable `'activenotebookpanel-changed'` message.\n     */\n    NotebookTools.ActiveNotebookPanelMessage = new ConflatableMessage('activenotebookpanel-changed');\n    /**\n     * A singleton conflatable `'activecell-changed'` message.\n     */\n    NotebookTools.ActiveCellMessage = new ConflatableMessage('activecell-changed');\n    /**\n     * A singleton conflatable `'selection-changed'` message.\n     */\n    NotebookTools.SelectionMessage = new ConflatableMessage('selection-changed');\n    /**\n     * The base notebook tool, meant to be subclassed.\n     */\n    class Tool extends Widget {\n        dispose() {\n            super.dispose();\n            if (this.notebookTools) {\n                this.notebookTools = null;\n            }\n        }\n        /**\n         * Process a message sent to the widget.\n         *\n         * @param msg - The message sent to the widget.\n         */\n        processMessage(msg) {\n            super.processMessage(msg);\n            switch (msg.type) {\n                case 'activenotebookpanel-changed':\n                    this.onActiveNotebookPanelChanged(msg);\n                    break;\n                case 'activecell-changed':\n                    this.onActiveCellChanged(msg);\n                    break;\n                case 'selection-changed':\n                    this.onSelectionChanged(msg);\n                    break;\n                case 'activecell-metadata-changed':\n                    this.onActiveCellMetadataChanged(msg);\n                    break;\n                case 'activenotebookpanel-metadata-changed':\n                    this.onActiveNotebookPanelMetadataChanged(msg);\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle a change to the notebook panel.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the selection.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onSelectionChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellMetadataChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            /* no-op */\n        }\n    }\n    NotebookTools.Tool = Tool;\n    /**\n     * A cell tool displaying the active cell contents.\n     */\n    class ActiveCellTool extends Tool {\n        /**\n         * Construct a new active cell tool.\n         */\n        constructor() {\n            super();\n            this._model = new CodeEditor.Model();\n            this.addClass('jp-ActiveCellTool');\n            this.addClass('jp-InputArea');\n            this.layout = new PanelLayout();\n        }\n        /**\n         * Dispose of the resources used by the tool.\n         */\n        dispose() {\n            if (this._model === null) {\n                return;\n            }\n            this._model.dispose();\n            this._model = null;\n            super.dispose();\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            const layout = this.layout;\n            const count = layout.widgets.length;\n            for (let i = 0; i < count; i++) {\n                layout.widgets[0].dispose();\n            }\n            if (this._cellModel && !this._cellModel.isDisposed) {\n                this._cellModel.value.changed.disconnect(this._onValueChanged, this);\n                this._cellModel.mimeTypeChanged.disconnect(this._onMimeTypeChanged, this);\n            }\n            if (!activeCell) {\n                const cell = new Widget();\n                cell.addClass('jp-InputArea-editor');\n                cell.addClass('jp-InputArea-editor');\n                layout.addWidget(cell);\n                this._cellModel = null;\n                return;\n            }\n            const promptNode = activeCell.promptNode\n                ? activeCell.promptNode.cloneNode(true)\n                : undefined;\n            const prompt = new Widget({ node: promptNode });\n            const factory = activeCell.contentFactory.editorFactory;\n            const cellModel = (this._cellModel = activeCell.model);\n            cellModel.value.changed.connect(this._onValueChanged, this);\n            cellModel.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n            this._model.value.text = cellModel.value.text.split('\\n')[0];\n            this._model.mimeType = cellModel.mimeType;\n            const model = this._model;\n            const editorWidget = new CodeEditorWrapper({ model, factory });\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.editor.setOption('readOnly', true);\n            layout.addWidget(prompt);\n            layout.addWidget(editorWidget);\n        }\n        /**\n         * Handle a change to the current editor value.\n         */\n        _onValueChanged() {\n            this._model.value.text = this._cellModel.value.text.split('\\n')[0];\n        }\n        /**\n         * Handle a change to the current editor mimetype.\n         */\n        _onMimeTypeChanged() {\n            this._model.mimeType = this._cellModel.mimeType;\n        }\n    }\n    NotebookTools.ActiveCellTool = ActiveCellTool;\n    /**\n     * A raw metadata editor.\n     */\n    class MetadataEditorTool extends Tool {\n        /**\n         * Construct a new raw metadata tool.\n         */\n        constructor(options) {\n            super();\n            const { editorFactory } = options;\n            this.addClass('jp-MetadataEditorTool');\n            const layout = (this.layout = new PanelLayout());\n            this.editor = new JSONEditor({\n                editorFactory\n            });\n            this.editor.title.label = options.label || 'Edit Metadata';\n            const titleNode = new Widget({ node: document.createElement('label') });\n            titleNode.node.textContent = options.label || 'Edit Metadata';\n            layout.addWidget(titleNode);\n            layout.addWidget(this.editor);\n        }\n    }\n    NotebookTools.MetadataEditorTool = MetadataEditorTool;\n    /**\n     * A notebook metadata editor\n     */\n    class NotebookMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Notebook Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the notebook.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the notebook metadata.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            var _a, _b;\n            const nb = this.notebookTools.activeNotebookPanel &&\n                this.notebookTools.activeNotebookPanel.content;\n            this.editor.source = (_b = (_a = nb === null || nb === void 0 ? void 0 : nb.model) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : null;\n        }\n    }\n    NotebookTools.NotebookMetadataEditorTool = NotebookMetadataEditorTool;\n    /**\n     * A cell metadata editor\n     */\n    class CellMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Cell Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the active cell metadata.\n         */\n        onActiveCellMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            const cell = this.notebookTools.activeCell;\n            this.editor.source = cell ? cell.model.metadata : null;\n        }\n    }\n    NotebookTools.CellMetadataEditorTool = CellMetadataEditorTool;\n    /**\n     * A cell tool that provides a selection for a given metadata key.\n     */\n    class KeySelector extends Tool {\n        /**\n         * Construct a new KeySelector.\n         */\n        constructor(options) {\n            // TODO: use react\n            super({ node: Private.createSelectorNode(options) });\n            /**\n             * Get the value for the data.\n             */\n            this._getValue = (cell) => {\n                let value = cell.model.metadata.get(this.key);\n                if (value === undefined) {\n                    value = this._default;\n                }\n                return value;\n            };\n            /**\n             * Set the value for the data.\n             */\n            this._setValue = (cell, value) => {\n                if (value === this._default) {\n                    cell.model.metadata.delete(this.key);\n                }\n                else {\n                    cell.model.metadata.set(this.key, value);\n                }\n            };\n            this._changeGuard = false;\n            this.addClass('jp-KeySelector');\n            this.key = options.key;\n            this._default = options.default;\n            this._validCellTypes = options.validCellTypes || [];\n            this._getter = options.getter || this._getValue;\n            this._setter = options.setter || this._setValue;\n        }\n        /**\n         * The select node for the widget.\n         */\n        get selectNode() {\n            return this.node.getElementsByTagName('select')[0];\n        }\n        /**\n         * Handle the DOM events for the widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notebook panel's node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'change':\n                    this.onValueChanged();\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            const node = this.selectNode;\n            node.addEventListener('change', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            const node = this.selectNode;\n            node.removeEventListener('change', this);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            const select = this.selectNode;\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell) {\n                select.disabled = true;\n                select.value = '';\n                return;\n            }\n            const cellType = activeCell.model.type;\n            if (this._validCellTypes.length &&\n                this._validCellTypes.indexOf(cellType) === -1) {\n                select.value = '';\n                select.disabled = true;\n                return;\n            }\n            select.disabled = false;\n            this._changeGuard = true;\n            const getter = this._getter;\n            select.value = JSON.stringify(getter(activeCell));\n            this._changeGuard = false;\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         */\n        onActiveCellMetadataChanged(msg) {\n            if (this._changeGuard) {\n                return;\n            }\n            const select = this.selectNode;\n            const cell = this.notebookTools.activeCell;\n            if (msg.args.key === this.key && cell) {\n                this._changeGuard = true;\n                const getter = this._getter;\n                select.value = JSON.stringify(getter(cell));\n                this._changeGuard = false;\n            }\n        }\n        /**\n         * Handle a change to the value.\n         */\n        onValueChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell || this._changeGuard) {\n                return;\n            }\n            this._changeGuard = true;\n            const select = this.selectNode;\n            const setter = this._setter;\n            setter(activeCell, JSON.parse(select.value));\n            this._changeGuard = false;\n        }\n    }\n    NotebookTools.KeySelector = KeySelector;\n    /**\n     * Create a slideshow selector.\n     */\n    function createSlideShowSelector(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        trans.__('');\n        const options = {\n            key: 'slideshow',\n            title: trans.__('Slide Type'),\n            optionValueArray: [\n                ['-', null],\n                [trans.__('Slide'), 'slide'],\n                [trans.__('Sub-Slide'), 'subslide'],\n                [trans.__('Fragment'), 'fragment'],\n                [trans.__('Skip'), 'skip'],\n                [trans.__('Notes'), 'notes']\n            ],\n            getter: cell => {\n                const value = cell.model.metadata.get('slideshow');\n                return value && value['slide_type'];\n            },\n            setter: (cell, value) => {\n                let data = cell.model.metadata.get('slideshow') || Object.create(null);\n                if (value === null) {\n                    // Make a shallow copy so we aren't modifying the original metadata.\n                    data = Object.assign({}, data);\n                    delete data.slide_type;\n                }\n                else {\n                    data = Object.assign(Object.assign({}, data), { slide_type: value });\n                }\n                if (Object.keys(data).length > 0) {\n                    cell.model.metadata.set('slideshow', data);\n                }\n                else {\n                    cell.model.metadata.delete('slideshow');\n                }\n            }\n        };\n        return new KeySelector(options);\n    }\n    NotebookTools.createSlideShowSelector = createSlideShowSelector;\n    /**\n     * Create an nbconvert selector.\n     */\n    function createNBConvertSelector(optionValueArray, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return new KeySelector({\n            key: 'raw_mimetype',\n            title: trans.__('Raw NBConvert Format'),\n            optionValueArray: optionValueArray,\n            validCellTypes: ['raw']\n        });\n    }\n    NotebookTools.createNBConvertSelector = createNBConvertSelector;\n})(NotebookTools || (NotebookTools = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A comparator function for widget rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Create the node for a KeySelector.\n     */\n    function createSelectorNode(options) {\n        const name = options.key;\n        const title = options.title || name[0].toLocaleUpperCase() + name.slice(1);\n        const optionNodes = [];\n        let value;\n        let option;\n        each(options.optionValueArray, item => {\n            option = item[0];\n            value = JSON.stringify(item[1]);\n            optionNodes.push(h.option({ value }, option));\n        });\n        const node = VirtualDOM.realize(h.div({}, h.label(title, h.select({}, optionNodes))));\n        Styling.styleNode(node);\n        return node;\n    }\n    Private.createSelectorNode = createSelectorNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=notebooktools.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Cell, CodeCell, MarkdownCell, RawCell } from '@jupyterlab/cells';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { ArrayExt, each, findIndex } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { NotebookActions } from './actions';\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n/**\n * The data attribute added to a widget that can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The data attribute added to a widget that can undo.\n */\nconst UNDOER = 'jpUndoer';\n/**\n * The class name added to notebook widgets.\n */\nconst NB_CLASS = 'jp-Notebook';\n/**\n * The class name added to notebook widget cells.\n */\nconst NB_CELL_CLASS = 'jp-Notebook-cell';\n/**\n * The class name added to a notebook in edit mode.\n */\nconst EDIT_CLASS = 'jp-mod-editMode';\n/**\n * The class name added to a notebook in command mode.\n */\nconst COMMAND_CLASS = 'jp-mod-commandMode';\n/**\n * The class name added to the active cell.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The class name added to selected cells.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to an active cell when there are other selected cells.\n */\nconst OTHER_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to unconfined images.\n */\nconst UNCONFINED_CLASS = 'jp-mod-unconfined';\n/**\n * The class name added to a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to a drop source.\n */\nconst DROP_SOURCE_CLASS = 'jp-mod-dropSource';\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class attached to the heading collapser button\n */\nconst HEADING_COLLAPSER_CLASS = 'jp-collapseHeadingButton';\nconst SIDE_BY_SIDE_CLASS = 'jp-mod-sideBySide';\nif (window.requestIdleCallback === undefined) {\n    // On Safari, requestIdleCallback is not available, so we use replacement functions for `idleCallbacks`\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API#falling_back_to_settimeout\n    window.requestIdleCallback = function (handler) {\n        let startTime = Date.now();\n        return setTimeout(function () {\n            handler({\n                didTimeout: false,\n                timeRemaining: function () {\n                    return Math.max(0, 50.0 - (Date.now() - startTime));\n                }\n            });\n        }, 1);\n    };\n    window.cancelIdleCallback = function (id) {\n        clearTimeout(id);\n    };\n}\n/**\n * A widget which renders static non-interactive notebooks.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class StaticNotebook extends Widget {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        var _a;\n        super();\n        this._editorConfig = StaticNotebook.defaultEditorConfig;\n        this._notebookConfig = StaticNotebook.defaultNotebookConfig;\n        this._mimetype = 'text/plain';\n        this._model = null;\n        this._modelChanged = new Signal(this);\n        this._modelContentChanged = new Signal(this);\n        this._fullyRendered = new Signal(this);\n        this._placeholderCellRendered = new Signal(this);\n        this._renderedCellsCount = 0;\n        this.addClass(NB_CLASS);\n        this.node.dataset[KERNEL_USER] = 'true';\n        this.node.dataset[UNDOER] = 'true';\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.rendermime = options.rendermime;\n        this.layout = new Private.NotebookPanelLayout();\n        this.contentFactory =\n            options.contentFactory || StaticNotebook.defaultContentFactory;\n        this.editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this.notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._mimetypeService = options.mimeTypeService;\n        this.renderingLayout = (_a = options.notebookConfig) === null || _a === void 0 ? void 0 : _a.renderingLayout;\n        // Section for the virtual-notebook behavior.\n        this._toRenderMap = new Map();\n        this._cellsArray = new Array();\n        if ('IntersectionObserver' in window) {\n            this._observer = new IntersectionObserver((entries, observer) => {\n                entries.forEach(o => {\n                    if (o.isIntersecting) {\n                        observer.unobserve(o.target);\n                        const ci = this._toRenderMap.get(o.target.id);\n                        if (ci) {\n                            const { cell, index } = ci;\n                            this._renderPlaceholderCell(cell, index);\n                        }\n                    }\n                });\n            }, {\n                root: this.node,\n                threshold: 1,\n                rootMargin: `${this.notebookConfig.observedTopMargin} 0px ${this.notebookConfig.observedBottomMargin} 0px`\n            });\n        }\n    }\n    /**\n     * A signal emitted when the notebook is fully rendered.\n     */\n    get fullyRendered() {\n        return this._fullyRendered;\n    }\n    /**\n     * A signal emitted when the a placeholder cell is rendered.\n     */\n    get placeholderCellRendered() {\n        return this._placeholderCellRendered;\n    }\n    /**\n     * A signal emitted when the model of the notebook changes.\n     */\n    get modelChanged() {\n        return this._modelChanged;\n    }\n    /**\n     * A signal emitted when the model content changes.\n     *\n     * #### Notes\n     * This is a convenience signal that follows the current model.\n     */\n    get modelContentChanged() {\n        return this._modelContentChanged;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(newValue) {\n        newValue = newValue || null;\n        if (this._model === newValue) {\n            return;\n        }\n        const oldValue = this._model;\n        this._model = newValue;\n        if (oldValue && oldValue.modelDB.isCollaborative) {\n            void oldValue.modelDB.connected.then(() => {\n                oldValue.modelDB.collaborators.changed.disconnect(this._onCollaboratorsChanged, this);\n            });\n        }\n        if (newValue && newValue.modelDB.isCollaborative) {\n            void newValue.modelDB.connected.then(() => {\n                newValue.modelDB.collaborators.changed.connect(this._onCollaboratorsChanged, this);\n            });\n        }\n        // Trigger private, protected, and public changes.\n        this._onModelChanged(oldValue, newValue);\n        this.onModelChanged(oldValue, newValue);\n        this._modelChanged.emit(void 0);\n    }\n    /**\n     * Get the mimetype for code cells.\n     */\n    get codeMimetype() {\n        return this._mimetype;\n    }\n    /**\n     * A read-only sequence of the widgets in the notebook.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n        this._updateEditorConfig();\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n        this._updateNotebookConfig();\n    }\n    get renderingLayout() {\n        return this._renderingLayout;\n    }\n    set renderingLayout(value) {\n        this._renderingLayout = value;\n        if (this._renderingLayout === 'side-by-side') {\n            this.node.classList.add(SIDE_BY_SIDE_CLASS);\n        }\n        else {\n            this.node.classList.remove(SIDE_BY_SIDE_CLASS);\n        }\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle a new model.\n     *\n     * #### Notes\n     * This method is called after the model change has been handled\n     * internally and before the `modelChanged` signal is emitted.\n     * The default implementation is a no-op.\n     */\n    onModelChanged(oldValue, newValue) {\n        // No-op.\n    }\n    /**\n     * Handle changes to the notebook model content.\n     *\n     * #### Notes\n     * The default implementation emits the `modelContentChanged` signal.\n     */\n    onModelContentChanged(model, args) {\n        this._modelContentChanged.emit(void 0);\n    }\n    /**\n     * Handle changes to the notebook model metadata.\n     *\n     * #### Notes\n     * The default implementation updates the mimetypes of the code cells\n     * when the `language_info` metadata changes.\n     */\n    onMetadataChanged(sender, args) {\n        switch (args.key) {\n            case 'language_info':\n                this._updateMimetype();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     *\n     * The default implementation is a no-op\n     */\n    onCellInserted(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being moved.\n     *\n     * The default implementation is a no-op\n     */\n    onCellMoved(fromIndex, toIndex) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being removed.\n     *\n     * The default implementation is a no-op\n     */\n    onCellRemoved(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a new model on the widget.\n     */\n    _onModelChanged(oldValue, newValue) {\n        const layout = this.layout;\n        if (oldValue) {\n            oldValue.cells.changed.disconnect(this._onCellsChanged, this);\n            oldValue.metadata.changed.disconnect(this.onMetadataChanged, this);\n            oldValue.contentChanged.disconnect(this.onModelContentChanged, this);\n            // TODO: reuse existing cell widgets if possible. Remember to initially\n            // clear the history of each cell if we do this.\n            while (layout.widgets.length) {\n                this._removeCell(0);\n            }\n        }\n        if (!newValue) {\n            this._mimetype = 'text/plain';\n            return;\n        }\n        this._updateMimetype();\n        const cells = newValue.cells;\n        if (!cells.length && newValue.isInitialized) {\n            cells.push(newValue.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n        }\n        each(cells, (cell, i) => {\n            this._insertCell(i, cell, 'set');\n        });\n        cells.changed.connect(this._onCellsChanged, this);\n        newValue.contentChanged.connect(this.onModelContentChanged, this);\n        newValue.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Handle a change cells event.\n     */\n    _onCellsChanged(sender, args) {\n        let index = 0;\n        switch (args.type) {\n            case 'add':\n                index = args.newIndex;\n                // eslint-disable-next-line no-case-declarations\n                const insertType = args.oldIndex == -1 ? 'push' : 'insert';\n                each(args.newValues, value => {\n                    this._insertCell(index++, value, insertType);\n                });\n                break;\n            case 'move':\n                this._moveCell(args.oldIndex, args.newIndex);\n                break;\n            case 'remove':\n                each(args.oldValues, value => {\n                    this._removeCell(args.oldIndex);\n                });\n                // Add default cell if there are no cells remaining.\n                if (!sender.length) {\n                    const model = this.model;\n                    // Add the cell in a new context to avoid triggering another\n                    // cell changed event during the handling of this signal.\n                    requestAnimationFrame(() => {\n                        if (model && !model.isDisposed && !model.cells.length) {\n                            model.cells.push(model.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n                        }\n                    });\n                }\n                break;\n            case 'set':\n                // TODO: reuse existing widgets if possible.\n                index = args.newIndex;\n                each(args.newValues, value => {\n                    // Note: this ordering (insert then remove)\n                    // is important for getting the active cell\n                    // index for the editable notebook correct.\n                    this._insertCell(index, value, 'set');\n                    this._removeCell(index + 1);\n                    index++;\n                });\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Create a cell widget and insert into the notebook.\n     */\n    _insertCell(index, cell, insertType) {\n        let widget;\n        switch (cell.type) {\n            case 'code':\n                widget = this._createCodeCell(cell);\n                widget.model.mimeType = this._mimetype;\n                break;\n            case 'markdown':\n                widget = this._createMarkdownCell(cell);\n                if (cell.value.text === '') {\n                    widget.rendered = false;\n                }\n                break;\n            default:\n                widget = this._createRawCell(cell);\n        }\n        widget.addClass(NB_CELL_CLASS);\n        const layout = this.layout;\n        this._cellsArray.push(widget);\n        if (this._observer &&\n            insertType === 'push' &&\n            this._renderedCellsCount >=\n                this.notebookConfig.numberCellsToRenderDirectly &&\n            cell.type !== 'markdown') {\n            // We have an observer and we are have been asked to push (not to insert).\n            // and we are above the number of cells to render directly, then\n            // we will add a placeholder and let the intersection observer or the\n            // idle browser render those placeholder cells.\n            this._toRenderMap.set(widget.model.id, { index: index, cell: widget });\n            const placeholder = this._createPlaceholderCell(cell, index);\n            placeholder.node.id = widget.model.id;\n            layout.insertWidget(index, placeholder);\n            this.onCellInserted(index, placeholder);\n            this._fullyRendered.emit(false);\n            this._observer.observe(placeholder.node);\n        }\n        else {\n            // We have no intersection observer, or we insert, or we are below\n            // the number of cells to render directly, so we render directly.\n            layout.insertWidget(index, widget);\n            this._incrementRenderedCount();\n            this.onCellInserted(index, widget);\n        }\n        if (this._observer && this.notebookConfig.renderCellOnIdle) {\n            const renderPlaceholderCells = this._renderPlaceholderCells.bind(this);\n            window.requestIdleCallback(renderPlaceholderCells, {\n                timeout: 1000\n            });\n        }\n    }\n    _renderPlaceholderCells(deadline) {\n        if (this._renderedCellsCount < this._cellsArray.length &&\n            this._renderedCellsCount >=\n                this.notebookConfig.numberCellsToRenderDirectly) {\n            const ci = this._toRenderMap.entries().next();\n            this._renderPlaceholderCell(ci.value[1].cell, ci.value[1].index);\n        }\n    }\n    _renderPlaceholderCell(cell, index) {\n        const pl = this.layout;\n        pl.removeWidgetAt(index);\n        pl.insertWidget(index, cell);\n        this._toRenderMap.delete(cell.model.id);\n        this._incrementRenderedCount();\n        this.onCellInserted(index, cell);\n        this._placeholderCellRendered.emit(cell);\n    }\n    /**\n     * Create a code cell widget from a code cell model.\n     */\n    _createCodeCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.code;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false,\n            maxNumberOutputs: this.notebookConfig.maxNumberOutputs\n        };\n        const cell = this.contentFactory.createCodeCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        cell.syncScrolled = true;\n        return cell;\n    }\n    /**\n     * Create a markdown cell widget from a markdown cell model.\n     */\n    _createMarkdownCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.markdown;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false,\n            showEditorForReadOnlyMarkdown: this._notebookConfig\n                .showEditorForReadOnlyMarkdown\n        };\n        const cell = this.contentFactory.createMarkdownCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        // Connect collapsed signal for each markdown cell widget\n        cell.toggleCollapsedSignal.connect((newCell, collapsed) => {\n            NotebookActions.setHeadingCollapse(newCell, collapsed, this);\n        });\n        return cell;\n    }\n    /**\n     * Create a placeholder cell widget from a raw cell model.\n     */\n    _createPlaceholderCell(model, index) {\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.raw;\n        const options = {\n            editorConfig,\n            model,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: true\n        };\n        const cell = this.contentFactory.createRawCell(options, this);\n        cell.node.innerHTML = `\n      <div class=\"jp-Cell-Placeholder\">\n        <div class=\"jp-Cell-Placeholder-wrapper\">\n        </div>\n      </div>`;\n        cell.inputHidden = true;\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Create a raw cell widget from a raw cell model.\n     */\n    _createRawCell(model) {\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.raw;\n        const options = {\n            editorConfig,\n            model,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false\n        };\n        const cell = this.contentFactory.createRawCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Move a cell widget.\n     */\n    _moveCell(fromIndex, toIndex) {\n        const layout = this.layout;\n        layout.insertWidget(toIndex, layout.widgets[fromIndex]);\n        this.onCellMoved(fromIndex, toIndex);\n    }\n    /**\n     * Remove a cell widget.\n     */\n    _removeCell(index) {\n        const layout = this.layout;\n        const widget = layout.widgets[index];\n        widget.parent = null;\n        this.onCellRemoved(index, widget);\n        widget.dispose();\n    }\n    /**\n     * Update the mimetype of the notebook.\n     */\n    _updateMimetype() {\n        var _a;\n        const info = (_a = this._model) === null || _a === void 0 ? void 0 : _a.metadata.get('language_info');\n        if (!info) {\n            return;\n        }\n        this._mimetype = this._mimetypeService.getMimeTypeByLanguage(info);\n        each(this.widgets, widget => {\n            if (widget.model.type === 'code') {\n                widget.model.mimeType = this._mimetype;\n            }\n        });\n    }\n    /**\n     * Handle an update to the collaborators.\n     */\n    _onCollaboratorsChanged() {\n        var _a, _b, _c;\n        // If there are selections corresponding to non-collaborators,\n        // they are stale and should be removed.\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            for (const key of cell.model.selections.keys()) {\n                if (false === ((_c = (_b = (_a = this._model) === null || _a === void 0 ? void 0 : _a.modelDB) === null || _b === void 0 ? void 0 : _b.collaborators) === null || _c === void 0 ? void 0 : _c.has(key))) {\n                    cell.model.selections.delete(key);\n                }\n            }\n        }\n    }\n    /**\n     * Update editor settings for notebook cells.\n     */\n    _updateEditorConfig() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            let config = {};\n            switch (cell.model.type) {\n                case 'code':\n                    config = this._editorConfig.code;\n                    break;\n                case 'markdown':\n                    config = this._editorConfig.markdown;\n                    break;\n                default:\n                    config = this._editorConfig.raw;\n                    break;\n            }\n            cell.editor.setOptions(Object.assign({}, config));\n            cell.editor.refresh();\n        }\n    }\n    /**\n     * Apply updated notebook settings.\n     */\n    _updateNotebookConfig() {\n        // Apply scrollPastEnd setting.\n        this.toggleClass('jp-mod-scrollPastEnd', this._notebookConfig.scrollPastEnd);\n        // Control editor visibility for read-only Markdown cells\n        const showEditorForReadOnlyMarkdown = this._notebookConfig\n            .showEditorForReadOnlyMarkdown;\n        // 'this._cellsArray' check is here as '_updateNotebookConfig()'\n        // can be called before 'this._cellsArray' is defined\n        if (showEditorForReadOnlyMarkdown !== undefined && this._cellsArray) {\n            for (const cell of this._cellsArray) {\n                if (cell.model.type === 'markdown') {\n                    cell.showEditorForReadOnly = showEditorForReadOnlyMarkdown;\n                }\n            }\n        }\n    }\n    _incrementRenderedCount() {\n        if (this._toRenderMap.size === 0) {\n            this._fullyRendered.emit(true);\n        }\n        this._renderedCellsCount++;\n    }\n}\n/**\n * The namespace for the `StaticNotebook` class statics.\n */\n(function (StaticNotebook) {\n    /**\n     * Default configuration options for cell editors.\n     */\n    StaticNotebook.defaultEditorConfig = {\n        code: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'off', matchBrackets: true, autoClosingBrackets: false }),\n        markdown: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false }),\n        raw: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false })\n    };\n    /**\n     * Default configuration options for notebooks.\n     */\n    StaticNotebook.defaultNotebookConfig = {\n        scrollPastEnd: true,\n        defaultCell: 'code',\n        recordTiming: false,\n        numberCellsToRenderDirectly: 20,\n        renderCellOnIdle: true,\n        observedTopMargin: '1000px',\n        observedBottomMargin: '1000px',\n        maxNumberOutputs: 50,\n        showEditorForReadOnlyMarkdown: true,\n        disableDocumentWideUndoRedo: false,\n        renderingLayout: 'default',\n        sideBySideLeftMarginOverride: '10px',\n        sideBySideRightMarginOverride: '10px'\n    };\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create a new code cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createCodeCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new CodeCell(options).initializeState();\n        }\n        /**\n         * Create a new markdown cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createMarkdownCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new MarkdownCell(options).initializeState();\n        }\n        /**\n         * Create a new raw cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createRawCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new RawCell(options).initializeState();\n        }\n    }\n    StaticNotebook.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the static notebook widget.\n     */\n    StaticNotebook.defaultContentFactory = new ContentFactory();\n})(StaticNotebook || (StaticNotebook = {}));\n/**\n * A notebook widget that supports interactivity.\n */\nexport class Notebook extends StaticNotebook {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        super(Private.processNotebookOptions(options));\n        this._activeCellIndex = -1;\n        this._activeCell = null;\n        this._mode = 'command';\n        this._drag = null;\n        this._fragment = '';\n        this._dragData = null;\n        this._mouseMode = null;\n        this._activeCellChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n        this._checkCacheOnNextResize = false;\n        this._lastClipboardInteraction = null;\n        this.node.tabIndex = 0; // Allow the widget to take focus.\n        // Allow the node to scroll while dragging items.\n        this.node.setAttribute('data-lm-dragscroll', 'true');\n    }\n    /**\n     * A signal emitted when the active cell changes.\n     *\n     * #### Notes\n     * This can be due to the active index changing or the\n     * cell at the active index changing.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the state of the notebook changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the selection state of the notebook changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * The interactivity mode of the notebook.\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(newValue) {\n        const activeCell = this.activeCell;\n        if (!activeCell) {\n            newValue = 'command';\n        }\n        if (newValue === this._mode) {\n            this._ensureFocus();\n            return;\n        }\n        // Post an update request.\n        this.update();\n        const oldValue = this._mode;\n        this._mode = newValue;\n        if (newValue === 'edit') {\n            // Edit mode deselects all cells.\n            each(this.widgets, widget => {\n                this.deselect(widget);\n            });\n            //  Edit mode unrenders an active markdown widget.\n            if (activeCell instanceof MarkdownCell) {\n                activeCell.rendered = false;\n            }\n            activeCell.inputHidden = false;\n        }\n        else {\n            // Focus on the notebook document, which blurs the active cell.\n            this.node.focus();\n        }\n        this._stateChanged.emit({ name: 'mode', oldValue, newValue });\n        this._ensureFocus();\n    }\n    /**\n     * The active cell index of the notebook.\n     *\n     * #### Notes\n     * The index will be clamped to the bounds of the notebook cells.\n     */\n    get activeCellIndex() {\n        if (!this.model) {\n            return -1;\n        }\n        return this.model.cells.length ? this._activeCellIndex : -1;\n    }\n    set activeCellIndex(newValue) {\n        const oldValue = this._activeCellIndex;\n        if (!this.model || !this.model.cells.length) {\n            newValue = -1;\n        }\n        else {\n            newValue = Math.max(newValue, 0);\n            newValue = Math.min(newValue, this.model.cells.length - 1);\n        }\n        this._activeCellIndex = newValue;\n        const cell = this.widgets[newValue];\n        if (cell !== this._activeCell) {\n            // Post an update request.\n            this.update();\n            this._activeCell = cell;\n            this._activeCellChanged.emit(cell);\n        }\n        if (this.mode === 'edit' && cell instanceof MarkdownCell) {\n            cell.rendered = false;\n        }\n        this._ensureFocus();\n        if (newValue === oldValue) {\n            return;\n        }\n        this._trimSelections();\n        this._stateChanged.emit({ name: 'activeCellIndex', oldValue, newValue });\n    }\n    /**\n     * Get the active cell widget.\n     *\n     * #### Notes\n     * This is a cell or `null` if there is no active cell.\n     */\n    get activeCell() {\n        return this._activeCell;\n    }\n    get lastClipboardInteraction() {\n        return this._lastClipboardInteraction;\n    }\n    set lastClipboardInteraction(newValue) {\n        this._lastClipboardInteraction = newValue;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Select a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    select(widget) {\n        if (Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, true);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Deselect a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    deselect(widget) {\n        if (!Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, false);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Whether a cell is selected.\n     */\n    isSelected(widget) {\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Whether a cell is selected or is the active cell.\n     */\n    isSelectedOrActive(widget) {\n        if (widget === this._activeCell) {\n            return true;\n        }\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Deselect all of the cells.\n     */\n    deselectAll() {\n        let changed = false;\n        each(this.widgets, widget => {\n            if (Private.selectedProperty.get(widget)) {\n                changed = true;\n            }\n            Private.selectedProperty.set(widget, false);\n        });\n        if (changed) {\n            this._selectionChanged.emit(void 0);\n        }\n        // Make sure we have a valid active cell.\n        this.activeCellIndex = this.activeCellIndex; // eslint-disable-line\n        this.update();\n    }\n    /**\n     * Move the head of an existing contiguous selection to extend the selection.\n     *\n     * @param index - The new head of the existing selection.\n     *\n     * #### Notes\n     * If there is no existing selection, the active cell is considered an\n     * existing one-cell selection.\n     *\n     * If the new selection is a single cell, that cell becomes the active cell\n     * and all cells are deselected.\n     *\n     * There is no change if there are no cells (i.e., activeCellIndex is -1).\n     */\n    extendContiguousSelectionTo(index) {\n        let { head, anchor } = this.getContiguousSelection();\n        let i;\n        // Handle the case of no current selection.\n        if (anchor === null || head === null) {\n            if (index === this.activeCellIndex) {\n                // Already collapsed selection, nothing more to do.\n                return;\n            }\n            // We will start a new selection below.\n            head = this.activeCellIndex;\n            anchor = this.activeCellIndex;\n        }\n        // Move the active cell. We do this before the collapsing shortcut below.\n        this.activeCellIndex = index;\n        // Make sure the index is valid, according to the rules for setting and clipping the\n        // active cell index. This may change the index.\n        index = this.activeCellIndex;\n        // Collapse the selection if it is only the active cell.\n        if (index === anchor) {\n            this.deselectAll();\n            return;\n        }\n        let selectionChanged = false;\n        if (head < index) {\n            if (head < anchor) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between head and index except anchor.\n            for (i = head + 1; i < index; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        else if (index < head) {\n            if (anchor < head) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between index and head except anchor.\n            for (i = index + 1; i < head; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        // Anchor and index should *always* be selected.\n        if (!Private.selectedProperty.get(this.widgets[anchor])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[anchor], true);\n        if (!Private.selectedProperty.get(this.widgets[index])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[index], true);\n        if (selectionChanged) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Get the head and anchor of a contiguous cell selection.\n     *\n     * The head of a contiguous selection is always the active cell.\n     *\n     * If there are no cells selected, `{head: null, anchor: null}` is returned.\n     *\n     * Throws an error if the currently selected cells do not form a contiguous\n     * selection.\n     */\n    getContiguousSelection() {\n        const cells = this.widgets;\n        const first = ArrayExt.findFirstIndex(cells, c => this.isSelected(c));\n        // Return early if no cells are selected.\n        if (first === -1) {\n            return { head: null, anchor: null };\n        }\n        const last = ArrayExt.findLastIndex(cells, c => this.isSelected(c), -1, first);\n        // Check that the selection is contiguous.\n        for (let i = first; i <= last; i++) {\n            if (!this.isSelected(cells[i])) {\n                throw new Error('Selection not contiguous');\n            }\n        }\n        // Check that the active cell is one of the endpoints of the selection.\n        const activeIndex = this.activeCellIndex;\n        if (first !== activeIndex && last !== activeIndex) {\n            throw new Error('Active cell not at endpoint of selection');\n        }\n        // Determine the head and anchor of the selection.\n        if (first === activeIndex) {\n            return { head: first, anchor: last };\n        }\n        else {\n            return { head: last, anchor: first };\n        }\n    }\n    /**\n     * Scroll so that the given position is centered.\n     *\n     * @param position - The vertical position in the notebook widget.\n     *\n     * @param threshold - An optional threshold for the scroll (0-50, defaults to\n     * 25).\n     *\n     * #### Notes\n     * If the position is within the threshold percentage of the widget height,\n     * measured from the center of the widget, the scroll position will not be\n     * changed. A threshold of 0 means we will always scroll so the position is\n     * centered, and a threshold of 50 means scrolling only happens if position is\n     * outside the current window.\n     */\n    scrollToPosition(position, threshold = 25) {\n        const node = this.node;\n        const ar = node.getBoundingClientRect();\n        const delta = position - ar.top - ar.height / 2;\n        if (Math.abs(delta) > (ar.height * threshold) / 100) {\n            node.scrollTop += delta;\n        }\n    }\n    /**\n     * Scroll so that the given cell is in view. Selects and activates cell.\n     *\n     * @param cell - A cell in the notebook widget.\n     *\n     */\n    scrollToCell(cell) {\n        // use Phosphor to scroll\n        ElementExt.scrollIntoViewIfNeeded(this.node, cell.node);\n        // change selection and active cell:\n        this.deselectAll();\n        this.select(cell);\n        cell.activate();\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        // Wait all cells are rendered then set fragment and update.\n        void Promise.all(this.widgets.map(widget => widget.ready)).then(() => {\n            this._fragment = fragment;\n            this.update();\n        });\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (!this.model) {\n            return;\n        }\n        switch (event.type) {\n            case 'contextmenu':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtContextMenuCapture(event);\n                }\n                break;\n            case 'mousedown':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtMouseDownCapture(event);\n                }\n                else {\n                    this._evtMouseDown(event);\n                }\n                break;\n            case 'mouseup':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMouseup(event);\n                }\n                break;\n            case 'mousemove':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMousemove(event);\n                }\n                break;\n            case 'keydown':\n                this._ensureFocus(true);\n                break;\n            case 'dblclick':\n                this._evtDblClick(event);\n                break;\n            case 'focusin':\n                this._evtFocusIn(event);\n                break;\n            case 'focusout':\n                this._evtFocusOut(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('contextmenu', this, true);\n        node.addEventListener('mousedown', this, true);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('dblclick', this);\n        node.addEventListener('focusin', this);\n        node.addEventListener('focusout', this);\n        // Capture drag events for the notebook widget\n        // in order to preempt the drag/drop handlers in the\n        // code editor widgets, which can take text data.\n        node.addEventListener('lm-dragenter', this, true);\n        node.addEventListener('lm-dragleave', this, true);\n        node.addEventListener('lm-dragover', this, true);\n        node.addEventListener('lm-drop', this, true);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('contextmenu', this, true);\n        node.removeEventListener('mousedown', this, true);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('dblclick', this);\n        node.removeEventListener('focusin', this);\n        node.removeEventListener('focusout', this);\n        node.removeEventListener('lm-dragenter', this, true);\n        node.removeEventListener('lm-dragleave', this, true);\n        node.removeEventListener('lm-dragover', this, true);\n        node.removeEventListener('lm-drop', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        this._checkCacheOnNextResize = true;\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (!this._checkCacheOnNextResize) {\n            return super.onResize(msg);\n        }\n        this._checkCacheOnNextResize = false;\n        const cache = this._cellLayoutStateCache;\n        const width = parseInt(this.node.style.width, 10);\n        if (cache) {\n            if (width === cache.width) {\n                // Cache identical, do nothing\n                return;\n            }\n        }\n        // Update cache\n        this._cellLayoutStateCache = { width };\n        // Fallback:\n        for (const w of this.widgets) {\n            if (w instanceof Cell) {\n                w.editorWidget.update();\n            }\n        }\n    }\n    /**\n     * A message handler invoked on an `'before-hide'` message.\n     */\n    onBeforeHide(msg) {\n        // Update cache\n        const width = parseInt(this.node.style.width, 10);\n        this._cellLayoutStateCache = { width };\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        const activeCell = this.activeCell;\n        // Set the appropriate classes on the cells.\n        if (this.mode === 'edit') {\n            this.addClass(EDIT_CLASS);\n            this.removeClass(COMMAND_CLASS);\n        }\n        else {\n            this.addClass(COMMAND_CLASS);\n            this.removeClass(EDIT_CLASS);\n        }\n        if (activeCell) {\n            activeCell.addClass(ACTIVE_CLASS);\n        }\n        let count = 0;\n        each(this.widgets, widget => {\n            if (widget !== activeCell) {\n                widget.removeClass(ACTIVE_CLASS);\n            }\n            widget.removeClass(OTHER_SELECTED_CLASS);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(SELECTED_CLASS);\n                count++;\n            }\n            else {\n                widget.removeClass(SELECTED_CLASS);\n            }\n        });\n        if (count > 1) {\n            activeCell === null || activeCell === void 0 ? void 0 : activeCell.addClass(OTHER_SELECTED_CLASS);\n        }\n        if (this._fragment) {\n            let el;\n            try {\n                el = this.node.querySelector(this._fragment.startsWith('#')\n                    ? `#${CSS.escape(this._fragment.slice(1))}`\n                    : this._fragment);\n            }\n            catch (error) {\n                console.warn('Unable to set URI fragment identifier', error);\n            }\n            if (el) {\n                el.scrollIntoView();\n            }\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     */\n    onCellInserted(index, cell) {\n        if (this.model && this.model.modelDB.isCollaborative) {\n            const modelDB = this.model.modelDB;\n            void modelDB.connected.then(() => {\n                if (!cell.isDisposed) {\n                    // Setup the selection style for collaborators.\n                    const localCollaborator = modelDB.collaborators.localCollaborator;\n                    cell.editor.uuid = localCollaborator.sessionId;\n                    cell.editor.selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), { color: localCollaborator.color });\n                }\n            });\n        }\n        cell.editor.edgeRequested.connect(this._onEdgeRequest, this);\n        // If the insertion happened above, increment the active cell\n        // index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex + 1\n                : this.activeCellIndex;\n    }\n    /**\n     * Handle a cell being moved.\n     */\n    onCellMoved(fromIndex, toIndex) {\n        const i = this.activeCellIndex;\n        if (fromIndex === i) {\n            this.activeCellIndex = toIndex;\n        }\n        else if (fromIndex < i && i <= toIndex) {\n            this.activeCellIndex--;\n        }\n        else if (toIndex <= i && i < fromIndex) {\n            this.activeCellIndex++;\n        }\n    }\n    /**\n     * Handle a cell being removed.\n     */\n    onCellRemoved(index, cell) {\n        // If the removal happened above, decrement the active\n        // cell index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex - 1\n                : this.activeCellIndex;\n        if (this.isSelected(cell)) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Handle a new model.\n     */\n    onModelChanged(oldValue, newValue) {\n        super.onModelChanged(oldValue, newValue);\n        // Try to set the active cell index to 0.\n        // It will be set to `-1` if there is no new model or the model is empty.\n        this.activeCellIndex = 0;\n    }\n    /**\n     * Handle edge request signals from cells.\n     */\n    _onEdgeRequest(editor, location) {\n        const prev = this.activeCellIndex;\n        if (location === 'top') {\n            this.activeCellIndex--;\n            // Move the cursor to the first position on the last line.\n            if (this.activeCellIndex < prev) {\n                const editor = this.activeCell.editor;\n                const lastLine = editor.lineCount - 1;\n                editor.setCursorPosition({ line: lastLine, column: 0 });\n            }\n        }\n        else if (location === 'bottom') {\n            this.activeCellIndex++;\n            // Move the cursor to the first character.\n            if (this.activeCellIndex > prev) {\n                const editor = this.activeCell.editor;\n                editor.setCursorPosition({ line: 0, column: 0 });\n            }\n        }\n        this.mode = 'edit';\n    }\n    /**\n     * Ensure that the notebook has proper focus.\n     */\n    _ensureFocus(force = false) {\n        const activeCell = this.activeCell;\n        if (this.mode === 'edit' && activeCell) {\n            if (!activeCell.editor.hasFocus()) {\n                activeCell.editor.focus();\n            }\n        }\n        if (force && !this.node.contains(document.activeElement)) {\n            this.node.focus();\n        }\n    }\n    /**\n     * Find the cell index containing the target html element.\n     *\n     * #### Notes\n     * Returns -1 if the cell is not found.\n     */\n    _findCell(node) {\n        // Trace up the DOM hierarchy to find the root cell node.\n        // Then find the corresponding child and select it.\n        let n = node;\n        while (n && n !== this.node) {\n            if (n.classList.contains(NB_CELL_CLASS)) {\n                const i = ArrayExt.findFirstIndex(this.widgets, widget => widget.node === n);\n                if (i !== -1) {\n                    return i;\n                }\n                break;\n            }\n            n = n.parentElement;\n        }\n        return -1;\n    }\n    /**\n     * Find the target of html mouse event and cell index containing this target.\n     *\n     * #### Notes\n     * Returned index is -1 if the cell is not found.\n     */\n    _findEventTargetAndCell(event) {\n        let target = event.target;\n        let index = this._findCell(target);\n        if (index === -1) {\n            // `event.target` sometimes gives an orphaned node in Firefox 57, which\n            // can have `null` anywhere in its parent line. If we fail to find a cell\n            // using `event.target`, try again using a target reconstructed from the\n            // position of the click event.\n            target = document.elementFromPoint(event.clientX, event.clientY);\n            index = this._findCell(target);\n        }\n        return [target, index];\n    }\n    /**\n     * Handle `contextmenu` event.\n     */\n    _evtContextMenuCapture(event) {\n        // Allow the event to propagate un-modified if the user\n        // is holding the shift-key (and probably requesting\n        // the native context menu).\n        if (event.shiftKey) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        if (widget && widget.editorWidget.node.contains(target)) {\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` event in the capture phase for the widget.\n     */\n    _evtMouseDownCapture(event) {\n        const { button, shiftKey } = event;\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        // On OS X, the context menu may be triggered with ctrl-left-click. In\n        // Firefox, ctrl-left-click gives an event with button 2, but in Chrome,\n        // ctrl-left-click gives an event with button 0 with the ctrl modifier.\n        if (button === 2 &&\n            !shiftKey &&\n            widget &&\n            widget.editorWidget.node.contains(target)) {\n            this.mode = 'command';\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        var _a;\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2)) {\n            return;\n        }\n        // Shift right-click gives the browser default behavior.\n        if (shiftKey && button === 2) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        let targetArea;\n        if (widget) {\n            if (widget.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (widget.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'notebook';\n        }\n        // Make sure we go to command mode if the click isn't in the cell editor If\n        // we do click in the cell editor, the editor handles the focus event to\n        // switch to edit mode.\n        if (targetArea !== 'input') {\n            this.mode = 'command';\n        }\n        if (targetArea === 'notebook') {\n            this.deselectAll();\n        }\n        else if (targetArea === 'prompt' || targetArea === 'cell') {\n            // We don't want to prevent the default selection behavior\n            // if there is currently text selected in an output.\n            const hasSelection = ((_a = window.getSelection()) !== null && _a !== void 0 ? _a : '').toString() !== '';\n            if (button === 0 && shiftKey && !hasSelection) {\n                // Prevent browser selecting text in prompt or output\n                event.preventDefault();\n                // Shift-click - extend selection\n                try {\n                    this.extendContiguousSelectionTo(index);\n                }\n                catch (e) {\n                    console.error(e);\n                    this.deselectAll();\n                    return;\n                }\n                // Enter selecting mode\n                this._mouseMode = 'select';\n                document.addEventListener('mouseup', this, true);\n                document.addEventListener('mousemove', this, true);\n            }\n            else if (button === 0 && !shiftKey) {\n                // Prepare to start a drag if we are on the drag region.\n                if (targetArea === 'prompt') {\n                    // Prepare for a drag start\n                    this._dragData = {\n                        pressX: event.clientX,\n                        pressY: event.clientY,\n                        index: index\n                    };\n                    // Enter possible drag mode\n                    this._mouseMode = 'couldDrag';\n                    document.addEventListener('mouseup', this, true);\n                    document.addEventListener('mousemove', this, true);\n                    event.preventDefault();\n                }\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n            }\n            else if (button === 2) {\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n                event.preventDefault();\n            }\n        }\n        else if (targetArea === 'input') {\n            if (button === 2 && !this.isSelectedOrActive(widget)) {\n                this.deselectAll();\n                this.activeCellIndex = index;\n            }\n        }\n        // If we didn't set focus above, make sure we get focus now.\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle the `'mouseup'` event on the document.\n     */\n    _evtDocumentMouseup(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Remove the event listeners we put on the document\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        if (this._mouseMode === 'couldDrag') {\n            // We didn't end up dragging if we are here, so treat it as a click event.\n            const [, index] = this._findEventTargetAndCell(event);\n            this.deselectAll();\n            this.activeCellIndex = index;\n        }\n        this._mouseMode = null;\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtDocumentMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // If in select mode, update the selection\n        switch (this._mouseMode) {\n            case 'select': {\n                const target = event.target;\n                const index = this._findCell(target);\n                if (index !== -1) {\n                    this.extendContiguousSelectionTo(index);\n                }\n                break;\n            }\n            case 'couldDrag': {\n                // Check for a drag initialization.\n                const data = this._dragData;\n                const dx = Math.abs(event.clientX - data.pressX);\n                const dy = Math.abs(event.clientY - data.pressY);\n                if (dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD) {\n                    this._mouseMode = null;\n                    this._startDrag(data.index, event.clientX, event.clientY);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Model presence should be checked before calling event handlers\n        const model = this.model;\n        const source = event.source;\n        if (source === this) {\n            // Handle the case where we are moving cells within\n            // the same notebook.\n            event.dropAction = 'move';\n            const toMove = event.mimeData.getData('internal:cells');\n            // For collapsed markdown headings with hidden \"child\" cells, move all\n            // child cells as well as the markdown heading.\n            const cell = toMove[toMove.length - 1];\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                const nextParent = NotebookActions.findNextParentHeading(cell, source);\n                if (nextParent > 0) {\n                    const index = findIndex(source.widgets, (possibleCell) => {\n                        return cell.model.id === possibleCell.model.id;\n                    });\n                    toMove.push(...source.widgets.slice(index + 1, nextParent));\n                }\n            }\n            // Compute the to/from indices for the move.\n            let fromIndex = ArrayExt.firstIndexOf(this.widgets, toMove[0]);\n            let toIndex = this._findCell(target);\n            // This check is needed for consistency with the view.\n            if (toIndex !== -1 && toIndex > fromIndex) {\n                toIndex -= 1;\n            }\n            else if (toIndex === -1) {\n                // If the drop is within the notebook but not on any cell,\n                // most often this means it is past the cell areas, so\n                // set it to move the cells to the end of the notebook.\n                toIndex = this.widgets.length - 1;\n            }\n            // Don't move if we are within the block of selected cells.\n            if (toIndex >= fromIndex && toIndex < fromIndex + toMove.length) {\n                return;\n            }\n            // Move the cells one by one\n            model.cells.beginCompoundOperation();\n            if (fromIndex < toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex, toIndex);\n                });\n            }\n            else if (fromIndex > toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex++, toIndex++);\n                });\n            }\n            model.cells.endCompoundOperation();\n        }\n        else {\n            // Handle the case where we are copying cells between\n            // notebooks.\n            event.dropAction = 'copy';\n            // Find the target cell and insert the copied cells.\n            let index = this._findCell(target);\n            if (index === -1) {\n                index = this.widgets.length;\n            }\n            const start = index;\n            const values = event.mimeData.getData(JUPYTER_CELL_MIME);\n            const factory = model.contentFactory;\n            // Insert the copies of the original cells.\n            model.cells.beginCompoundOperation();\n            each(values, (cell) => {\n                let value;\n                switch (cell.cell_type) {\n                    case 'code':\n                        value = factory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        value = factory.createMarkdownCell({ cell });\n                        break;\n                    default:\n                        value = factory.createRawCell({ cell });\n                        break;\n                }\n                model.cells.insert(index++, value);\n            });\n            model.cells.endCompoundOperation();\n            // Select the inserted cells.\n            this.deselectAll();\n            this.activeCellIndex = start;\n            this.extendContiguousSelectionTo(index - 1);\n        }\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        var _a;\n        const cells = this.model.cells;\n        const selected = [];\n        const toMove = [];\n        each(this.widgets, (widget, i) => {\n            const cell = cells.get(i);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(DROP_SOURCE_CLASS);\n                selected.push(cell.toJSON());\n                toMove.push(widget);\n            }\n        });\n        const activeCell = this.activeCell;\n        let dragImage = null;\n        let countString;\n        if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.type) === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            countString = ' ';\n            if (executionCount) {\n                countString = executionCount.toString();\n            }\n        }\n        else {\n            countString = '';\n        }\n        // Create the drag image.\n        dragImage = Private.createDragImage(selected.length, countString, (_a = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.value.text.split('\\n')[0].slice(0, 26)) !== null && _a !== void 0 ? _a : '');\n        // Set up the drag event.\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            supportedActions: 'copy-move',\n            proposedAction: 'copy',\n            source: this\n        });\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n        // Add mimeData for the fully reified cell widgets, for the\n        // case where the target is in the same notebook and we\n        // can just move the cells.\n        this._drag.mimeData.setData('internal:cells', toMove);\n        // Add mimeData for the text content of the selected cells,\n        // allowing for drag/drop into plain text fields.\n        const textContent = toMove.map(cell => cell.model.value.text).join('\\n');\n        this._drag.mimeData.setData('text/plain', textContent);\n        // Remove mousemove and mouseup listeners and start the drag.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        this._mouseMode = null;\n        void this._drag.start(clientX, clientY).then(action => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            each(toMove, widget => {\n                widget.removeClass(DROP_SOURCE_CLASS);\n            });\n        });\n    }\n    /**\n     * Handle `focus` events for the widget.\n     */\n    _evtFocusIn(event) {\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            // If the editor itself does not have focus, ensure command mode.\n            if (!widget.editorWidget.node.contains(target)) {\n                this.mode = 'command';\n            }\n            this.activeCellIndex = index;\n            // If the editor has focus, ensure edit mode.\n            const node = widget.editorWidget.node;\n            if (node.contains(target)) {\n                this.mode = 'edit';\n            }\n            this.activeCellIndex = index;\n        }\n        else {\n            // No cell has focus, ensure command mode.\n            this.mode = 'command';\n        }\n    }\n    /**\n     * Handle `focusout` events for the notebook.\n     */\n    _evtFocusOut(event) {\n        const relatedTarget = event.relatedTarget;\n        // Bail if the window is losing focus, to preserve edit mode. This test\n        // assumes that we explicitly focus things rather than calling blur()\n        if (!relatedTarget) {\n            return;\n        }\n        // Bail if the item gaining focus is another cell,\n        // and we should not be entering command mode.\n        const index = this._findCell(relatedTarget);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            if (widget.editorWidget.node.contains(relatedTarget)) {\n                return;\n            }\n        }\n        // Otherwise enter command mode if not already.\n        if (this.mode !== 'command') {\n            this.mode = 'command';\n            // Switching to command mode currently focuses the notebook element, so\n            // refocus the relatedTarget so the focus actually switches as intended.\n            if (relatedTarget) {\n                relatedTarget.focus();\n            }\n        }\n    }\n    /**\n     * Handle `dblclick` events for the widget.\n     */\n    _evtDblClick(event) {\n        const model = this.model;\n        if (!model) {\n            return;\n        }\n        this.deselectAll();\n        const [target, index] = this._findEventTargetAndCell(event);\n        if (event.target.classList.contains(HEADING_COLLAPSER_CLASS)) {\n            return;\n        }\n        if (index === -1) {\n            return;\n        }\n        this.activeCellIndex = index;\n        if (model.cells.get(index).type === 'markdown') {\n            const widget = this.widgets[index];\n            widget.rendered = false;\n        }\n        else if (target.localName === 'img') {\n            target.classList.toggle(UNCONFINED_CLASS);\n        }\n    }\n    /**\n     * Remove selections from inactive cells to avoid\n     * spurious cursors.\n     */\n    _trimSelections() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            if (i !== this._activeCellIndex) {\n                const cell = this.widgets[i];\n                cell.model.selections.delete(cell.editor.uuid);\n            }\n        }\n    }\n}\n/**\n * The namespace for the `Notebook` class statics.\n */\n(function (Notebook) {\n    /**\n     * The default implementation of a notebook content factory..\n     *\n     * #### Notes\n     * Override methods on this class to customize the default notebook factory\n     * methods that create notebook content.\n     */\n    class ContentFactory extends StaticNotebook.ContentFactory {\n    }\n    Notebook.ContentFactory = ContentFactory;\n    Notebook.defaultContentFactory = new ContentFactory();\n})(Notebook || (Notebook = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for the selected state of a cell.\n     */\n    Private.selectedProperty = new AttachedProperty({\n        name: 'selected',\n        create: () => false\n    });\n    /**\n     * A custom panel layout for the notebook.\n     */\n    class NotebookPanelLayout extends PanelLayout {\n        /**\n         * A message handler invoked on an `'update-request'` message.\n         *\n         * #### Notes\n         * This is a reimplementation of the base class method,\n         * and is a no-op.\n         */\n        onUpdateRequest(msg) {\n            // This is a no-op.\n        }\n    }\n    Private.NotebookPanelLayout = NotebookPanelLayout;\n    /**\n     * Create a cell drag image.\n     */\n    function createDragImage(count, promptNumber, cellContent) {\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    Private.createDragImage = createDragImage;\n    /**\n     * Process the `IOptions` passed to the notebook widget.\n     *\n     * #### Notes\n     * This defaults the content factory to that in the `Notebook` namespace.\n     */\n    function processNotebookOptions(options) {\n        if (options.contentFactory) {\n            return options;\n        }\n        else {\n            return {\n                rendermime: options.rendermime,\n                languagePreference: options.languagePreference,\n                contentFactory: Notebook.defaultContentFactory,\n                mimeTypeService: options.mimeTypeService\n            };\n        }\n    }\n    Private.processNotebookOptions = processNotebookOptions;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, Printing, showDialog } from '@jupyterlab/apputils';\nimport { isMarkdownCellModel } from '@jupyterlab/cells';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { each } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Notebook } from './widget';\n/**\n * The class name added to notebook panels.\n */\nconst NOTEBOOK_PANEL_CLASS = 'jp-NotebookPanel';\nconst NOTEBOOK_PANEL_TOOLBAR_CLASS = 'jp-NotebookPanel-toolbar';\nconst NOTEBOOK_PANEL_NOTEBOOK_CLASS = 'jp-NotebookPanel-notebook';\n/**\n * The class name to add when the document is loaded for the search box.\n */\nconst SEARCH_DOCUMENT_LOADED_CLASS = 'jp-DocumentSearch-document-loaded';\n/**\n * A widget that hosts a notebook toolbar and content area.\n *\n * #### Notes\n * The widget keeps the document metadata in sync with the current\n * kernel on the context.\n */\nexport class NotebookPanel extends DocumentWidget {\n    /**\n     * Construct a new notebook panel.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * Whether we are currently in a series of autorestarts we have already\n         * notified the user about.\n         */\n        this._autorestarting = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // Set up CSS classes\n        this.addClass(NOTEBOOK_PANEL_CLASS);\n        this.toolbar.addClass(NOTEBOOK_PANEL_TOOLBAR_CLASS);\n        this.content.addClass(NOTEBOOK_PANEL_NOTEBOOK_CLASS);\n        // Set up things related to the context\n        this.content.model = this.context.model;\n        this.context.sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n        this.context.sessionContext.statusChanged.connect(this._onSessionStatusChanged, this);\n        this.content.fullyRendered.connect(this._onFullyRendered, this);\n        this.context.saveState.connect(this._onSave, this);\n        void this.revealed.then(() => {\n            if (this.isDisposed) {\n                // this widget has already been disposed, bail\n                return;\n            }\n            // Set the document edit mode on initial open if it looks like a new document.\n            if (this.content.widgets.length === 1) {\n                const cellModel = this.content.widgets[0].model;\n                if (cellModel.type === 'code' && cellModel.value.text === '') {\n                    this.content.mode = 'edit';\n                }\n            }\n        });\n    }\n    _onSave(sender, state) {\n        if (state === 'started' && this.model) {\n            // Find markdown cells\n            const { cells } = this.model;\n            each(cells, cell => {\n                if (isMarkdownCellModel(cell)) {\n                    for (const key of cell.attachments.keys) {\n                        if (!cell.value.text.includes(key)) {\n                            cell.attachments.remove(key);\n                        }\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * The session context used by the panel.\n     */\n    get sessionContext() {\n        return this.context.sessionContext;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this.content.model;\n    }\n    /**\n     * Update the options for the current notebook panel.\n     *\n     * @param config new options to set\n     */\n    setConfig(config) {\n        this.content.editorConfig = config.editorConfig;\n        this.content.notebookConfig = config.notebookConfig;\n        // Update kernel shutdown behavior\n        const kernelPreference = this.context.sessionContext.kernelPreference;\n        this.context.sessionContext.kernelPreference = Object.assign(Object.assign({}, kernelPreference), { shutdownOnDispose: config.kernelShutdown });\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        void this.context.ready.then(() => {\n            this.content.setFragment(fragment);\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n    }\n    /**\n     * Prints the notebook by converting to HTML with nbconvert.\n     */\n    [Printing.symbol]() {\n        return async () => {\n            // Save before generating HTML\n            if (this.context.model.dirty && !this.context.model.readOnly) {\n                await this.context.save();\n            }\n            await Printing.printURL(PageConfig.getNBConvertURL({\n                format: 'html',\n                download: false,\n                path: this.context.path\n            }));\n        };\n    }\n    /**\n     * Handle a fully rendered signal notebook.\n     */\n    _onFullyRendered(notebook, fullyRendered) {\n        fullyRendered\n            ? this.removeClass(SEARCH_DOCUMENT_LOADED_CLASS)\n            : this.addClass(SEARCH_DOCUMENT_LOADED_CLASS);\n    }\n    /**\n     * Handle a change in the kernel by updating the document metadata.\n     */\n    _onKernelChanged(sender, args) {\n        if (!this.model || !args.newValue) {\n            return;\n        }\n        const { newValue } = args;\n        void newValue.info.then(info => {\n            var _a;\n            if (this.model &&\n                ((_a = this.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === newValue) {\n                this._updateLanguage(info.language_info);\n            }\n        });\n        void this._updateSpec(newValue);\n    }\n    _onSessionStatusChanged(sender, status) {\n        var _a;\n        // If the status is autorestarting, and we aren't already in a series of\n        // autorestarts, show the dialog.\n        if (status === 'autorestarting' && !this._autorestarting) {\n            // The kernel died and the server is restarting it. We notify the user so\n            // they know why their kernel state is gone.\n            void showDialog({\n                title: this._trans.__('Kernel Restarting'),\n                body: this._trans.__('The kernel for %1 appears to have died. It will restart automatically.', (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n            this._autorestarting = true;\n        }\n        else if (status === 'restarting') {\n            // Another autorestart attempt will first change the status to\n            // restarting, then to autorestarting again, so we don't reset the\n            // autorestarting status if the status is 'restarting'.\n            /* no-op */\n        }\n        else {\n            this._autorestarting = false;\n        }\n    }\n    /**\n     * Update the kernel language.\n     */\n    _updateLanguage(language) {\n        this.model.metadata.set('language_info', language);\n    }\n    /**\n     * Update the kernel spec.\n     */\n    async _updateSpec(kernel) {\n        const spec = await kernel.spec;\n        if (this.isDisposed) {\n            return;\n        }\n        this.model.metadata.set('kernelspec', {\n            name: kernel.name,\n            display_name: spec === null || spec === void 0 ? void 0 : spec.display_name,\n            language: spec === null || spec === void 0 ? void 0 : spec.language\n        });\n    }\n}\n/**\n * A namespace for `NotebookPanel` statics.\n */\n(function (NotebookPanel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Notebook.ContentFactory {\n        /**\n         * Create a new content area for the panel.\n         */\n        createNotebook(options) {\n            return new Notebook(options);\n        }\n    }\n    NotebookPanel.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the notebook panel.\n     */\n    NotebookPanel.defaultContentFactory = new ContentFactory();\n    /* tslint:disable */\n    /**\n     * The notebook renderer token.\n     */\n    NotebookPanel.IContentFactory = new Token('@jupyterlab/notebook:IContentFactory');\n    /* tslint:enable */\n})(NotebookPanel || (NotebookPanel = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The notebook widget factory token.\n */\nexport const INotebookWidgetFactory = new Token('@jupyterlab/notebook:INotebookWidgetFactory');\n/* tslint:enable */\n/* tslint:disable */\n/**\n * The notebook tools token.\n */\nexport const INotebookTools = new Token('@jupyterlab/notebook:INotebookTools');\n/* tslint:disable */\n/**\n * The notebook tracker token.\n */\nexport const INotebookTracker = new Token('@jupyterlab/notebook:INotebookTracker');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nexport class NotebookTracker extends WidgetTracker {\n    constructor() {\n        super(...arguments);\n        this._activeCell = null;\n        this._activeCellChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n    }\n    /**\n     * The currently focused cell.\n     *\n     * #### Notes\n     * This is a read-only property. If there is no cell with the focus, then this\n     * value is `null`.\n     */\n    get activeCell() {\n        const widget = this.currentWidget;\n        if (!widget) {\n            return null;\n        }\n        return widget.content.activeCell || null;\n    }\n    /**\n     * A signal emitted when the current active cell changes.\n     *\n     * #### Notes\n     * If there is no cell with the focus, then `null` will be emitted.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the selection state changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * Add a new notebook panel to the tracker.\n     *\n     * @param panel - The notebook panel being added.\n     */\n    add(panel) {\n        const promise = super.add(panel);\n        panel.content.activeCellChanged.connect(this._onActiveCellChanged, this);\n        panel.content.selectionChanged.connect(this._onSelectionChanged, this);\n        return promise;\n    }\n    /**\n     * Dispose of the resources held by the tracker.\n     */\n    dispose() {\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Handle the current change event.\n     */\n    onCurrentChanged(widget) {\n        // Store an internal reference to active cell to prevent false positives.\n        const activeCell = this.activeCell;\n        if (activeCell && activeCell === this._activeCell) {\n            return;\n        }\n        this._activeCell = activeCell;\n        if (!widget) {\n            return;\n        }\n        // Since the notebook has changed, immediately signal an active cell change\n        this._activeCellChanged.emit(widget.content.activeCell || null);\n    }\n    _onActiveCellChanged(sender, cell) {\n        // Check if the active cell change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._activeCell = cell || null;\n            this._activeCellChanged.emit(this._activeCell);\n        }\n    }\n    _onSelectionChanged(sender) {\n        // Check if the selection change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n}\n//# sourceMappingURL=tracker.js.map","import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { notTrustedIcon, trustedIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Determine the notebook trust status message.\n */\nfunction cellTrust(props, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    if (props.trustedCells === props.totalCells) {\n        return [\n            trans.__('Notebook trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else if (props.activeCellTrusted) {\n        return [\n            trans.__('Active cell trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else {\n        return [\n            trans.__('Notebook not trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-untrusted'\n        ];\n    }\n}\n/**\n * A pure function for a notebook trust status component.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for notebook trust.\n */\nfunction NotebookTrustComponent(props) {\n    if (props.allCellsTrusted) {\n        return React.createElement(trustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n    else {\n        return React.createElement(notTrustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n}\n/**\n * The NotebookTrust status item.\n */\nexport class NotebookTrustStatus extends VDomRenderer {\n    /**\n     * Construct a new status item.\n     */\n    constructor(translator) {\n        super(new NotebookTrustStatus.Model());\n        this.translator = translator || nullTranslator;\n    }\n    /**\n     * Render the NotebookTrust status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = cellTrust(this.model, this.translator)[0];\n        return (React.createElement(\"div\", null,\n            React.createElement(NotebookTrustComponent, { allCellsTrusted: this.model.trustedCells === this.model.totalCells, activeCellTrusted: this.model.activeCellTrusted, totalCells: this.model.totalCells, trustedCells: this.model.trustedCells })));\n    }\n}\n/**\n * A namespace for NotebookTrust statics.\n */\n(function (NotebookTrustStatus) {\n    /**\n     * A VDomModel for the NotebookTrust status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._trustedCells = 0;\n            this._totalCells = 0;\n            this._activeCellTrusted = false;\n            this._notebook = null;\n        }\n        /**\n         * The number of trusted cells in the current notebook.\n         */\n        get trustedCells() {\n            return this._trustedCells;\n        }\n        /**\n         * The total number of cells in the current notebook.\n         */\n        get totalCells() {\n            return this._totalCells;\n        }\n        /**\n         * Whether the active cell is trusted.\n         */\n        get activeCellTrusted() {\n            return this._activeCellTrusted;\n        }\n        /**\n         * The current notebook for the model.\n         */\n        get notebook() {\n            return this._notebook;\n        }\n        set notebook(model) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.activeCellChanged.disconnect(this._onActiveCellChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onModelChanged, this);\n            }\n            const oldState = this._getAllState();\n            this._notebook = model;\n            if (this._notebook === null) {\n                this._trustedCells = 0;\n                this._totalCells = 0;\n                this._activeCellTrusted = false;\n            }\n            else {\n                // Add listeners\n                this._notebook.activeCellChanged.connect(this._onActiveCellChanged, this);\n                this._notebook.modelContentChanged.connect(this._onModelChanged, this);\n                // Derive values\n                if (this._notebook.activeCell !== undefined) {\n                    this._activeCellTrusted = this._notebook.activeCell.model.trusted;\n                }\n                else {\n                    this._activeCellTrusted = false;\n                }\n                const { total, trusted } = this._deriveCellTrustState(this._notebook.model);\n                this._totalCells = total;\n                this._trustedCells = trusted;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the notebook model changes, update the trust state.\n         */\n        _onModelChanged(notebook) {\n            const oldState = this._getAllState();\n            const { total, trusted } = this._deriveCellTrustState(notebook.model);\n            this._totalCells = total;\n            this._trustedCells = trusted;\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the active cell changes, update the trust state.\n         */\n        _onActiveCellChanged(model, cell) {\n            const oldState = this._getAllState();\n            if (cell) {\n                this._activeCellTrusted = cell.model.trusted;\n            }\n            else {\n                this._activeCellTrusted = false;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * Given a notebook model, figure out how many of the cells are trusted.\n         */\n        _deriveCellTrustState(model) {\n            if (model === null) {\n                return { total: 0, trusted: 0 };\n            }\n            const cells = toArray(model.cells);\n            const trusted = cells.reduce((accum, current) => {\n                if (current.trusted) {\n                    return accum + 1;\n                }\n                else {\n                    return accum;\n                }\n            }, 0);\n            const total = cells.length;\n            return {\n                total,\n                trusted\n            };\n        }\n        /**\n         * Get the current state of the model.\n         */\n        _getAllState() {\n            return [this._trustedCells, this._totalCells, this.activeCellTrusted];\n        }\n        /**\n         * Trigger a change in the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] ||\n                oldState[1] !== newState[1] ||\n                oldState[2] !== newState[2]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    NotebookTrustStatus.Model = Model;\n})(NotebookTrustStatus || (NotebookTrustStatus = {}));\n//# sourceMappingURL=truststatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\nimport { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { ToolbarItems } from './default-toolbar';\nimport { NotebookPanel } from './panel';\nimport { StaticNotebook } from './widget';\n/**\n * A widget factory for notebook panels.\n */\nexport class NotebookWidgetFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new notebook widget factory.\n     *\n     * @param options - The options used to construct the factory.\n     */\n    constructor(options) {\n        super(options);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || NotebookPanel.defaultContentFactory;\n        this.mimeTypeService = options.mimeTypeService;\n        this._editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this._notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._sessionDialogs = options.sessionDialogs || sessionContextDialogs;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n    }\n    /**\n     * Create a new widget.\n     *\n     * #### Notes\n     * The factory will start the appropriate kernel.\n     */\n    createNewWidget(context, source) {\n        const nbOptions = {\n            rendermime: source\n                ? source.content.rendermime\n                : this.rendermime.clone({ resolver: context.urlResolver }),\n            contentFactory: this.contentFactory,\n            mimeTypeService: this.mimeTypeService,\n            editorConfig: source ? source.content.editorConfig : this._editorConfig,\n            notebookConfig: source\n                ? source.content.notebookConfig\n                : this._notebookConfig\n        };\n        const content = this.contentFactory.createNotebook(nbOptions);\n        return new NotebookPanel({ context, content });\n    }\n    /**\n     * Default factory for toolbar items to be added after the widget is created.\n     */\n    defaultToolbarFactory(widget) {\n        return ToolbarItems.getDefaultItems(widget, this._sessionDialogs, this.translator);\n    }\n}\n//# sourceMappingURL=widgetfactory.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { translateKernelStatuses, VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport React from 'react';\nimport { interactiveItem, ProgressCircle } from '@jupyterlab/statusbar';\nimport { circleIcon, offlineBoltIcon } from '@jupyterlab/ui-components';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * A react functional component for rendering execution indicator.\n */\nexport function ExecutionIndicatorComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const kernelStatuses = translateKernelStatuses(translator);\n    const trans = translator.load('jupyterlab');\n    const state = props.state;\n    const showOnToolBar = props.displayOption.showOnToolBar;\n    const showProgress = props.displayOption.showProgress;\n    const tooltipClass = showOnToolBar ? 'down' : 'up';\n    const emptyDiv = React.createElement(\"div\", null);\n    if (!state) {\n        return emptyDiv;\n    }\n    const kernelStatus = state.kernelStatus;\n    const circleIconProps = {\n        alignSelf: 'normal',\n        height: '24px'\n    };\n    const time = state.totalTime;\n    const scheduledCellNumber = state.scheduledCellNumber || 0;\n    const remainingCellNumber = state.scheduledCell.size || 0;\n    const executedCellNumber = scheduledCellNumber - remainingCellNumber;\n    let percentage = (100 * executedCellNumber) / scheduledCellNumber;\n    let displayClass = showProgress ? '' : 'hidden';\n    if (!showProgress && percentage < 100) {\n        percentage = 0;\n    }\n    const progressBar = (percentage) => (React.createElement(ProgressCircle, { progress: percentage, width: 16, height: 24 }));\n    const titleFactory = (translatedStatus) => trans.__('Kernel status: %1', translatedStatus);\n    const reactElement = (status, circle, popup) => (React.createElement(\"div\", { className: 'jp-Notebook-ExecutionIndicator', title: showProgress ? '' : titleFactory(kernelStatuses[status]) },\n        circle,\n        React.createElement(\"div\", { className: `jp-Notebook-ExecutionIndicator-tooltip ${tooltipClass} ${displayClass}` },\n            React.createElement(\"span\", null,\n                \" \",\n                titleFactory(kernelStatuses[status]),\n                \" \"),\n            popup)));\n    if (state.kernelStatus === 'connecting' ||\n        state.kernelStatus === 'disconnected' ||\n        state.kernelStatus === 'unknown') {\n        return reactElement(kernelStatus, React.createElement(offlineBoltIcon.react, Object.assign({}, circleIconProps)), []);\n    }\n    if (state.kernelStatus === 'starting' ||\n        state.kernelStatus === 'terminating' ||\n        state.kernelStatus === 'restarting' ||\n        state.kernelStatus === 'initializing') {\n        return reactElement(kernelStatus, React.createElement(circleIcon.react, Object.assign({}, circleIconProps)), []);\n    }\n    if (state.executionStatus === 'busy') {\n        return reactElement('busy', progressBar(percentage), [\n            React.createElement(\"span\", { key: 0 }, trans.__(`Executed ${executedCellNumber}/${scheduledCellNumber} requests`)),\n            React.createElement(\"span\", { key: 1 }, trans._n('Elapsed time: %1 second', 'Elapsed time: %1 seconds', time))\n        ]);\n    }\n    else {\n        if (time === 0) {\n            return reactElement('idle', progressBar(100), []);\n        }\n        else {\n            return reactElement('idle', progressBar(100), [\n                React.createElement(\"span\", { key: 0 }, trans._n('Executed %1 request', 'Executed %1 requests', scheduledCellNumber)),\n                React.createElement(\"span\", { key: 1 }, trans._n('Elapsed time: %1 second', 'Elapsed time: %1 seconds', time))\n            ]);\n        }\n    }\n}\n/**\n * A VDomRenderer widget for displaying the execution status.\n */\nexport class ExecutionIndicator extends VDomRenderer {\n    /**\n     * Construct the kernel status widget.\n     */\n    constructor(translator, showProgress = true) {\n        super(new ExecutionIndicator.Model());\n        this.translator = translator || nullTranslator;\n        this.addClass(interactiveItem);\n    }\n    /**\n     * Render the execution status item.\n     */\n    render() {\n        if (this.model === null || !this.model.renderFlag) {\n            return React.createElement(\"div\", null);\n        }\n        else {\n            const nb = this.model.currentNotebook;\n            if (!nb) {\n                return (React.createElement(ExecutionIndicatorComponent, { displayOption: this.model.displayOption, state: undefined, translator: this.translator }));\n            }\n            return (React.createElement(ExecutionIndicatorComponent, { displayOption: this.model.displayOption, state: this.model.executionState(nb), translator: this.translator }));\n        }\n    }\n}\n/**\n * A namespace for ExecutionIndicator statics.\n */\n(function (ExecutionIndicator) {\n    /**\n     * A VDomModel for the execution status indicator.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super();\n            /**\n             * A weak map to hold execution status of multiple notebooks.\n             */\n            this._notebookExecutionProgress = new WeakMap();\n            this._displayOption = { showOnToolBar: true, showProgress: true };\n            this._renderFlag = true;\n        }\n        /**\n         * Attach a notebook with session context to model in order to keep\n         * track of multiple notebooks. If a session context is already\n         * attached, only set current activated notebook to input.\n         *\n         * @param data - The  notebook and session context to be attached to model\n         */\n        attachNotebook(data) {\n            var _a, _b, _c, _d;\n            if (data && data.content && data.context) {\n                const nb = data.content;\n                const context = data.context;\n                this._currentNotebook = nb;\n                if (!this._notebookExecutionProgress.has(nb)) {\n                    this._notebookExecutionProgress.set(nb, {\n                        executionStatus: 'idle',\n                        kernelStatus: 'idle',\n                        totalTime: 0,\n                        interval: 0,\n                        timeout: 0,\n                        scheduledCell: new Set(),\n                        scheduledCellNumber: 0,\n                        needReset: true\n                    });\n                    const state = this._notebookExecutionProgress.get(nb);\n                    const contextStatusChanged = (ctx) => {\n                        if (state) {\n                            state.kernelStatus = ctx.kernelDisplayStatus;\n                        }\n                        this.stateChanged.emit(void 0);\n                    };\n                    context.statusChanged.connect(contextStatusChanged, this);\n                    const contextConnectionStatusChanged = (ctx) => {\n                        if (state) {\n                            state.kernelStatus = ctx.kernelDisplayStatus;\n                        }\n                        this.stateChanged.emit(void 0);\n                    };\n                    context.connectionStatusChanged.connect(contextConnectionStatusChanged, this);\n                    context.disposed.connect(ctx => {\n                        ctx.connectionStatusChanged.disconnect(contextConnectionStatusChanged, this);\n                        ctx.statusChanged.disconnect(contextStatusChanged, this);\n                    });\n                    const handleKernelMsg = (sender, msg) => {\n                        const message = msg.msg;\n                        const msgId = message.header.msg_id;\n                        if (KernelMessage.isCommMsgMsg(message) &&\n                            message.content.data['method']) {\n                            // Execution request from Comm message\n                            const method = message.content.data['method'];\n                            if (method !== 'request_state' && method !== 'update') {\n                                this._cellScheduledCallback(nb, msgId);\n                                this._startTimer(nb);\n                            }\n                        }\n                        else if (message.header.msg_type === 'execute_request') {\n                            // A cell code is scheduled for executing\n                            this._cellScheduledCallback(nb, msgId);\n                        }\n                        else if (KernelMessage.isStatusMsg(message) &&\n                            message.content.execution_state === 'idle') {\n                            // Idle status message case.\n                            const parentId = message.parent_header\n                                .msg_id;\n                            this._cellExecutedCallback(nb, parentId);\n                        }\n                        else if (message.header.msg_type === 'execute_input') {\n                            // A cell code starts executing.\n                            this._startTimer(nb);\n                        }\n                    };\n                    (_b = (_a = context.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.anyMessage.connect(handleKernelMsg);\n                    (_d = (_c = context.session) === null || _c === void 0 ? void 0 : _c.kernel) === null || _d === void 0 ? void 0 : _d.disposed.connect(kernel => kernel.anyMessage.disconnect(handleKernelMsg));\n                    const kernelChangedSlot = (_, kernelData) => {\n                        if (state) {\n                            this._resetTime(state);\n                            this.stateChanged.emit(void 0);\n                            if (kernelData.newValue) {\n                                kernelData.newValue.anyMessage.connect(handleKernelMsg);\n                            }\n                        }\n                    };\n                    context.kernelChanged.connect(kernelChangedSlot);\n                    context.disposed.connect(ctx => ctx.kernelChanged.disconnect(kernelChangedSlot));\n                }\n            }\n        }\n        /**\n         * The current activated notebook in model.\n         */\n        get currentNotebook() {\n            return this._currentNotebook;\n        }\n        /**\n         * The display options for progress bar and elapsed time.\n         */\n        get displayOption() {\n            return this._displayOption;\n        }\n        /**\n         * Set the display options for progress bar and elapsed time.\n         *\n         * @param options - Options to be used\n         */\n        set displayOption(options) {\n            this._displayOption = options;\n        }\n        /**\n         * Get the execution state associated with a notebook.\n         *\n         * @param nb - The notebook used to identify execution\n         * state.\n         *\n         * @return - The associated execution state.\n         */\n        executionState(nb) {\n            return this._notebookExecutionProgress.get(nb);\n        }\n        /**\n         * The function is called on kernel's idle status message.\n         * It is used to keep track number of executed\n         * cell or Comm custom messages and the status of kernel.\n         *\n         * @param  nb - The notebook which contains the executed code\n         * cell.\n         * @param  msg_id - The id of message.\n         *\n         * ### Note\n         *\n         * To keep track of cells executed under 1 second,\n         * the execution state is marked as `needReset` 1 second after executing\n         * these cells. This `Timeout` will be cleared if there is any cell\n         * scheduled after that.\n         */\n        _cellExecutedCallback(nb, msg_id) {\n            const state = this._notebookExecutionProgress.get(nb);\n            if (state && state.scheduledCell.has(msg_id)) {\n                state.scheduledCell.delete(msg_id);\n                if (state.scheduledCell.size === 0) {\n                    window.setTimeout(() => {\n                        state.executionStatus = 'idle';\n                        clearInterval(state.interval);\n                        this.stateChanged.emit(void 0);\n                    }, 150);\n                    state.timeout = window.setTimeout(() => {\n                        state.needReset = true;\n                    }, 1000);\n                }\n            }\n        }\n        /**\n         * This function is called on kernel's `execute_input` message to start\n         * the elapsed time counter.\n         *\n         * @param  nb - The notebook which contains the scheduled execution request.\n         */\n        _startTimer(nb) {\n            const state = this._notebookExecutionProgress.get(nb);\n            if (state) {\n                if (state.executionStatus !== 'busy') {\n                    state.executionStatus = 'busy';\n                    clearTimeout(state.timeout);\n                    this.stateChanged.emit(void 0);\n                    state.interval = window.setInterval(() => {\n                        this._tick(state);\n                    }, 1000);\n                }\n            }\n        }\n        /**\n         * The function is called on kernel's `execute_request` message or Comm message, it is\n         * used to keep track number of scheduled cell or Comm execution message\n         * and the status of kernel.\n         *\n         * @param  nb - The notebook which contains the scheduled code.\n         * cell\n         * @param  msg_id - The id of message.\n         */\n        _cellScheduledCallback(nb, msg_id) {\n            const state = this._notebookExecutionProgress.get(nb);\n            if (state && !state.scheduledCell.has(msg_id)) {\n                if (state.needReset) {\n                    this._resetTime(state);\n                }\n                state.scheduledCell.add(msg_id);\n                state.scheduledCellNumber += 1;\n            }\n        }\n        /**\n         * Increment the executed time of input execution state\n         * and emit `stateChanged` signal to re-render the indicator.\n         *\n         * @param  data - the state to be updated.\n         */\n        _tick(data) {\n            data.totalTime += 1;\n            this.stateChanged.emit(void 0);\n        }\n        /**\n         * Reset the input execution state.\n         *\n         * @param  data - the state to be rested.\n         */\n        _resetTime(data) {\n            data.totalTime = 0;\n            data.scheduledCellNumber = 0;\n            data.executionStatus = 'idle';\n            data.scheduledCell = new Set();\n            clearTimeout(data.timeout);\n            clearInterval(data.interval);\n            data.needReset = false;\n        }\n        get renderFlag() {\n            return this._renderFlag;\n        }\n        updateRenderOption(options) {\n            if (this.displayOption.showOnToolBar) {\n                if (!options.showOnToolBar) {\n                    this._renderFlag = false;\n                }\n                else {\n                    this._renderFlag = true;\n                }\n            }\n            this.displayOption.showProgress = options.showProgress;\n            this.stateChanged.emit(void 0);\n        }\n    }\n    ExecutionIndicator.Model = Model;\n    function createExecutionIndicatorItem(panel, translator, loadSettings) {\n        const toolbarItem = new ExecutionIndicator(translator);\n        toolbarItem.model.displayOption = {\n            showOnToolBar: true,\n            showProgress: true\n        };\n        toolbarItem.model.attachNotebook({\n            content: panel.content,\n            context: panel.sessionContext\n        });\n        panel.disposed.connect(() => {\n            toolbarItem.dispose();\n        });\n        if (loadSettings) {\n            loadSettings\n                .then(settings => {\n                toolbarItem.model.updateRenderOption(getSettingValue(settings));\n                settings.changed.connect(newSettings => {\n                    toolbarItem.model.updateRenderOption(getSettingValue(newSettings));\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        return toolbarItem;\n    }\n    ExecutionIndicator.createExecutionIndicatorItem = createExecutionIndicatorItem;\n    function getSettingValue(settings) {\n        let showOnToolBar = true;\n        let showProgress = true;\n        const configValues = settings.get('kernelStatus').composite;\n        if (configValues) {\n            showOnToolBar = !configValues.showOnStatusBar;\n            showProgress = configValues.showProgress;\n        }\n        return { showOnToolBar, showProgress };\n    }\n    ExecutionIndicator.getSettingValue = getSettingValue;\n})(ExecutionIndicator || (ExecutionIndicator = {}));\n//# sourceMappingURL=executionindicator.js.map"],"names":["JUPYTER_CELL_MIME","KernelError","Error","constructor","content","errorContent","errorName","ename","errorValue","evalue","super","this","traceback","Object","setPrototypeOf","prototype","NotebookActions","executed","Private","executionScheduled","selectionExecuted","setHeadingCollapse","cell","collapsing","notebook","which","findIndex","widgets","possibleCell","index","model","id","length","selectedHeadingInfo","getHeadingInfo","isHidden","MarkdownCell","isHeading","cellNum","localCollapsed","localCollapsedLevel","subCell","subCellHeadingInfo","headingLevel","setHidden","collapsed","numberChildNodes","setCellCollapse","level","headingInfo","headingCollapsed","splitCell","activeCell","state","getState","deselectAll","nbModel","activeCellIndex","child","editor","selections","getSelections","orig","value","text","offsets","start","end","i","getOffsetAt","push","clones","clone","cloneCell","type","outputs","clear","slice","replace","cells","beginCompoundOperation","set","insert","endCompoundOperation","activeCellDelta","focus","handleState","mergeCells","mergeAbove","toMerge","toDelete","primary","active","attachments","forEach","isSelectedOrActive","isRawCellModel","isMarkdownCellModel","key","keys","get","toJSON","cellModel","unshift","newModel","join","isCodeCellModel","fromJSON","removeValue","rendered","deleteCells","insertAbove","contentFactory","createCell","notebookConfig","defaultCell","insertBelow","moveDown","move","select","deselect","moveUp","changeCellType","run","sessionContext","Promise","resolve","promise","runSelected","handleRunState","runAndAdvance","mode","runAndInsert","runAll","renderAllMarkdown","previousIndex","runAllAbove","runAllBelow","replaceSelection","_a","_b","call","selectAbove","possibleNextCellIndex","possibleNextCell","inputHidden","selectBelow","maxCellIndex","extendSelectionAbove","toTop","extendContiguousSelectionTo","extendSelectionBelow","toBottom","selectAll","copy","copyOrCut","cut","paste","clipboard","Clipboard","hasData","values","getData","newCells","map","cell_type","lastClipboardInteraction","cell_id","createCodeCell","createMarkdownCell","createRawCell","deletable","metadata","reverse","remove","undo","sharedModel","redo","toggleAllLineNumbers","config","editorConfig","lineNumbers","code","markdown","raw","newConfig","assign","clearOutputs","each","clearExecution","outputHidden","clearAllOutputs","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","renderSideBySide","renderingLayout","renderDefault","showAllOutputs","enableOutputScrolling","outputsScrolled","disableOutputScrolling","selectLastRunCell","latestTime","latestCellIdx","cellIndx","execution","JSONExt","undefined","timestamp","toString","startTime","Date","setMarkdownHeader","Math","min","max","collapseAll","expandAllHeadings","expandParent","nearestParentCell","childHeaderInfo","cellN","hInfo","findNearestParentHeader","findNextParentHeading","toggleCurrentHeadingCollapse","ElementExt","node","trust","translator","trans","nullTranslator","load","toArray","trusted","every","trustMessage","__","href","target","rel","showDialog","body","buttons","Dialog","label","then","title","result","button","accept","wasFocused","contains","document","activeElement","scrollIfNeeded","activate","deletedCells","Signal","scroll","rect","inputArea","getBoundingClientRect","scrollToPosition","bottom","lastIndex","selected","filter","all","_c","emit","success","isTerminating","session","path","pendingInput","CodeCell","recordTiming","reply","splice","isDisposed","status","payload","setNextInput","source","newCell","ArrayExt","handlePayload","catch","reason","message","startsWith","error","ran","runCell","results","lastCell","update","executionCount","setPrompt","data","cellJSON","setData","newHeader","Array","matches","exec","ToolbarItems","createSaveButton","panel","onClick","context","readOnly","save","createCheckpoint","addToolbarButtonClass","ReactWidget","UseSignal","signal","fileChanged","ToolbarButtonComponent","icon","saveIcon","tooltip","enabled","contentsModel","writable","createInsertButton","ToolbarButton","addIcon","createCutButton","cutIcon","createCopyButton","copyIcon","createPasteButton","pasteIcon","createRunButton","runIcon","createRestartRunAllButton","dialogs","fastForwardIcon","sessionContextDialogs","restart","restarted","createCellTypeItem","CellTypeSwitcher","getDefaultItems","sessionDialogs","name","widget","Toolbar","handleChange","event","_notebook","handleKeyDown","keyCode","_trans","addClass","activeCellChanged","connect","selectionChanged","render","HTMLSelect","className","onChange","onKeyDown","CellList","modelDB","factory","_mutex","_isDisposed","_changed","_factory","_cellOrder","createList","_cellMap","ObservableMap","changed","_onOrderChanged","nbmodel","onSharedModelChanged","onModelDBChanged","self","change","transact","deleteCellRange","oldIndex","oldValues","newValues","insertLocation","newIndex","insertCells","switchSharedModel","from","currpos","cellsChange","delta","nbcell","insertAll","delete","removeRange","retain","isEmpty","iter","arr","ArrayIterator","dispose","fromIndex","toIndex","pushAll","startIndex","endIndex","canRedo","canUndo","isUndoAble","clearUndo","clearUndoHistory","order","existingCell","createValue","isStandalone","freshCell","UNSHARED_KEYS","NotebookModel","options","_modelDBMutex","_readOnly","_contentChanged","_stateChanged","_nbformat","_nbformatMinor","ModelDB","disableDocumentWideUndoRedo","_isInitialized","isInitialized","defaultContentFactory","view","_cells","_onCellsChanged","createMap","has","languagePreference","_ensureMetadata","_onMetadataChanged","_deletedCells","dirty","_onStateChanged","contentChanged","stateChanged","newValue","oldValue","triggerStateChange","nbformat","nbformatMinor","defaultKernelName","spec","defaultKernelLanguage","info","JSON","stringify","fromString","parse","getMetadata","nbformat_minor","useId","origNbformat","orig_nbformat","msg","initialize","list","triggerContentChange","sender","changes","stateChange","metadataChange","entries","includes","updateMetadata","display_name","args","ContentFactory","codeCellContentFactory","CodeCellModel","UUID","MarkdownCellModel","RawCellModel","NotebookModelFactory","_disposed","_disableDocumentWideUndoRedo","contentType","fileFormat","createNew","preferredLanguage","CommandEditComponent","props","TextItem","modeNames","notebookMode","CommandEditStatus","VDomRenderer","Model","_modeNames","command","edit","VDomModel","arguments","_onChanged","oldMode","_notebookMode","_triggerChange","oldNotebook","disconnect","modelContentChanged","oldState","newState","RankedPanel","Widget","_items","layout","PanelLayout","addWidget","rank","rankItem","itemCmp","insertWidget","onChildRemoved","item","NotebookTools","_commonTools","_advancedTools","Collapse","_tracker","tracker","currentChanged","_onActiveNotebookPanelChanged","_onActiveCellChanged","_onSelectionChanged","selectedCells","currentWidget","activeNotebookPanel","addItem","tool","section","notebookTools","MessageLoop","ActiveNotebookPanelMessage","ActiveCellMessage","_prevActiveNotebookModel","_onActiveNotebookPanelMetadataChanged","activeNBModel","_toolChildren","_prevActiveCell","_onActiveCellMetadataChanged","SelectionMessage","ObservableJSON","chain","children","ConflatableMessage","Tool","processMessage","onActiveNotebookPanelChanged","onActiveCellChanged","onSelectionChanged","onActiveCellMetadataChanged","onActiveNotebookPanelMetadataChanged","ActiveCellTool","_model","CodeEditor","count","_cellModel","_onValueChanged","mimeTypeChanged","_onMimeTypeChanged","promptNode","cloneNode","prompt","editorFactory","split","mimeType","editorWidget","CodeEditorWrapper","setOption","MetadataEditorTool","JSONEditor","titleNode","createElement","textContent","NotebookMetadataEditorTool","_update","nb","CellMetadataEditorTool","KeySelector","createSelectorNode","_getValue","_default","_setValue","_changeGuard","default","_validCellTypes","validCellTypes","_getter","getter","_setter","setter","selectNode","getElementsByTagName","handleEvent","onValueChanged","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","disabled","cellType","indexOf","createSlideShowSelector","optionValueArray","create","slide_type","createNBConvertSelector","first","second","toLocaleUpperCase","optionNodes","option","h","VirtualDOM","Styling","NB_CELL_CLASS","EDIT_CLASS","COMMAND_CLASS","ACTIVE_CLASS","SELECTED_CLASS","OTHER_SELECTED_CLASS","DROP_TARGET_CLASS","DROP_SOURCE_CLASS","DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","SIDE_BY_SIDE_CLASS","window","requestIdleCallback","handler","now","setTimeout","didTimeout","timeRemaining","cancelIdleCallback","clearTimeout","StaticNotebook","_editorConfig","defaultEditorConfig","_notebookConfig","defaultNotebookConfig","_mimetype","_modelChanged","_modelContentChanged","_fullyRendered","_placeholderCellRendered","_renderedCellsCount","dataset","rendermime","NotebookPanelLayout","_mimetypeService","mimeTypeService","_toRenderMap","Map","_cellsArray","_observer","IntersectionObserver","observer","o","isIntersecting","unobserve","ci","_renderPlaceholderCell","root","threshold","rootMargin","observedTopMargin","observedBottomMargin","fullyRendered","placeholderCellRendered","modelChanged","isCollaborative","connected","collaborators","_onCollaboratorsChanged","_onModelChanged","onModelChanged","codeMimetype","_updateEditorConfig","_updateNotebookConfig","_renderingLayout","classList","add","onModelContentChanged","onMetadataChanged","_updateMimetype","onCellInserted","onCellMoved","onCellRemoved","_removeCell","_insertCell","insertType","_moveCell","requestAnimationFrame","_createCodeCell","_createMarkdownCell","_createRawCell","numberCellsToRenderDirectly","placeholder","_createPlaceholderCell","observe","_incrementRenderedCount","renderCellOnIdle","renderPlaceholderCells","_renderPlaceholderCells","bind","timeout","deadline","next","pl","removeWidgetAt","updateEditorOnShow","maxNumberOutputs","syncCollapse","syncEditable","syncScrolled","showEditorForReadOnlyMarkdown","toggleCollapsedSignal","innerHTML","parent","getMimeTypeByLanguage","setOptions","refresh","toggleClass","scrollPastEnd","showEditorForReadOnly","size","lineWrap","matchBrackets","autoClosingBrackets","sideBySideLeftMarginOverride","sideBySideRightMarginOverride","Cell","initializeState","RawCell","Notebook","processNotebookOptions","_activeCellIndex","_activeCell","_mode","_drag","_fragment","_dragData","_mouseMode","_activeCellChanged","_selectionChanged","_checkCacheOnNextResize","_lastClipboardInteraction","tabIndex","setAttribute","_ensureFocus","_trimSelections","selectedProperty","isSelected","head","anchor","getContiguousSelection","c","last","activeIndex","position","ar","top","height","abs","scrollTop","scrollToCell","setFragment","fragment","ready","eventPhase","Event","CAPTURING_PHASE","_evtContextMenuCapture","_evtMouseDownCapture","_evtMouseDown","currentTarget","_evtDocumentMouseup","_evtDocumentMousemove","_evtDblClick","_evtFocusIn","_evtFocusOut","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterShow","onResize","cache","_cellLayoutStateCache","width","parseInt","style","w","onBeforeHide","onActivateRequest","onUpdateRequest","removeClass","el","querySelector","CSS","escape","console","warn","scrollIntoView","localCollaborator","uuid","sessionId","selectionStyle","color","edgeRequested","_onEdgeRequest","location","prev","lastLine","lineCount","setCursorPosition","line","column","force","hasFocus","_findCell","n","parentElement","_findEventTargetAndCell","elementFromPoint","clientX","clientY","shiftKey","preventDefault","targetArea","hasSelection","getSelection","e","pressX","pressY","stopPropagation","dx","dy","_startDrag","mimeData","elements","getElementsByClassName","dropAction","proposedAction","toMove","nextParent","cellWidget","countString","dragImage","createDragImage","Drag","MimeData","supportedActions","action","relatedTarget","localName","toggle","AttachedProperty","promptNumber","cellContent","SEARCH_DOCUMENT_LOADED_CLASS","NotebookPanel","DocumentWidget","_autorestarting","toolbar","kernelChanged","_onKernelChanged","statusChanged","_onSessionStatusChanged","_onFullyRendered","saveState","_onSave","revealed","setConfig","kernelPreference","shutdownOnDispose","kernelShutdown","Printing","async","PageConfig","format","download","kernel","_updateLanguage","language_info","_updateSpec","language","createNotebook","IContentFactory","Token","INotebookWidgetFactory","INotebookTools","INotebookTracker","NotebookTracker","WidgetTracker","onCurrentChanged","NotebookTrustComponent","allCellsTrusted","trustedIcon","stylesheet","notTrustedIcon","NotebookTrustStatus","trustedCells","totalCells","activeCellTrusted","cellTrust","_trustedCells","_totalCells","_activeCellTrusted","_getAllState","total","_deriveCellTrustState","reduce","accum","current","NotebookWidgetFactory","ABCWidgetFactory","_sessionDialogs","createNewWidget","nbOptions","resolver","urlResolver","defaultToolbarFactory","ExecutionIndicatorComponent","kernelStatuses","translateKernelStatuses","showOnToolBar","displayOption","showProgress","tooltipClass","emptyDiv","kernelStatus","circleIconProps","alignSelf","time","totalTime","scheduledCellNumber","executedCellNumber","scheduledCell","percentage","displayClass","progressBar","ProgressCircle","progress","titleFactory","translatedStatus","reactElement","circle","popup","offlineBoltIcon","circleIcon","executionStatus","_n","ExecutionIndicator","interactiveItem","renderFlag","currentNotebook","executionState","_notebookExecutionProgress","WeakMap","_displayOption","_renderFlag","attachNotebook","_d","_currentNotebook","interval","Set","needReset","contextStatusChanged","ctx","kernelDisplayStatus","contextConnectionStatusChanged","connectionStatusChanged","disposed","handleKernelMsg","msgId","header","msg_id","KernelMessage","method","_cellScheduledCallback","_startTimer","msg_type","execution_state","parentId","parent_header","_cellExecutedCallback","anyMessage","kernelChangedSlot","_","kernelData","_resetTime","clearInterval","setInterval","_tick","updateRenderOption","getSettingValue","settings","configValues","composite","showOnStatusBar","createExecutionIndicatorItem","loadSettings","toolbarItem","newSettings"],"sourceRoot":""}