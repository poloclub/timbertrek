{"version":3,"file":"6962.7a5ac19.js","mappings":"4OAiBA,MAAMA,EAAU,cAIhB,IAAIC,GACJ,SAAWA,GACPA,EAAWC,UAAY,wBAD3B,CAEGD,IAAeA,EAAa,KAI/B,MAAME,EAAa,CACfC,SAeJ,SAA4BC,EAAKC,EAAYC,EAASC,EAAUC,EAAiBC,GAC7E,IAAIC,EACJ,MAAMC,EAAQN,EAAWO,KAAK,cAC1BH,IACAA,EAAgBI,gBAAgBd,EAAS,WAAWe,GAAU,EAAAC,aAAA,oBAAiCD,EAAQT,KACvGI,EAAgBI,gBAAgBd,EAAS,SAASe,GAAU,EAAAC,aAAA,kBAA+BD,EAAQT,KAC/FG,IACAE,GAAiB,IAAAM,sBAAqBP,EAAiBD,EAAiBT,EAASG,EAAWe,GAAIZ,KAIxG,MAAMa,EAAK,CACPC,KAAM,OACNC,YAAa,OACbC,WAAY,OACZC,YAAaX,EAAMY,GAAG,aACtBC,WAAY,CAAC,SACbC,UAAW,CAAC,aACZC,KAAM,EAAAC,WAEVvB,EAAIwB,YAAYC,YAAYX,GAE5B,MAAMY,EAAU,IAAI,EAAAC,kBAAkB,CAClCZ,KAAMpB,EACNiC,UAAW,CAAC,QACZC,WAAY,CAAC,QACbC,UAAU,EACVxB,eAAAA,EACAL,WAAAA,IAGE8B,EAAU,IAAI,EAAAC,cAAc,CAC9BC,UAAW,eA2Df,OAxDI9B,GACKA,EAAS+B,QAAQH,EAAS,CAC3BI,QAAS,kBACTC,KAAM1B,IAAU,CAAG2B,KAAM3B,EAAO4B,QAAQD,KAAMX,QAAS,gBACvDX,KAAML,GAAUA,EAAO4B,QAAQD,OAGvCrC,EAAIwB,YAAYe,iBAAiBb,GACjCA,EAAQc,cAAcC,SAAQ,CAACC,EAAQhC,KACnC,IAAIiC,EAAIC,EAEHb,EAAQc,IAAInC,GAEjBA,EAAO4B,QAAQQ,YAAYL,SAAQ,KAC1BV,EAAQgB,KAAKrC,MAItBA,EAAOsC,eAAeP,SAAQ,KAC1BzC,EAAIiD,SAASC,qBAAqBtD,EAAWC,cAEjDa,EAAOyC,MAAM7B,KAAOR,EAAGQ,KACvBZ,EAAOyC,MAAMC,UAAoC,QAAvBT,EAAK7B,EAAGsC,iBAA8B,IAAPT,EAAgBA,EAAK,GAC9EjC,EAAOyC,MAAME,UAAoC,QAAvBT,EAAK9B,EAAGuC,iBAA8B,IAAPT,EAAgBA,EAAK,MAIlF5C,EAAIiD,SAASK,WAAW1D,EAAWC,UAAW,CAC1C0D,MAAOhD,EAAMY,GAAG,mBAChBqC,QAASjD,EAAMY,GAAG,wKAIlBsC,UAAW,MAAQ1B,EAAQ2B,cAC3BC,UAAW,KACP,MAAMC,EAAU7B,EAAQ2B,cACxB,QAAKE,IAIwC,IAD7BA,EAAQC,QAAQC,QACjBC,QAAQ,kBAE3BC,QAAS,KACL,MAAMJ,EAAU7B,EAAQ2B,cACxB,IAAKE,EACD,OAAO,EAEXA,EAAQK,SAAWL,EAAQK,WAG/B/D,GACAA,EAAQgE,QAAQ,CACZ/B,QAASvC,EAAWC,UACpBsE,SAAU5D,EAAMY,GAAG,qBAGpBY,GAzGPlB,GAAI,0CACJuD,SAAU,EAAAC,mBACVC,SAAU,CAAC,EAAAC,aACXC,SAAU,CACN,EAAAC,gBACA,EAAAC,gBACA,EAAAC,iBACA,EAAAC,wBAEJC,WAAW,GAqGf","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/htmlviewer-extension/lib/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module htmlviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { createToolbarFactory, ICommandPalette, IToolbarWidgetRegistry, WidgetTracker } from '@jupyterlab/apputils';\nimport { HTMLViewerFactory, IHTMLViewerTracker, ToolbarItems } from '@jupyterlab/htmlviewer';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { html5Icon } from '@jupyterlab/ui-components';\n/**\n * Factory name\n */\nconst FACTORY = 'HTML Viewer';\n/**\n * Command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.trustHTML = 'htmlviewer:trust-html';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The HTML file handler extension.\n */\nconst htmlPlugin = {\n    activate: activateHTMLViewer,\n    id: '@jupyterlab/htmlviewer-extension:plugin',\n    provides: IHTMLViewerTracker,\n    requires: [ITranslator],\n    optional: [\n        ICommandPalette,\n        ILayoutRestorer,\n        ISettingRegistry,\n        IToolbarWidgetRegistry\n    ],\n    autoStart: true\n};\n/**\n * Activate the HTMLViewer extension.\n */\nfunction activateHTMLViewer(app, translator, palette, restorer, settingRegistry, toolbarRegistry) {\n    let toolbarFactory;\n    const trans = translator.load('jupyterlab');\n    if (toolbarRegistry) {\n        toolbarRegistry.registerFactory(FACTORY, 'refresh', widget => ToolbarItems.createRefreshButton(widget, translator));\n        toolbarRegistry.registerFactory(FACTORY, 'trust', widget => ToolbarItems.createTrustButton(widget, translator));\n        if (settingRegistry) {\n            toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, htmlPlugin.id, translator);\n        }\n    }\n    // Add an HTML file type to the docregistry.\n    const ft = {\n        name: 'html',\n        contentType: 'file',\n        fileFormat: 'text',\n        displayName: trans.__('HTML File'),\n        extensions: ['.html'],\n        mimeTypes: ['text/html'],\n        icon: html5Icon\n    };\n    app.docRegistry.addFileType(ft);\n    // Create a new viewer factory.\n    const factory = new HTMLViewerFactory({\n        name: FACTORY,\n        fileTypes: ['html'],\n        defaultFor: ['html'],\n        readOnly: true,\n        toolbarFactory,\n        translator\n    });\n    // Create a widget tracker for HTML documents.\n    const tracker = new WidgetTracker({\n        namespace: 'htmlviewer'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: 'HTML Viewer' }),\n            name: widget => widget.context.path\n        });\n    }\n    app.docRegistry.addWidgetFactory(factory);\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // Track the widget.\n        void tracker.add(widget);\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Notify the application when the trust state changes so it\n        // can update any renderings of the trust command.\n        widget.trustedChanged.connect(() => {\n            app.commands.notifyCommandChanged(CommandIDs.trustHTML);\n        });\n        widget.title.icon = ft.icon;\n        widget.title.iconClass = (_a = ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n    });\n    // Add a command to trust the active HTML document,\n    // allowing script executions in its context.\n    app.commands.addCommand(CommandIDs.trustHTML, {\n        label: trans.__('Trust HTML File'),\n        caption: trans.__(`Whether the HTML file is trusted.\n    Trusting the file allows scripts to run in it,\n    which may result in security risks.\n    Only enable for files you trust.`),\n        isEnabled: () => !!tracker.currentWidget,\n        isToggled: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            const sandbox = current.content.sandbox;\n            return sandbox.indexOf('allow-scripts') !== -1;\n        },\n        execute: () => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return false;\n            }\n            current.trusted = !current.trusted;\n        }\n    });\n    if (palette) {\n        palette.addItem({\n            command: CommandIDs.trustHTML,\n            category: trans.__('File Operations')\n        });\n    }\n    return tracker;\n}\n/**\n * Export the plugins as default.\n */\nexport default htmlPlugin;\n//# sourceMappingURL=index.js.map"],"names":["FACTORY","CommandIDs","trustHTML","htmlPlugin","activate","app","translator","palette","restorer","settingRegistry","toolbarRegistry","toolbarFactory","trans","load","registerFactory","widget","ToolbarItems","createToolbarFactory","id","ft","name","contentType","fileFormat","displayName","__","extensions","mimeTypes","icon","html5Icon","docRegistry","addFileType","factory","HTMLViewerFactory","fileTypes","defaultFor","readOnly","tracker","WidgetTracker","namespace","restore","command","args","path","context","addWidgetFactory","widgetCreated","connect","sender","_a","_b","add","pathChanged","save","trustedChanged","commands","notifyCommandChanged","title","iconClass","iconLabel","addCommand","label","caption","isEnabled","currentWidget","isToggled","current","content","sandbox","indexOf","execute","trusted","addItem","category","provides","IHTMLViewerTracker","requires","ITranslator","optional","ICommandPalette","ILayoutRestorer","ISettingRegistry","IToolbarWidgetRegistry","autoStart"],"sourceRoot":""}