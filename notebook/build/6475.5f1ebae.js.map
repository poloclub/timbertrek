{"version":3,"file":"6475.5f1ebae.js","mappings":"wOAWA,MA4FA,EANgB,CAtFC,CACbA,GAAI,oDACJC,SAAU,CAAC,EAAAC,iBACXC,WAAW,EACXC,SAAU,CAACC,EAAKC,KACZ,MAAMC,EAAU,EAAAC,WAAA,aAChBF,EAAQG,YAAYC,SAAQC,MAAOC,EAAMC,KACrC,MAAM,eAAEC,GAAmBD,EAE3B,GAAa,aADA,EAAAL,WAAA,UAAqB,aAE9B,OAEJ,MAAMO,EAAOD,EAAeC,KAC5BC,OAAOC,KAAK,GAAGV,wBAA8BQ,IAAQ,UAErDF,EAAQK,eASD,CACflB,GAAI,sDACJC,SAAU,CAAC,EAAAkB,kBACXhB,WAAW,EACXC,SAAU,CAACC,EAAKe,KACZ,MAAMb,EAAU,EAAAC,WAAA,aAEVa,EAAUD,EAAWH,KAC3BG,EAAWH,KAAO,CAACF,EAAMO,EAAa,UAAWC,EAAQC,KAErD,GAAY,YADAA,MAAAA,OAAyC,EAASA,EAAQC,KAGlE,YADAJ,EAAQK,KAAKN,EAAYL,EAAMO,EAAYC,EAAQC,GAGvD,MACMG,EAAgB,WADV,EAAAC,QAAA,QAAgBb,GACK,YAAc,OAC/CC,OAAOC,KAAK,GAAGV,UAAgBoB,UAAcZ,QAQ5C,CACTf,GAAI,gDACJG,WAAW,EACXC,SAAWC,IACP,MAAME,EAAU,EAAAC,WAAA,aACVqB,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,GAAGzB,cACfsB,EAAKI,OAAS,SACdJ,EAAKK,IAAM,sBACX,MAAMC,EAAO,IAAI,EAAAC,OAAO,CAAEP,KAAAA,IAC1B,EAAAQ,aAAA,QAAqB,CACjBC,UAAWT,EACXU,gBAAiB,SACjBC,QAAS,kBACTC,OAAQ,OACRC,MAAO,SAEXP,EAAKnC,GAAK,eACVK,EAAIsC,MAAMC,IAAIT,EAAM,MAAO,CAAEU,KAAM,MAMpB,CACnB7C,GAAI,2DACJG,WAAW,EACX2C,SAAU,CAAC,EAAAC,aACX3C,SAAU,CAACC,EAAK2C,KACRA,GACAA,EAAWC,eAAevC,SAAQ,KAC9BwC,uBAAsB,KAClB7C,EAAI8C,SAASC","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/retro-application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { liteWordmark } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { IRetroShell } from '@retrolab/application';\n/**\n * Open consoles in a new tab.\n */\nconst consoles = {\n    id: '@jupyterlite/retro-application-extension:consoles',\n    requires: [IConsoleTracker],\n    autoStart: true,\n    activate: (app, tracker) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        tracker.widgetAdded.connect(async (send, console) => {\n            const { sessionContext } = console;\n            const page = PageConfig.getOption('retroPage');\n            if (page === 'consoles') {\n                return;\n            }\n            const path = sessionContext.path;\n            window.open(`${baseUrl}retro/consoles?path=${path}`, '_blank');\n            // the widget is not needed anymore\n            console.dispose();\n        });\n    },\n};\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager = {\n    id: '@jupyterlite/retro-application-extension:docmanager',\n    requires: [IDocumentManager],\n    autoStart: true,\n    activate: (app, docManager) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        // patch the `docManager.open` option to prevent the default behavior\n        const docOpen = docManager.open;\n        docManager.open = (path, widgetName = 'default', kernel, options) => {\n            const ref = options === null || options === void 0 ? void 0 : options.ref;\n            if (ref === '_noref') {\n                docOpen.call(docManager, path, widgetName, kernel, options);\n                return;\n            }\n            const ext = PathExt.extname(path);\n            const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n            window.open(`${baseUrl}retro/${route}?path=${path}`);\n            return undefined;\n        };\n    },\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyterlite/retro-application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        liteWordmark.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto',\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/retro-application-extension:notify-commands',\n    autoStart: true,\n    optional: [IRetroShell],\n    activate: (app, retroShell) => {\n        if (retroShell) {\n            retroShell.currentChanged.connect(() => {\n                requestAnimationFrame(() => {\n                    app.commands.notifyCommandChanged();\n                });\n            });\n        }\n    },\n};\nconst plugins = [\n    consoles,\n    docmanager,\n    logo,\n    notifyCommands,\n];\nexport default plugins;\n"],"names":["id","requires","IConsoleTracker","autoStart","activate","app","tracker","baseUrl","PageConfig","widgetAdded","connect","async","send","console","sessionContext","path","window","open","dispose","IDocumentManager","docManager","docOpen","widgetName","kernel","options","ref","call","route","PathExt","node","document","createElement","href","target","rel","logo","Widget","liteWordmark","container","elementPosition","padding","height","width","shell","add","rank","optional","IRetroShell","retroShell","currentChanged","requestAnimationFrame","commands","notifyCommandChanged"],"sourceRoot":""}