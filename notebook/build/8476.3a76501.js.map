{"version":3,"file":"8476.3a76501.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor/lib/tabspacestatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { clickedItem, interactiveItem, showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport React from 'react';\n/**\n * A pure functional component for rendering the TabSpace status.\n */\nfunction TabSpaceComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const description = props.isSpaces\n        ? trans.__('Spaces')\n        : trans.__('Tab Size');\n    return (React.createElement(TextItem, { onClick: props.handleClick, source: `${description}: ${props.tabSpace}`, title: trans.__('Change Tab indentationâ€¦') }));\n}\n/**\n * A VDomRenderer for a tabs vs. spaces status item.\n */\nexport class TabSpaceStatus extends VDomRenderer {\n    /**\n     * Create a new tab/space status item.\n     */\n    constructor(options) {\n        super(new TabSpaceStatus.Model());\n        this._popup = null;\n        this._menu = options.menu;\n        this.translator = options.translator || nullTranslator;\n        this.addClass(interactiveItem);\n    }\n    /**\n     * Render the TabSpace status item.\n     */\n    render() {\n        if (!this.model || !this.model.config) {\n            return null;\n        }\n        else {\n            return (React.createElement(TabSpaceComponent, { isSpaces: this.model.config.insertSpaces, tabSpace: this.model.config.tabSize, handleClick: () => this._handleClick(), translator: this.translator }));\n        }\n    }\n    /**\n     * Handle a click on the status item.\n     */\n    _handleClick() {\n        const menu = this._menu;\n        if (this._popup) {\n            this._popup.dispose();\n        }\n        menu.aboutToClose.connect(this._menuClosed, this);\n        this._popup = showPopup({\n            body: menu,\n            anchor: this,\n            align: 'right'\n        });\n    }\n    _menuClosed() {\n        this.removeClass(clickedItem);\n    }\n}\n/**\n * A namespace for TabSpace statics.\n */\n(function (TabSpaceStatus) {\n    /**\n     * A VDomModel for the TabSpace status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._config = null;\n        }\n        /**\n         * The editor config from the settings system.\n         */\n        get config() {\n            return this._config;\n        }\n        set config(val) {\n            const oldConfig = this._config;\n            this._config = val;\n            this._triggerChange(oldConfig, this._config);\n        }\n        _triggerChange(oldValue, newValue) {\n            const oldSpaces = oldValue && oldValue.insertSpaces;\n            const oldSize = oldValue && oldValue.tabSize;\n            const newSpaces = newValue && newValue.insertSpaces;\n            const newSize = newValue && newValue.tabSize;\n            if (oldSpaces !== newSpaces || oldSize !== newSize) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    TabSpaceStatus.Model = Model;\n})(TabSpaceStatus || (TabSpaceStatus = {}));\n//# sourceMappingURL=tabspacestatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The editor tracker token.\n */\nexport const IEditorTracker = new Token('@jupyterlab/fileeditor:IEditorTracker');\n/* tslint:enable */\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { textEditorIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { StackedLayout, Widget } from '@lumino/widgets';\n/**\n * The data attribute added to a widget that can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The data attribute added to a widget that can undo.\n */\nconst UNDOER = 'jpUndoer';\n/**\n * A code editor wrapper for the file editor.\n *\n * @deprecated since v3.4\n * Note: This class will be removed in v4.0.\n * From now on, you can directly use the class\n * `CodeEditorWrapper` instead on `FileEditorCodeWrapper`.\n */\nexport class FileEditorCodeWrapper extends CodeEditorWrapper {\n    /**\n     * Construct a new editor widget.\n     */\n    constructor(options) {\n        super({\n            factory: options.factory,\n            model: options.context.model\n        });\n        this._ready = new PromiseDelegate();\n        const context = (this._context = options.context);\n        // TODO: move this to the FileEditor when removing the\n        // `FileEditorCodeWrapper`\n        this.addClass('jp-FileEditorCodeWrapper');\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.node.dataset[UNDOER] = 'true';\n        void context.ready.then(() => {\n            this._onContextReady();\n        });\n        if (context.model.modelDB.isCollaborative) {\n            const modelDB = context.model.modelDB;\n            void modelDB.connected.then(() => {\n                const collaborators = modelDB.collaborators;\n                if (!collaborators) {\n                    return;\n                }\n                // Setup the selection style for collaborators\n                const localCollaborator = collaborators.localCollaborator;\n                this.editor.uuid = localCollaborator.sessionId;\n                this.editor.selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), { color: localCollaborator.color });\n                collaborators.changed.connect(this._onCollaboratorsChanged, this);\n                // Trigger an initial onCollaboratorsChanged event.\n                this._onCollaboratorsChanged();\n            });\n        }\n    }\n    /**\n     * Get the context for the editor widget.\n     */\n    get context() {\n        return this._context;\n    }\n    /**\n     * A promise that resolves when the file editor is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle actions that should be taken when the context is ready.\n     */\n    _onContextReady() {\n        if (this.isDisposed) {\n            return;\n        }\n        // Prevent the initial loading from disk from being in the editor history.\n        this.editor.clearHistory();\n        // Resolve the ready promise.\n        this._ready.resolve(undefined);\n    }\n    /**\n     * Handle a change to the collaborators on the model\n     * by updating UI elements associated with them.\n     */\n    _onCollaboratorsChanged() {\n        // If there are selections corresponding to non-collaborators,\n        // they are stale and should be removed.\n        const collaborators = this._context.model.modelDB.collaborators;\n        if (!collaborators) {\n            return;\n        }\n        for (const key of this.editor.model.selections.keys()) {\n            if (!collaborators.has(key)) {\n                this.editor.model.selections.delete(key);\n            }\n        }\n    }\n}\n/**\n * A widget for editors.\n */\nexport class FileEditor extends Widget {\n    /**\n     * Construct a new editor widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass('jp-FileEditor');\n        const context = (this._context = options.context);\n        this._mimeTypeService = options.mimeTypeService;\n        const editorWidget = (this.editorWidget = new FileEditorCodeWrapper(options));\n        this.editor = editorWidget.editor;\n        this.model = editorWidget.model;\n        // Listen for changes to the path.\n        context.pathChanged.connect(this._onPathChanged, this);\n        this._onPathChanged();\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(editorWidget);\n    }\n    /**\n     * Get the context for the editor widget.\n     */\n    get context() {\n        return this.editorWidget.context;\n    }\n    /**\n     * A promise that resolves when the file editor is ready.\n     */\n    get ready() {\n        return this.editorWidget.ready;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the widget's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (!this.model) {\n            return;\n        }\n        switch (event.type) {\n            case 'mousedown':\n                this._ensureFocus();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('mousedown', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this._ensureFocus();\n    }\n    /**\n     * Ensure that the widget has focus.\n     */\n    _ensureFocus() {\n        if (!this.editor.hasFocus()) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Handle a change to the path.\n     */\n    _onPathChanged() {\n        const editor = this.editor;\n        const localPath = this._context.localPath;\n        editor.model.mimeType = this._mimeTypeService.getMimeTypeByFilePath(localPath);\n    }\n}\n/**\n * A widget factory for editors.\n */\nexport class FileEditorFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new editor widget factory.\n     */\n    constructor(options) {\n        super(options.factoryOptions);\n        this._services = options.editorServices;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        const func = this._services.factoryService.newDocumentEditor;\n        const factory = options => {\n            return func(options);\n        };\n        const content = new FileEditor({\n            factory,\n            context,\n            mimeTypeService: this._services.mimeTypeService\n        });\n        content.title.icon = textEditorIcon;\n        const widget = new DocumentWidget({ content, context });\n        return widget;\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["TabSpaceComponent","props","trans","translator","nullTranslator","load","description","isSpaces","__","TextItem","onClick","handleClick","source","tabSpace","title","TabSpaceStatus","VDomRenderer","constructor","options","super","Model","this","_popup","_menu","menu","addClass","interactiveItem","render","model","config","insertSpaces","tabSize","_handleClick","dispose","aboutToClose","connect","_menuClosed","showPopup","body","anchor","align","removeClass","clickedItem","VDomModel","arguments","_config","val","oldConfig","_triggerChange","oldValue","newValue","oldSpaces","oldSize","newSpaces","newSize","stateChanged","emit","IEditorTracker","Token","FileEditorCodeWrapper","CodeEditorWrapper","factory","context","_ready","PromiseDelegate","_context","node","dataset","ready","then","_onContextReady","modelDB","isCollaborative","connected","collaborators","localCollaborator","editor","uuid","sessionId","selectionStyle","Object","assign","CodeEditor","color","changed","_onCollaboratorsChanged","promise","isDisposed","clearHistory","resolve","undefined","key","selections","keys","has","delete","FileEditor","Widget","_mimeTypeService","mimeTypeService","editorWidget","pathChanged","_onPathChanged","layout","StackedLayout","addWidget","handleEvent","event","type","_ensureFocus","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","onActivateRequest","hasFocus","focus","localPath","mimeType","getMimeTypeByFilePath","FileEditorFactory","ABCWidgetFactory","factoryOptions","_services","editorServices","createNewWidget","func","factoryService","newDocumentEditor","content","icon","textEditorIcon","DocumentWidget"],"sourceRoot":""}