{"version":3,"file":"3733.f94f6ea.js","mappings":"0KAsBA,IAqIIA,EArIAC,EAAkC,WAMlC,SAASA,EAAiBC,GACtBC,KAAKC,KAAOJ,EAAQK,UACpBF,KAAKG,KAAOJ,EAAQI,KACpBH,KAAKI,QAAUL,EAAQM,OACvBL,KAAKM,QAAUP,EAAQQ,QAAU,KACjCP,KAAKQ,SAAWT,EAAQU,SAAW,KACnCT,KAAKU,SAAWX,EAAQY,SAAW,KAkGvC,OArFAb,EAAiBc,UAAUC,IAAM,SAAUC,GACvC,IACIC,EAAMlB,EAAQmB,UAAUF,GAO5B,OANId,KAAKC,QAAQc,EACLA,EAAIf,KAAKC,MAGTc,EAAIf,KAAKC,MAAQD,KAAKiB,aAAaH,IAenDhB,EAAiBc,UAAUM,IAAM,SAAUJ,EAAOK,GAC9C,IAAIC,EACAL,EAAMlB,EAAQmB,UAAUF,GAExBM,EADApB,KAAKC,QAAQc,EACFA,EAAIf,KAAKC,MAGTc,EAAIf,KAAKC,MAAQD,KAAKiB,aAAaH,GAElD,IAAIO,EAAWrB,KAAKsB,aAAaR,EAAOK,GACxCnB,KAAKuB,aAAaT,EAAOM,EAAWL,EAAIf,KAAKC,MAAQoB,IAWzDvB,EAAiBc,UAAUL,OAAS,SAAUO,GAC1C,IAAIM,EACAL,EAAMlB,EAAQmB,UAAUF,GAExBM,EADApB,KAAKC,QAAQc,EACFA,EAAIf,KAAKC,MAGTc,EAAIf,KAAKC,MAAQD,KAAKiB,aAAaH,GAElD,IAAIO,EAAWrB,KAAKsB,aAAaR,EAAOM,GACxCpB,KAAKuB,aAAaT,EAAOM,EAAWL,EAAIf,KAAKC,MAAQoB,IAKzDvB,EAAiBc,UAAUK,aAAe,SAAUH,GAEhD,OAAOT,EADML,KAAKI,SACJU,IAKlBhB,EAAiBc,UAAUU,aAAe,SAAUR,EAAOK,GACvD,IAAIZ,EAASP,KAAKM,QAClB,OAAOC,EAASA,EAAOO,EAAOK,GAASA,GAK3CrB,EAAiBc,UAAUY,cAAgB,SAAUJ,EAAUC,GAC3D,IAAIZ,EAAUT,KAAKQ,SACnB,OAAOC,EAAUA,EAAQW,EAAUC,GAAYD,IAAaC,GAKhEvB,EAAiBc,UAAUW,aAAe,SAAUT,EAAOM,EAAUC,GACjE,IAAIV,EAAUX,KAAKU,SACfC,IAAYX,KAAKwB,cAAcJ,EAAUC,IACzCV,EAAQG,EAAOM,EAAUC,IAG1BvB,EA9G0B,IAmHrC,SAAWA,GAaPA,EAAiB2B,UAHjB,SAAmBX,GACfjB,EAAQ6B,UAAUC,OAAOb,IAXjC,CAcGhB,IAAqBA,EAAmB,KAK3C,SAAWD,GAQW,IACV+B,EALR/B,EAAQ6B,UAAY,IAAIG,QAIxBhC,EAAQK,SACA0B,EAAK,EACF,WAGH,MAAO,QADK,GADDE,KAAKC,UACOC,MAAM,GACN,IAAMJ,MAiBrC/B,EAAQmB,UATR,SAAmBF,GACf,IAAIC,EAAMlB,EAAQ6B,UAAUb,IAAIC,GAChC,OAAIC,IAGJA,EAAMkB,OAAO5B,OAAO,MACpBR,EAAQ6B,UAAUR,IAAIJ,EAAOC,GACtBA,IA5Bf,CA+BGlB,IAAYA,EAAU","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/properties/dist/index.es6.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A class which attaches a value to an external object.\n *\n * #### Notes\n * Attached properties are used to extend the state of an object with\n * semantic data from an unrelated class. They also encapsulate value\n * creation, coercion, and notification.\n *\n * Because attached property values are stored in a hash table, which\n * in turn is stored in a WeakMap keyed on the owner object, there is\n * non-trivial storage overhead involved in their use. The pattern is\n * therefore best used for the storage of rare data.\n */\nvar AttachedProperty = /** @class */ (function () {\n    /**\n     * Construct a new attached property.\n     *\n     * @param options - The options for initializing the property.\n     */\n    function AttachedProperty(options) {\n        this._pid = Private.nextPID();\n        this.name = options.name;\n        this._create = options.create;\n        this._coerce = options.coerce || null;\n        this._compare = options.compare || null;\n        this._changed = options.changed || null;\n    }\n    /**\n     * Get the current value of the property for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * @returns The current value of the property.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and assigned as the current value of the property.\n     */\n    AttachedProperty.prototype.get = function (owner) {\n        var value;\n        var map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            value = map[this._pid];\n        }\n        else {\n            value = map[this._pid] = this._createValue(owner);\n        }\n        return value;\n    };\n    /**\n     * Set the current value of the property for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * @param value - The value for the property.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and used as the previous value for the comparison.\n     */\n    AttachedProperty.prototype.set = function (owner, value) {\n        var oldValue;\n        var map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            oldValue = map[this._pid];\n        }\n        else {\n            oldValue = map[this._pid] = this._createValue(owner);\n        }\n        var newValue = this._coerceValue(owner, value);\n        this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n    };\n    /**\n     * Explicitly coerce the current property value for a given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * #### Notes\n     * If the value has not yet been set, the default value will be\n     * computed and used as the previous value for the comparison.\n     */\n    AttachedProperty.prototype.coerce = function (owner) {\n        var oldValue;\n        var map = Private.ensureMap(owner);\n        if (this._pid in map) {\n            oldValue = map[this._pid];\n        }\n        else {\n            oldValue = map[this._pid] = this._createValue(owner);\n        }\n        var newValue = this._coerceValue(owner, oldValue);\n        this._maybeNotify(owner, oldValue, (map[this._pid] = newValue));\n    };\n    /**\n     * Get or create the default value for the given owner.\n     */\n    AttachedProperty.prototype._createValue = function (owner) {\n        var create = this._create;\n        return create(owner);\n    };\n    /**\n     * Coerce the value for the given owner.\n     */\n    AttachedProperty.prototype._coerceValue = function (owner, value) {\n        var coerce = this._coerce;\n        return coerce ? coerce(owner, value) : value;\n    };\n    /**\n     * Compare the old value and new value for equality.\n     */\n    AttachedProperty.prototype._compareValue = function (oldValue, newValue) {\n        var compare = this._compare;\n        return compare ? compare(oldValue, newValue) : oldValue === newValue;\n    };\n    /**\n     * Run the change notification if the given values are different.\n     */\n    AttachedProperty.prototype._maybeNotify = function (owner, oldValue, newValue) {\n        var changed = this._changed;\n        if (changed && !this._compareValue(oldValue, newValue)) {\n            changed(owner, oldValue, newValue);\n        }\n    };\n    return AttachedProperty;\n}());\n/**\n * The namespace for the `AttachedProperty` class statics.\n */\n(function (AttachedProperty) {\n    /**\n     * Clear the stored property data for the given owner.\n     *\n     * @param owner - The property owner of interest.\n     *\n     * #### Notes\n     * This will clear all property values for the owner, but it will\n     * **not** run the change notification for any of the properties.\n     */\n    function clearData(owner) {\n        Private.ownerData.delete(owner);\n    }\n    AttachedProperty.clearData = clearData;\n})(AttachedProperty || (AttachedProperty = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A weak mapping of property owner to property map.\n     */\n    Private.ownerData = new WeakMap();\n    /**\n     * A function which computes successive unique property ids.\n     */\n    Private.nextPID = (function () {\n        var id = 0;\n        return function () {\n            var rand = Math.random();\n            var stem = (\"\" + rand).slice(2);\n            return \"pid-\" + stem + \"-\" + id++;\n        };\n    })();\n    /**\n     * Lookup the data map for the property owner.\n     *\n     * This will create the map if one does not already exist.\n     */\n    function ensureMap(owner) {\n        var map = Private.ownerData.get(owner);\n        if (map) {\n            return map;\n        }\n        map = Object.create(null);\n        Private.ownerData.set(owner, map);\n        return map;\n    }\n    Private.ensureMap = ensureMap;\n})(Private || (Private = {}));\n\nexport { AttachedProperty };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["Private","AttachedProperty","options","this","_pid","nextPID","name","_create","create","_coerce","coerce","_compare","compare","_changed","changed","prototype","get","owner","map","ensureMap","_createValue","set","value","oldValue","newValue","_coerceValue","_maybeNotify","_compareValue","clearData","ownerData","delete","id","WeakMap","Math","random","slice","Object"],"sourceRoot":""}