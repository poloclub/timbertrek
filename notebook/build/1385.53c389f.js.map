{"version":3,"file":"1385.53c389f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/settings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/tokens.js"],"sourcesContent":["import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport * as json5 from 'json5';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The name of the local storage.\n */\nconst DEFAULT_STORAGE_NAME = 'JupyterLite Storage';\n/**\n * A class to handle requests to /api/settings\n */\nexport class Settings {\n    constructor(options) {\n        this._storageName = DEFAULT_STORAGE_NAME;\n        this._storageDrivers = null;\n        this._localforage = options.localforage;\n        this._storageName = options.storageName || DEFAULT_STORAGE_NAME;\n        this._storageDrivers = options.storageDrivers || null;\n        this._ready = new PromiseDelegate();\n    }\n    /**\n     * A promise that resolves when the settings storage is fully initialized\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * A lazy reference to initialized storage\n     */\n    get storage() {\n        return this.ready.then(() => this._storage);\n    }\n    /**\n     * Finish any initialization after server has started and all extensions are applied.\n     */\n    async initialize() {\n        await this.initStorage();\n        this._ready.resolve(void 0);\n    }\n    /**\n     * Prepare the storage\n     */\n    async initStorage() {\n        this._storage = this.defaultSettingsStorage();\n    }\n    /**\n     * Get default options for localForage instances\n     */\n    get defaultStorageOptions() {\n        var _a;\n        const driver = ((_a = this._storageDrivers) === null || _a === void 0 ? void 0 : _a.length) ? this._storageDrivers : null;\n        return {\n            version: 1,\n            name: this._storageName,\n            ...(driver ? { driver } : {}),\n        };\n    }\n    /**\n     * Create a settings store.\n     */\n    defaultSettingsStorage() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Settings',\n            storeName: 'settings',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Get settings by plugin id\n     *\n     * @param pluginId the id of the plugin\n     *\n     */\n    async get(pluginId) {\n        const all = await this.getAll();\n        const settings = all.settings;\n        let found = settings.find((setting) => {\n            return setting.id === pluginId;\n        });\n        if (!found) {\n            found = await this._getFederated(pluginId);\n        }\n        return found;\n    }\n    /**\n     * Get all the settings\n     */\n    async getAll() {\n        var _a;\n        const settingsUrl = (_a = PageConfig.getOption('settingsUrl')) !== null && _a !== void 0 ? _a : '/';\n        const storage = await this.storage;\n        const all = (await (await fetch(URLExt.join(settingsUrl, 'all.json'))).json());\n        const settings = await Promise.all(all.map(async (plugin) => {\n            var _a;\n            const { id } = plugin;\n            const raw = (_a = (await storage.getItem(id))) !== null && _a !== void 0 ? _a : plugin.raw;\n            return {\n                ...Private.override(plugin),\n                raw,\n                settings: json5.parse(raw),\n            };\n        }));\n        return { settings };\n    }\n    /**\n     * Save settings for a given plugin id\n     *\n     * @param pluginId The id of the plugin\n     * @param raw The raw settings\n     *\n     */\n    async save(pluginId, raw) {\n        await (await this.storage).setItem(pluginId, raw);\n    }\n    /**\n     * Get the settings for a federated extension\n     *\n     * @param pluginId The id of a plugin\n     */\n    async _getFederated(pluginId) {\n        var _a;\n        const [packageName, schemaName] = pluginId.split(':');\n        if (!Private.isFederated(packageName)) {\n            return;\n        }\n        const labExtensionsUrl = PageConfig.getOption('fullLabextensionsUrl');\n        const schemaUrl = URLExt.join(labExtensionsUrl, packageName, 'schemas', packageName, `${schemaName}.json`);\n        const packageUrl = URLExt.join(labExtensionsUrl, packageName, 'package.json');\n        const schema = await (await fetch(schemaUrl)).json();\n        const packageJson = await (await fetch(packageUrl)).json();\n        const raw = (_a = (await (await this.storage).getItem(pluginId))) !== null && _a !== void 0 ? _a : '{}';\n        const settings = json5.parse(raw) || {};\n        return Private.override({\n            id: pluginId,\n            raw,\n            schema,\n            settings,\n            version: packageJson.version || '3.0.8',\n        });\n    }\n}\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    const _overrides = JSON.parse(PageConfig.getOption('settingsOverrides') || '{}');\n    /**\n     * Test whether this package is configured in `federated_extensions` in this app\n     *\n     * @param packageName The npm name of a package\n     */\n    function isFederated(packageName) {\n        let federated;\n        try {\n            federated = JSON.parse(PageConfig.getOption('federated_extensions'));\n        }\n        catch {\n            return false;\n        }\n        for (const { name } of federated) {\n            if (name === packageName) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Private.isFederated = isFederated;\n    /**\n     * Override the defaults of the schema with ones from PageConfig\n     *\n     * @see https://github.com/jupyterlab/jupyterlab_server/blob/v2.5.2/jupyterlab_server/settings_handler.py#L216-L227\n     */\n    function override(plugin) {\n        if (_overrides[plugin.id]) {\n            if (!plugin.schema.properties) {\n                // probably malformed, or only provides keyboard shortcuts, etc.\n                plugin.schema.properties = {};\n            }\n            for (const [prop, propDefault] of Object.entries(_overrides[plugin.id] || {})) {\n                plugin.schema.properties[prop].default = propDefault;\n            }\n        }\n        return plugin;\n    }\n    Private.override = override;\n})(Private || (Private = {}));\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const ISettings = new Token('@jupyterlite/settings:ISettings');\n"],"names":["DEFAULT_STORAGE_NAME","Settings","constructor","options","this","_storageName","_storageDrivers","_localforage","localforage","storageName","storageDrivers","_ready","PromiseDelegate","ready","promise","storage","then","_storage","async","initStorage","resolve","defaultSettingsStorage","defaultStorageOptions","_a","driver","length","version","name","createInstance","description","storeName","pluginId","found","getAll","settings","find","setting","id","_getFederated","settingsUrl","PageConfig","all","fetch","URLExt","json","Promise","map","plugin","raw","getItem","Private","override","setItem","packageName","schemaName","split","isFederated","labExtensionsUrl","schemaUrl","packageUrl","schema","packageJson","_overrides","JSON","parse","federated","properties","prop","propDefault","Object","entries","default","ISettings","Token"],"sourceRoot":""}