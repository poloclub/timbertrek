{"version":3,"file":"2089.459931c.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/logger.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * Log Output Model with timestamp which provides\n * item information for Output Area Model.\n */\nexport class LogOutputModel extends OutputModel {\n    /**\n     * Construct a LogOutputModel.\n     *\n     * @param options - The model initialization options.\n     */\n    constructor(options) {\n        super(options);\n        this.timestamp = new Date(options.value.timestamp);\n        this.level = options.value.level;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area Model\n * which creates LogOutputModel instances.\n */\nclass LogConsoleModelContentFactory extends OutputAreaModel.ContentFactory {\n    /**\n     * Create a rendermime output model from notebook output.\n     */\n    createOutputModel(options) {\n        return new LogOutputModel(options);\n    }\n}\n/**\n * Output Area Model implementation which is able to\n * limit number of outputs stored.\n */\nexport class LoggerOutputAreaModel extends OutputAreaModel {\n    constructor(_a) {\n        var { maxLength } = _a, options = __rest(_a, [\"maxLength\"]);\n        super(options);\n        this.maxLength = maxLength;\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied. Contiguous stream outputs of the same `name`\n     * are combined. The oldest outputs are possibly removed to ensure the total\n     * number of outputs is at most `.maxLength`.\n     */\n    add(output) {\n        super.add(output);\n        this._applyMaxLength();\n        return this.length;\n    }\n    /**\n     * Whether an output should combine with the previous output.\n     *\n     * We combine if the two outputs are in the same second, which is the\n     * resolution for our time display.\n     */\n    shouldCombine(options) {\n        const { value, lastModel } = options;\n        const oldSeconds = Math.trunc(lastModel.timestamp.getTime() / 1000);\n        const newSeconds = Math.trunc(value.timestamp / 1000);\n        return oldSeconds === newSeconds;\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return super.get(index);\n    }\n    /**\n     * Maximum number of outputs to store in the model.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._applyMaxLength();\n    }\n    /**\n     * Manually apply length limit.\n     */\n    _applyMaxLength() {\n        if (this.list.length > this._maxLength) {\n            this.list.removeRange(0, this.list.length - this._maxLength);\n        }\n    }\n}\n/**\n * A concrete implementation of ILogger.\n */\nexport class Logger {\n    /**\n     * Construct a Logger.\n     *\n     * @param source - The name of the log source.\n     */\n    constructor(options) {\n        this._isDisposed = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._rendermime = null;\n        this._version = 0;\n        this._level = 'warning';\n        this.source = options.source;\n        this.outputAreaModel = new LoggerOutputAreaModel({\n            contentFactory: new LogConsoleModelContentFactory(),\n            maxLength: options.maxLength\n        });\n    }\n    /**\n     * The maximum number of outputs stored.\n     *\n     * #### Notes\n     * Oldest entries will be trimmed to ensure the length is at most\n     * `.maxLength`.\n     */\n    get maxLength() {\n        return this.outputAreaModel.maxLength;\n    }\n    set maxLength(value) {\n        this.outputAreaModel.maxLength = value;\n    }\n    /**\n     * The level of outputs logged\n     */\n    get level() {\n        return this._level;\n    }\n    set level(newValue) {\n        const oldValue = this._level;\n        if (oldValue === newValue) {\n            return;\n        }\n        this._level = newValue;\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/plain': `Log level set to ${newValue}`\n                }\n            },\n            level: 'metadata'\n        });\n        this._stateChanged.emit({ name: 'level', oldValue, newValue });\n    }\n    /**\n     * Number of outputs logged.\n     */\n    get length() {\n        return this.outputAreaModel.length;\n    }\n    /**\n     * A signal emitted when the list of log messages changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the log state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * Rendermime to use when rendering outputs logged.\n     */\n    get rendermime() {\n        return this._rendermime;\n    }\n    set rendermime(value) {\n        if (value !== this._rendermime) {\n            const oldValue = this._rendermime;\n            const newValue = (this._rendermime = value);\n            this._stateChanged.emit({ name: 'rendermime', oldValue, newValue });\n        }\n    }\n    /**\n     * The number of messages that have ever been stored.\n     */\n    get version() {\n        return this._version;\n    }\n    /**\n     * Log an output to logger.\n     *\n     * @param log - The output to be logged.\n     */\n    log(log) {\n        // Filter by our current log level\n        if (Private.LogLevel[log.level] <\n            Private.LogLevel[this._level]) {\n            return;\n        }\n        let output = null;\n        switch (log.type) {\n            case 'text':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/plain': log.data\n                    }\n                };\n                break;\n            case 'html':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/html': log.data\n                    }\n                };\n                break;\n            case 'output':\n                output = log.data;\n                break;\n            default:\n                break;\n        }\n        if (output) {\n            this._log({\n                output,\n                level: log.level\n            });\n        }\n    }\n    /**\n     * Clear all outputs logged.\n     */\n    clear() {\n        this.outputAreaModel.clear(false);\n        this._contentChanged.emit('clear');\n    }\n    /**\n     * Add a checkpoint to the log.\n     */\n    checkpoint() {\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/html': '<hr/>'\n                }\n            },\n            level: 'metadata'\n        });\n    }\n    /**\n     * Whether the logger is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the logger.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.clear();\n        this._rendermime = null;\n        Signal.clearData(this);\n    }\n    _log(options) {\n        // First, make sure our version reflects the new message so things\n        // triggering from the signals below have the correct version.\n        this._version++;\n        // Next, trigger any displays of the message\n        this.outputAreaModel.add(Object.assign(Object.assign({}, options.output), { timestamp: Date.now(), level: options.level }));\n        // Finally, tell people that the message was appended (and possibly\n        // already displayed).\n        this._contentChanged.emit('append');\n    }\n}\nvar Private;\n(function (Private) {\n    let LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"debug\"] = 0] = \"debug\";\n        LogLevel[LogLevel[\"info\"] = 1] = \"info\";\n        LogLevel[LogLevel[\"warning\"] = 2] = \"warning\";\n        LogLevel[LogLevel[\"error\"] = 3] = \"error\";\n        LogLevel[LogLevel[\"critical\"] = 4] = \"critical\";\n        LogLevel[LogLevel[\"metadata\"] = 5] = \"metadata\";\n    })(LogLevel = Private.LogLevel || (Private.LogLevel = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=logger.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { Logger } from './logger';\n/**\n * A concrete implementation of ILoggerRegistry.\n */\nexport class LoggerRegistry {\n    /**\n     * Construct a LoggerRegistry.\n     *\n     * @param defaultRendermime - Default rendermime to render outputs\n     * with when logger is not supplied with one.\n     */\n    constructor(options) {\n        this._loggers = new Map();\n        this._registryChanged = new Signal(this);\n        this._isDisposed = false;\n        this._defaultRendermime = options.defaultRendermime;\n        this._maxLength = options.maxLength;\n    }\n    /**\n     * Get the logger for the specified source.\n     *\n     * @param source - The name of the log source.\n     *\n     * @returns The logger for the specified source.\n     */\n    getLogger(source) {\n        const loggers = this._loggers;\n        let logger = loggers.get(source);\n        if (logger) {\n            return logger;\n        }\n        logger = new Logger({ source, maxLength: this.maxLength });\n        logger.rendermime = this._defaultRendermime;\n        loggers.set(source, logger);\n        this._registryChanged.emit('append');\n        return logger;\n    }\n    /**\n     * Get all loggers registered.\n     *\n     * @returns The array containing all registered loggers.\n     */\n    getLoggers() {\n        return Array.from(this._loggers.values());\n    }\n    /**\n     * A signal emitted when the logger registry changes.\n     */\n    get registryChanged() {\n        return this._registryChanged;\n    }\n    /**\n     * The max length for loggers.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._loggers.forEach(logger => {\n            logger.maxLength = value;\n        });\n    }\n    /**\n     * Whether the register is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the registry and all loggers.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._loggers.forEach(x => x.dispose());\n        Signal.clearData(this);\n    }\n}\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The Logger Registry token.\n */\nexport const ILoggerRegistry = new Token('@jupyterlab/logconsole:ILoggerRegistry');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { OutputArea } from '@jupyterlab/outputarea';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { PanelLayout, StackedPanel, Widget } from '@lumino/widgets';\nfunction toTitleCase(value) {\n    return value.length === 0 ? value : value[0].toUpperCase() + value.slice(1);\n}\n/**\n * Log console output prompt implementation\n */\nclass LogConsoleOutputPrompt extends Widget {\n    constructor() {\n        super();\n        this._timestampNode = document.createElement('div');\n        this.node.append(this._timestampNode);\n    }\n    /**\n     * Date & time when output is logged.\n     */\n    set timestamp(value) {\n        this._timestamp = value;\n        this._timestampNode.innerHTML = this._timestamp.toLocaleTimeString();\n        this.update();\n    }\n    /**\n     * Log level\n     */\n    set level(value) {\n        this._level = value;\n        this.node.dataset.logLevel = value;\n        this.update();\n    }\n    update() {\n        if (this._level !== undefined && this._timestamp !== undefined) {\n            this.node.title = `${this._timestamp.toLocaleString()}; ${toTitleCase(this._level)} level`;\n        }\n    }\n}\n/**\n * Output Area implementation displaying log outputs\n * with prompts showing log timestamps.\n */\nclass LogConsoleOutputArea extends OutputArea {\n    /**\n     * Create an output item with a prompt and actual output\n     */\n    createOutputItem(model) {\n        const panel = super.createOutputItem(model);\n        if (panel === null) {\n            // Could not render model\n            return null;\n        }\n        // first widget in panel is prompt of type LoggerOutputPrompt\n        const prompt = panel.widgets[0];\n        prompt.timestamp = model.timestamp;\n        prompt.level = model.level;\n        return panel;\n    }\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area\n * which creates custom output prompts.\n */\nclass LogConsoleContentFactory extends OutputArea.ContentFactory {\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt() {\n        return new LogConsoleOutputPrompt();\n    }\n}\n/**\n * Implements a panel which supports pinning the position to the end if it is\n * scrolled to the end.\n *\n * #### Notes\n * This is useful for log viewing components or chat components that append\n * elements at the end. We would like to automatically scroll when the user\n * has scrolled to the bottom, but not change the scrolling when the user has\n * changed the scroll position.\n */\nexport class ScrollingWidget extends Widget {\n    constructor(_a) {\n        var { content } = _a, options = __rest(_a, [\"content\"]);\n        super(options);\n        this._observer = null;\n        this.addClass('jp-Scrolling');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(content);\n        this._content = content;\n        this._sentinel = document.createElement('div');\n        this.node.appendChild(this._sentinel);\n    }\n    /**\n     * The content widget.\n     */\n    get content() {\n        return this._content;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        // defer so content gets a chance to attach first\n        requestAnimationFrame(() => {\n            this._sentinel.scrollIntoView();\n            this._scrollHeight = this.node.scrollHeight;\n        });\n        // Set up intersection observer for the sentinel\n        if (typeof IntersectionObserver !== 'undefined') {\n            this._observer = new IntersectionObserver(args => {\n                this._handleScroll(args);\n            }, { root: this.node, threshold: 1 });\n            this._observer.observe(this._sentinel);\n        }\n    }\n    onBeforeDetach(msg) {\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n    }\n    onAfterShow(msg) {\n        if (this._tracking) {\n            this._sentinel.scrollIntoView();\n        }\n    }\n    _handleScroll([entry]) {\n        if (entry.isIntersecting) {\n            this._tracking = true;\n        }\n        else if (this.isVisible) {\n            const currentHeight = this.node.scrollHeight;\n            if (currentHeight === this._scrollHeight) {\n                // Likely the user scrolled manually\n                this._tracking = false;\n            }\n            else {\n                // We assume we scrolled because our size changed, so scroll to the end.\n                this._sentinel.scrollIntoView();\n                this._scrollHeight = currentHeight;\n                this._tracking = true;\n            }\n        }\n    }\n}\n/**\n * A StackedPanel implementation that creates Output Areas\n * for each log source and activates as source is switched.\n */\nexport class LogConsolePanel extends StackedPanel {\n    /**\n     * Construct a LogConsolePanel instance.\n     *\n     * @param loggerRegistry - The logger registry that provides\n     * logs to be displayed.\n     */\n    constructor(loggerRegistry, translator) {\n        super();\n        this._outputAreas = new Map();\n        this._source = null;\n        this._sourceChanged = new Signal(this);\n        this._sourceDisplayed = new Signal(this);\n        this._loggersWatched = new Set();\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._loggerRegistry = loggerRegistry;\n        this.addClass('jp-LogConsolePanel');\n        loggerRegistry.registryChanged.connect((sender, args) => {\n            this._bindLoggerSignals();\n        }, this);\n        this._bindLoggerSignals();\n        this._placeholder = new Widget();\n        this._placeholder.addClass('jp-LogConsoleListPlaceholder');\n        this.addWidget(this._placeholder);\n    }\n    /**\n     * The logger registry providing the logs.\n     */\n    get loggerRegistry() {\n        return this._loggerRegistry;\n    }\n    /**\n     * The current logger.\n     */\n    get logger() {\n        if (this.source === null) {\n            return null;\n        }\n        return this.loggerRegistry.getLogger(this.source);\n    }\n    /**\n     * The log source displayed\n     */\n    get source() {\n        return this._source;\n    }\n    set source(name) {\n        if (name === this._source) {\n            return;\n        }\n        const oldValue = this._source;\n        const newValue = (this._source = name);\n        this._showOutputFromSource(newValue);\n        this._handlePlaceholder();\n        this._sourceChanged.emit({ oldValue, newValue, name: 'source' });\n    }\n    /**\n     * The source version displayed.\n     */\n    get sourceVersion() {\n        const source = this.source;\n        return source !== null\n            ? this._loggerRegistry.getLogger(source).version\n            : null;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceChanged() {\n        return this._sourceChanged;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceDisplayed() {\n        return this._sourceDisplayed;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._updateOutputAreas();\n        this._showOutputFromSource(this._source);\n        this._handlePlaceholder();\n    }\n    onAfterShow(msg) {\n        super.onAfterShow(msg);\n        if (this.source !== null) {\n            this._sourceDisplayed.emit({\n                source: this.source,\n                version: this.sourceVersion\n            });\n        }\n    }\n    _bindLoggerSignals() {\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            if (this._loggersWatched.has(logger.source)) {\n                continue;\n            }\n            logger.contentChanged.connect((sender, args) => {\n                this._updateOutputAreas();\n                this._handlePlaceholder();\n            }, this);\n            logger.stateChanged.connect((sender, change) => {\n                if (change.name !== 'rendermime') {\n                    return;\n                }\n                const viewId = `source:${sender.source}`;\n                const outputArea = this._outputAreas.get(viewId);\n                if (outputArea) {\n                    if (change.newValue) {\n                        // cast away readonly\n                        outputArea.rendermime = change.newValue;\n                    }\n                    else {\n                        outputArea.dispose();\n                    }\n                }\n            }, this);\n            this._loggersWatched.add(logger.source);\n        }\n    }\n    _showOutputFromSource(source) {\n        // If the source is null, pick a unique name so all output areas hide.\n        const viewId = source === null ? 'null source' : `source:${source}`;\n        this._outputAreas.forEach((outputArea, name) => {\n            var _a, _b;\n            // Show/hide the output area parents, the scrolling windows.\n            if (outputArea.id === viewId) {\n                (_a = outputArea.parent) === null || _a === void 0 ? void 0 : _a.show();\n                if (outputArea.isVisible) {\n                    this._sourceDisplayed.emit({\n                        source: this.source,\n                        version: this.sourceVersion\n                    });\n                }\n            }\n            else {\n                (_b = outputArea.parent) === null || _b === void 0 ? void 0 : _b.hide();\n            }\n        });\n        const title = source === null\n            ? this._trans.__('Log Console')\n            : this._trans.__('Log: %1', source);\n        this.title.label = title;\n        this.title.caption = title;\n    }\n    _handlePlaceholder() {\n        if (this.source === null) {\n            this._placeholder.node.textContent = this._trans.__('No source selected.');\n            this._placeholder.show();\n        }\n        else if (this._loggerRegistry.getLogger(this.source).length === 0) {\n            this._placeholder.node.textContent = this._trans.__('No log messages.');\n            this._placeholder.show();\n        }\n        else {\n            this._placeholder.hide();\n            this._placeholder.node.textContent = '';\n        }\n    }\n    _updateOutputAreas() {\n        const loggerIds = new Set();\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            const source = logger.source;\n            const viewId = `source:${source}`;\n            loggerIds.add(viewId);\n            // add view for logger if not exist\n            if (!this._outputAreas.has(viewId)) {\n                const outputArea = new LogConsoleOutputArea({\n                    rendermime: logger.rendermime,\n                    contentFactory: new LogConsoleContentFactory(),\n                    model: logger.outputAreaModel\n                });\n                outputArea.id = viewId;\n                // Attach the output area so it is visible, so the accounting\n                // functions below record the outputs actually displayed.\n                const w = new ScrollingWidget({\n                    content: outputArea\n                });\n                this.addWidget(w);\n                this._outputAreas.set(viewId, outputArea);\n                // This is where the source object is associated with the output area.\n                // We capture the source from this environment in the closure.\n                const outputUpdate = (sender) => {\n                    // If the current log console panel source is the source associated\n                    // with this output area, and the output area is visible, then emit\n                    // the logConsolePanel source displayed signal.\n                    if (this.source === source && sender.isVisible) {\n                        // We assume that the output area has been updated to the current\n                        // version of the source.\n                        this._sourceDisplayed.emit({\n                            source: this.source,\n                            version: this.sourceVersion\n                        });\n                    }\n                };\n                // Notify messages were displayed any time the output area is updated\n                // and update for any outputs rendered on construction.\n                outputArea.outputLengthChanged.connect(outputUpdate, this);\n                // Since the output area was attached above, we can rely on its\n                // visibility to account for the messages displayed.\n                outputUpdate(outputArea);\n            }\n        }\n        // remove output areas that do not have corresponding loggers anymore\n        const viewIds = this._outputAreas.keys();\n        for (const viewId of viewIds) {\n            if (!loggerIds.has(viewId)) {\n                const outputArea = this._outputAreas.get(viewId);\n                outputArea === null || outputArea === void 0 ? void 0 : outputArea.dispose();\n                this._outputAreas.delete(viewId);\n            }\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["Private","LogOutputModel","OutputModel","constructor","options","super","this","timestamp","Date","value","level","LogConsoleModelContentFactory","OutputAreaModel","createOutputModel","LoggerOutputAreaModel","_a","maxLength","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","add","output","_applyMaxLength","shouldCombine","lastModel","Math","trunc","getTime","get","index","_maxLength","list","removeRange","Logger","_isDisposed","_contentChanged","Signal","_stateChanged","_rendermime","_version","_level","source","outputAreaModel","contentFactory","newValue","oldValue","_log","output_type","data","emit","name","contentChanged","stateChanged","rendermime","version","log","LogLevel","type","clear","checkpoint","isDisposed","dispose","assign","now","LoggerRegistry","_loggers","Map","_registryChanged","_defaultRendermime","defaultRendermime","getLogger","loggers","logger","set","getLoggers","Array","from","values","registryChanged","forEach","x","ILoggerRegistry","Token","LogConsoleOutputPrompt","Widget","_timestampNode","document","createElement","node","append","_timestamp","innerHTML","toLocaleTimeString","update","dataset","logLevel","undefined","title","toLocaleString","toUpperCase","slice","LogConsoleOutputArea","OutputArea","createOutputItem","model","panel","prompt","widgets","onInputRequest","msg","future","LogConsoleContentFactory","createOutputPrompt","ScrollingWidget","content","_observer","addClass","layout","PanelLayout","addWidget","_content","_sentinel","appendChild","onAfterAttach","requestAnimationFrame","scrollIntoView","_scrollHeight","scrollHeight","IntersectionObserver","args","_handleScroll","root","threshold","observe","onBeforeDetach","disconnect","onAfterShow","_tracking","entry","isIntersecting","isVisible","currentHeight","LogConsolePanel","StackedPanel","loggerRegistry","translator","_outputAreas","_source","_sourceChanged","_sourceDisplayed","_loggersWatched","Set","nullTranslator","_trans","load","_loggerRegistry","connect","sender","_bindLoggerSignals","_placeholder","_showOutputFromSource","_handlePlaceholder","sourceVersion","sourceChanged","sourceDisplayed","_updateOutputAreas","has","change","viewId","outputArea","_b","id","parent","show","hide","__","label","caption","textContent","loggerIds","w","outputUpdate","outputLengthChanged","viewIds","keys","delete"],"sourceRoot":""}