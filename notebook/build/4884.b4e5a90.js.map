{"version":3,"file":"4884.b4e5a90.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/contents.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server-extension/lib/index.js"],"sourcesContent":["import { Token } from '@lumino/coreutils';\n/**\n * The token for the settings service.\n */\nexport const IContents = new Token('@jupyterlite/contents:IContents');\n/**\n * Commonly-used mimetypes\n */\nexport var MIME;\n(function (MIME) {\n    MIME.JS = 'application/javascript';\n    MIME.JSON = 'application/json';\n    MIME.MANIFEST_JSON = 'application/manifest+json';\n    MIME.PLAIN_TEXT = 'text/plain';\n    MIME.PYTHON = 'application/x-python-code';\n    MIME.SVG = 'image/svg+xml';\n    MIME.XML = 'application/xml';\n    /**\n     * A list of mime types of common text file types\n     */\n    MIME.KNOWN_TEXT_TYPES = new Set([\n        MIME.JS,\n        MIME.JSON,\n        MIME.MANIFEST_JSON,\n        MIME.PLAIN_TEXT,\n        MIME.PYTHON,\n        MIME.SVG,\n        MIME.XML,\n    ]);\n    MIME.OCTET_STREAM = 'octet/stream';\n})(MIME || (MIME = {}));\n","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { MIME } from './tokens';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport mime from 'mime';\n/**\n * The name of the local storage.\n */\nconst DEFAULT_STORAGE_NAME = 'JupyterLite Storage';\n/**\n * The number of checkpoints to save.\n */\nconst N_CHECKPOINTS = 5;\n/**\n * A class to handle requests to /api/contents\n */\nexport class Contents {\n    /**\n     * Construct a new localForage-powered contents provider\n     */\n    constructor(options) {\n        /**\n         * A reducer for turning arbitrary binary into a string\n         */\n        this.reduceBytesToString = (data, byte) => {\n            return data + String.fromCharCode(byte);\n        };\n        this._serverContents = new Map();\n        this._storageName = DEFAULT_STORAGE_NAME;\n        this._storageDrivers = null;\n        this._localforage = options.localforage;\n        this._storageName = options.storageName || DEFAULT_STORAGE_NAME;\n        this._storageDrivers = options.storageDrivers || null;\n        this._ready = new PromiseDelegate();\n    }\n    /**\n     * Finish any initialization after server has started and all extensions are applied.\n     */\n    async initialize() {\n        await this.initStorage();\n        this._ready.resolve(void 0);\n    }\n    /**\n     * Initialize all storage instances\n     */\n    async initStorage() {\n        this._storage = this.createDefaultStorage();\n        this._counters = this.createDefaultCounters();\n        this._checkpoints = this.createDefaultCheckpoints();\n    }\n    /**\n     * A promise that resolves once all storage is fully initialized.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * A lazy reference to the underlying storage.\n     */\n    get storage() {\n        return this.ready.then(() => this._storage);\n    }\n    /**\n     * A lazy reference to the underlying counters.\n     */\n    get counters() {\n        return this.ready.then(() => this._counters);\n    }\n    /**\n     * A lazy reference to the underlying checkpoints.\n     */\n    get checkpoints() {\n        return this.ready.then(() => this._checkpoints);\n    }\n    /**\n     * Get default options for localForage instances\n     */\n    get defaultStorageOptions() {\n        const driver = this._storageDrivers && this._storageDrivers.length ? this._storageDrivers : null;\n        return {\n            version: 1,\n            name: this._storageName,\n            ...(driver ? { driver } : {}),\n        };\n    }\n    /**\n     * Initialize the default storage for contents.\n     */\n    createDefaultStorage() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Notebooks and Files',\n            storeName: 'files',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Initialize the default storage for counting file suffixes.\n     */\n    createDefaultCounters() {\n        return this._localforage.createInstance({\n            description: 'Store the current file suffix counters',\n            storeName: 'counters',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Create the default checkpoint storage.\n     */\n    createDefaultCheckpoints() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Checkpoints',\n            storeName: 'checkpoints',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the file is created.\n     */\n    async newUntitled(options) {\n        var _a, _b, _c;\n        const path = (_a = options === null || options === void 0 ? void 0 : options.path) !== null && _a !== void 0 ? _a : '';\n        const type = (_b = options === null || options === void 0 ? void 0 : options.type) !== null && _b !== void 0 ? _b : 'notebook';\n        const created = new Date().toISOString();\n        let dirname = PathExt.dirname(path);\n        const basename = PathExt.basename(path);\n        const extname = PathExt.extname(path);\n        const item = await this.get(dirname);\n        // handle the case of \"Save As\", where the path points to the new file\n        // to create, e.g. subfolder/example-copy.ipynb\n        let name = '';\n        if (path && !extname && item) {\n            // directory\n            dirname = `${path}/`;\n            name = '';\n        }\n        else if (dirname && basename) {\n            // file in a subfolder\n            dirname = `${dirname}/`;\n            name = basename;\n        }\n        else {\n            // file at the top level\n            dirname = '';\n            name = path;\n        }\n        let file;\n        switch (type) {\n            case 'directory': {\n                const counter = await this._incrementCounter('directory');\n                name = `Untitled Folder${counter || ''}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: '',\n                    content: null,\n                    size: undefined,\n                    writable: true,\n                    type: 'directory',\n                };\n                break;\n            }\n            case 'file': {\n                const ext = (_c = options === null || options === void 0 ? void 0 : options.ext) !== null && _c !== void 0 ? _c : '.txt';\n                const counter = await this._incrementCounter('file');\n                name = name || `untitled${counter || ''}${ext}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'text',\n                    // TODO: handle mimetypes\n                    mimetype: MIME.PLAIN_TEXT,\n                    content: '',\n                    size: 0,\n                    writable: true,\n                    type: 'file',\n                };\n                break;\n            }\n            default: {\n                const counter = await this._incrementCounter('notebook');\n                name = name || `Untitled${counter || ''}.ipynb`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: MIME.JSON,\n                    content: Private.EMPTY_NB,\n                    size: JSON.stringify(Private.EMPTY_NB).length,\n                    writable: true,\n                    type: 'notebook',\n                };\n                break;\n            }\n        }\n        const key = file.path;\n        await (await this.storage).setItem(key, file);\n        return file;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    async copy(path, toDir) {\n        let name = PathExt.basename(path);\n        toDir = toDir === '' ? '' : `${toDir.slice(1)}/`;\n        // TODO: better handle naming collisions with existing files\n        while (await this.get(`${toDir}${name}`, { content: true })) {\n            const ext = PathExt.extname(name);\n            const base = name.replace(ext, '');\n            name = `${base} (copy)${ext}`;\n        }\n        const toPath = `${toDir}${name}`;\n        let item = await this.get(path, { content: true });\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        item = {\n            ...item,\n            name,\n            path: toPath,\n        };\n        await (await this.storage).setItem(toPath, item);\n        return item;\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    async get(path, options) {\n        // remove leading slash\n        path = decodeURIComponent(path.replace(/^\\//, ''));\n        if (path === '') {\n            return await this._getFolder(path);\n        }\n        const storage = await this.storage;\n        const item = await storage.getItem(path);\n        const serverItem = await this._getServerContents(path, options);\n        const model = (item || serverItem);\n        if (!model) {\n            return null;\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.content)) {\n            return {\n                ...model,\n                content: null,\n                size: undefined,\n            };\n        }\n        // for directories, find all files with the path as the prefix\n        if (model.type === 'directory') {\n            const contentMap = new Map();\n            await storage.iterate((file, key) => {\n                // use an additional slash to not include the directory itself\n                if (key === `${path}/${file.name}`) {\n                    contentMap.set(file.name, file);\n                }\n            });\n            const serverContents = serverItem\n                ? serverItem.content\n                : Array.from((await this._getServerDirectory(path)).values());\n            for (const file of serverContents) {\n                if (!contentMap.has(file.name)) {\n                    contentMap.set(file.name, file);\n                }\n            }\n            const content = [...contentMap.values()];\n            return {\n                name: PathExt.basename(path),\n                path,\n                last_modified: model.last_modified,\n                created: model.created,\n                format: 'json',\n                mimetype: MIME.JSON,\n                content,\n                size: undefined,\n                writable: true,\n                type: 'directory',\n            };\n        }\n        return model;\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the file is renamed.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const path = decodeURIComponent(oldLocalPath);\n        const file = await this.get(path, { content: true });\n        if (!file) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const modified = new Date().toISOString();\n        const name = PathExt.basename(newLocalPath);\n        const newFile = {\n            ...file,\n            name,\n            path: newLocalPath,\n            last_modified: modified,\n        };\n        const storage = await this.storage;\n        await storage.setItem(newLocalPath, newFile);\n        // remove the old file\n        await storage.removeItem(path);\n        // remove the corresponding checkpoint\n        await (await this.checkpoints).removeItem(path);\n        // if a directory, recurse through all children\n        if (file.type === 'directory') {\n            let child;\n            for (child of file.content) {\n                await this.rename(URLExt.join(oldLocalPath, child.name), URLExt.join(newLocalPath, child.name));\n            }\n        }\n        return newFile;\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the file is saved.\n     */\n    async save(path, options = {}) {\n        var _a;\n        path = decodeURIComponent(path);\n        let item = (await this.get(path)) || (await this.newUntitled({ path }));\n        if (!item) {\n            return null;\n        }\n        // override with the new values\n        const modified = new Date().toISOString();\n        item = {\n            ...item,\n            ...options,\n            last_modified: modified,\n        };\n        // process the file if coming from an upload\n        const ext = PathExt.extname((_a = options.name) !== null && _a !== void 0 ? _a : '');\n        const mimetype = mime.getType(ext) || MIME.OCTET_STREAM;\n        if (options.content && options.format === 'base64') {\n            if (ext === '.ipynb') {\n                item = {\n                    ...item,\n                    content: JSON.parse(this.unescapeContent(options.content)),\n                    format: 'json',\n                    type: 'notebook',\n                };\n            }\n            else if (MIME.KNOWN_TEXT_TYPES.has(mimetype)) {\n                item = {\n                    ...item,\n                    content: this.unescapeContent(options.content),\n                    format: 'text',\n                    type: 'file',\n                };\n            }\n        }\n        await (await this.storage).setItem(path, item);\n        return item;\n    }\n    unescapeContent(content) {\n        return decodeURIComponent(escape(atob(content)));\n    }\n    /**\n     * Delete a file from browser storage.\n     *\n     * Has no effect on server-backed files, which will re-appear with their\n     * original timestamp.\n     *\n     * @param path - The path to the file.\n     */\n    async delete(path) {\n        path = decodeURIComponent(path);\n        const slashed = `${path}/`;\n        const toDelete = (await (await this.storage).keys()).filter((key) => key === path || key.startsWith(slashed));\n        await Promise.all(toDelete.map(this.forgetPath, this));\n    }\n    /**\n     * Remove the localForage and checkpoints for a path.\n     *\n     * @param path - The path to the file\n     */\n    async forgetPath(path) {\n        await Promise.all([\n            (await this.storage).removeItem(path),\n            (await this.checkpoints).removeItem(path),\n        ]);\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    async createCheckpoint(path) {\n        var _a;\n        const checkpoints = await this.checkpoints;\n        path = decodeURIComponent(path);\n        const item = await this.get(path, { content: true });\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const copies = ((_a = (await checkpoints.getItem(path))) !== null && _a !== void 0 ? _a : []).filter(Boolean);\n        copies.push(item);\n        // keep only a certain amount of checkpoints per file\n        if (copies.length > N_CHECKPOINTS) {\n            copies.splice(0, copies.length - N_CHECKPOINTS);\n        }\n        await checkpoints.setItem(path, copies);\n        const id = `${copies.length - 1}`;\n        return { id, last_modified: item.last_modified };\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    async listCheckpoints(path) {\n        const copies = (await (await this.checkpoints).getItem(path)) || [];\n        return copies.filter(Boolean).map(this.normalizeCheckpoint, this);\n    }\n    normalizeCheckpoint(model, id) {\n        return { id: id.toString(), last_modified: model.last_modified };\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    async restoreCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await (await this.checkpoints).getItem(path)) || []);\n        const id = parseInt(checkpointID);\n        const item = copies[id];\n        await (await this.storage).setItem(path, item);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    async deleteCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await (await this.checkpoints).getItem(path)) || []);\n        const id = parseInt(checkpointID);\n        copies.splice(id, 1);\n        await (await this.checkpoints).setItem(path, copies);\n    }\n    /**\n     * retrieve the contents for this path from the union of local storage and\n     * `api/contents/{path}/all.json`.\n     *\n     * @param path - The contents path to retrieve\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getFolder(path) {\n        const content = new Map();\n        const storage = await this.storage;\n        await storage.iterate((file, key) => {\n            if (key.includes('/')) {\n                return;\n            }\n            content.set(file.path, file);\n        });\n        // layer in contents that don't have local overwrites\n        for (const file of (await this._getServerDirectory(path)).values()) {\n            if (!content.has(file.path)) {\n                content.set(file.path, file);\n            }\n        }\n        if (path && content.size === 0) {\n            return null;\n        }\n        return {\n            name: '',\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'json',\n            mimetype: MIME.JSON,\n            content: Array.from(content.values()),\n            size: undefined,\n            writable: true,\n            type: 'directory',\n        };\n    }\n    /**\n     * Attempt to recover the model from `{:path}/__all__.json` file, fall back to\n     * deriving the model (including content) off the file in `/files/`. Otherwise\n     * return `null`.\n     */\n    async _getServerContents(path, options) {\n        const name = PathExt.basename(path);\n        const parentContents = await this._getServerDirectory(URLExt.join(path, '..'));\n        let model = parentContents.get(name);\n        if (!model) {\n            return null;\n        }\n        model = model || {\n            name,\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'text',\n            mimetype: MIME.PLAIN_TEXT,\n            type: 'file',\n            writable: true,\n            content: null,\n        };\n        if (options === null || options === void 0 ? void 0 : options.content) {\n            if (model.type === 'directory') {\n                const serverContents = await this._getServerDirectory(path);\n                model = { ...model, content: Array.from(serverContents.values()) };\n            }\n            else {\n                const fileUrl = URLExt.join(PageConfig.getBaseUrl(), 'files', path);\n                const response = await fetch(fileUrl);\n                if (!response.ok) {\n                    return null;\n                }\n                const mimetype = model.mimetype || response.headers.get('Content-Type');\n                if (model.type === 'notebook' ||\n                    (mimetype === null || mimetype === void 0 ? void 0 : mimetype.indexOf('json')) !== -1 ||\n                    path.match(/\\.(ipynb|[^/]*json[^/]*)$/)) {\n                    model = {\n                        ...model,\n                        content: await response.json(),\n                        format: 'json',\n                        mimetype: model.mimetype || MIME.JSON,\n                    };\n                }\n                else if (mimetype.indexOf('text') !== -1 ||\n                    MIME.KNOWN_TEXT_TYPES.has(mimetype)) {\n                    model = {\n                        ...model,\n                        content: await response.text(),\n                        format: 'text',\n                        mimetype: mimetype || MIME.PLAIN_TEXT,\n                    };\n                }\n                else {\n                    model = {\n                        ...model,\n                        content: btoa(new Uint8Array(await response.arrayBuffer()).reduce(this.reduceBytesToString, '')),\n                        format: 'base64',\n                        mimetype: mimetype || MIME.OCTET_STREAM,\n                    };\n                }\n            }\n        }\n        return model;\n    }\n    /**\n     * retrieve the contents for this path from `__index__.json` in the appropriate\n     * folder.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getServerDirectory(path) {\n        const content = this._serverContents.get(path) || new Map();\n        if (!this._serverContents.has(path)) {\n            const apiURL = URLExt.join(PageConfig.getBaseUrl(), 'api/contents', path, 'all.json');\n            try {\n                const response = await fetch(apiURL);\n                const json = JSON.parse(await response.text());\n                for (const file of json['content']) {\n                    content.set(file.name, file);\n                }\n            }\n            catch (err) {\n                console.warn(`don't worry, about ${err}... nothing's broken. If there had been a\n          file at ${apiURL}, you might see some more files.`);\n            }\n            this._serverContents.set(path, content);\n        }\n        return content;\n    }\n    /**\n     * Increment the counter for a given file type.\n     * Used to avoid collisions when creating new untitled files.\n     *\n     * @param type The file type to increment the counter for.\n     */\n    async _incrementCounter(type) {\n        var _a;\n        const counters = await this.counters;\n        const current = (_a = (await counters.getItem(type))) !== null && _a !== void 0 ? _a : -1;\n        const counter = current + 1;\n        await counters.setItem(type, counter);\n        return counter;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The content for an empty notebook.\n     */\n    Private.EMPTY_NB = {\n        metadata: {\n            orig_nbformat: 4,\n        },\n        nbformat_minor: 4,\n        nbformat: 4,\n        cells: [],\n    };\n})(Private || (Private = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Contents, IContents } from '@jupyterlite/contents';\nimport { IKernels, Kernels, IKernelSpecs, KernelSpecs } from '@jupyterlite/kernel';\nimport { ILicenses, Licenses } from '@jupyterlite/licenses';\nimport { ISessions, Sessions } from '@jupyterlite/session';\nimport { ISettings, Settings } from '@jupyterlite/settings';\nimport { ITranslation, Translation } from '@jupyterlite/translation';\nimport { ILocalForage, ensureMemoryStorage } from '@jupyterlite/localforage';\nimport localforage from 'localforage';\n/**\n * The localforage plugin\n */\nconst localforagePlugin = {\n    id: '@jupyterlite/server-extension:localforage',\n    autoStart: true,\n    provides: ILocalForage,\n    activate: (app) => {\n        return { localforage };\n    },\n};\n/**\n * The volatile localforage memory plugin\n */\nconst localforageMemoryPlugin = {\n    id: '@jupyterlite/server-extension:localforage-memory-storage',\n    autoStart: true,\n    requires: [ILocalForage],\n    activate: async (app, forage) => {\n        if (JSON.parse(PageConfig.getOption('enableMemoryStorage') || 'false')) {\n            console.warn('Memory storage fallback enabled: contents and settings may not be saved');\n            await ensureMemoryStorage(forage.localforage);\n        }\n    },\n};\n/**\n * The contents service plugin.\n */\nconst contentsPlugin = {\n    id: '@jupyterlite/server-extension:contents',\n    requires: [ILocalForage],\n    autoStart: true,\n    provides: IContents,\n    activate: (app, forage) => {\n        const storageName = PageConfig.getOption('contentsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('contentsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const contents = new Contents({\n            storageName,\n            storageDrivers,\n            localforage,\n        });\n        app.started.then(() => contents.initialize().catch(console.warn));\n        return contents;\n    },\n};\n/**\n * A plugin providing the routes for the contents service.\n */\nconst contentsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:contents-routes',\n    autoStart: true,\n    requires: [IContents],\n    activate: (app, contents) => {\n        // GET /api/contents/{path}/checkpoints - Get a list of checkpoints for a file\n        app.router.get('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await contents.listCheckpoints(filename);\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/contents/{path}/checkpoints/{checkpoint_id} - Restore a file to a particular checkpointed state\n        app.router.post('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await contents.restoreCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // POST /api/contents/{path}/checkpoints - Create a new checkpoint for a file\n        app.router.post('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await contents.createCheckpoint(filename);\n            return new Response(JSON.stringify(res), { status: 201 });\n        });\n        // DELETE /api/contents/{path}/checkpoints/{checkpoint_id} - Delete a checkpoint\n        app.router.delete('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await contents.deleteCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // GET /api/contents/{path} - Get contents of file or directory\n        app.router.get('/api/contents(.*)', async (req, filename) => {\n            var _a;\n            const options = {\n                content: ((_a = req.query) === null || _a === void 0 ? void 0 : _a.content) === '1',\n            };\n            const nb = await contents.get(filename, options);\n            if (!nb) {\n                return new Response(null, { status: 404 });\n            }\n            return new Response(JSON.stringify(nb));\n        });\n        // POST /api/contents/{path} - Create a new file in the specified path\n        app.router.post('/api/contents(.*)', async (req, path) => {\n            const options = req.body;\n            const copyFrom = options === null || options === void 0 ? void 0 : options.copy_from;\n            let file;\n            if (copyFrom) {\n                file = await contents.copy(copyFrom, path);\n            }\n            else {\n                file = await contents.newUntitled(options);\n            }\n            if (!file) {\n                return new Response(null, { status: 400 });\n            }\n            return new Response(JSON.stringify(file), { status: 201 });\n        });\n        // PATCH /api/contents/{path} - Rename a file or directory without re-uploading content\n        app.router.patch('/api/contents(.*)', async (req, filename) => {\n            var _a, _b;\n            const newPath = (_b = (_a = req.body) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';\n            filename = filename[0] === '/' ? filename.slice(1) : filename;\n            const nb = await contents.rename(filename, newPath);\n            return new Response(JSON.stringify(nb));\n        });\n        // PUT /api/contents/{path} - Save or upload a file\n        app.router.put('/api/contents/(.+)', async (req, filename) => {\n            const body = req.body;\n            const nb = await contents.save(filename, body);\n            return new Response(JSON.stringify(nb));\n        });\n        // DELETE /api/contents/{path} - Delete a file in the given path\n        app.router.delete('/api/contents/(.+)', async (req, filename) => {\n            await contents.delete(filename);\n            return new Response(null, { status: 204 });\n        });\n    },\n};\n/**\n * The kernels service plugin.\n */\nconst kernelsPlugin = {\n    id: '@jupyterlite/server-extension:kernels',\n    autoStart: true,\n    provides: IKernels,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        return new Kernels({ kernelspecs });\n    },\n};\n/**\n * A plugin providing the routes for the kernels service\n */\nconst kernelsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:kernels-routes',\n    autoStart: true,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        // POST /api/kernels/{kernel_id} - Restart a kernel\n        app.router.post('/api/kernels/(.*)/restart', async (req, kernelId) => {\n            const res = await kernels.restart(kernelId);\n            return new Response(JSON.stringify(res));\n        });\n        // DELETE /api/kernels/{kernel_id} - Kill a kernel and delete the kernel id\n        app.router.delete('/api/kernels/(.*)', async (req, kernelId) => {\n            const res = await kernels.shutdown(kernelId);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n    },\n};\n/**\n * The kernel spec service plugin.\n */\nconst kernelSpecPlugin = {\n    id: '@jupyterlite/server-extension:kernelspec',\n    autoStart: true,\n    provides: IKernelSpecs,\n    activate: (app) => {\n        return new KernelSpecs({});\n    },\n};\n/**\n * A plugin providing the routes for the kernelspec service.\n */\nconst kernelSpecRoutesPlugin = {\n    id: '@jupyterlite/server-extension:kernelspec-routes',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        app.router.get('/api/kernelspecs', async (req) => {\n            const res = kernelspecs.specs;\n            return new Response(JSON.stringify(res));\n        });\n    },\n};\n/**\n * The licenses service plugin\n */\nconst licensesPlugin = {\n    id: '@jupyterlite/server-extension:licenses',\n    autoStart: true,\n    provides: ILicenses,\n    activate: (app) => {\n        return new Licenses();\n    },\n};\n/**\n * A plugin providing the routes for the licenses service.\n */\nconst licensesRoutesPlugin = {\n    id: '@jupyterlite/server-extension:licenses-routes',\n    autoStart: true,\n    requires: [ILicenses],\n    activate(app, licenses) {\n        app.router.get('/api/licenses', async (req) => {\n            const res = await licenses.get();\n            return new Response(JSON.stringify(res));\n        });\n    },\n};\n/**\n * A plugin providing the routes for the nbconvert service.\n * TODO: provide the service in a separate plugin?\n */\nconst nbconvertRoutesPlugin = {\n    id: '@jupyterlite/server-extension:nbconvert-routes',\n    autoStart: true,\n    activate: (app) => {\n        app.router.get('/api/nbconvert', async (req) => {\n            return new Response(JSON.stringify({}));\n        });\n    },\n};\n/**\n * The sessions service plugin.\n */\nconst sessionsPlugin = {\n    id: '@jupyterlite/server-extension:sessions',\n    autoStart: true,\n    provides: ISessions,\n    requires: [IKernels],\n    activate: (app, kernels) => {\n        return new Sessions({ kernels });\n    },\n};\n/**\n * A plugin providing the routes for the session service.\n */\nconst sessionsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:sessions-routes',\n    autoStart: true,\n    requires: [ISessions],\n    activate: (app, sessions) => {\n        // GET /api/sessions/{session} - Get session\n        app.router.get('/api/sessions/(.+)', async (req, id) => {\n            const session = await sessions.get(id);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // GET /api/sessions - List available sessions\n        app.router.get('/api/sessions', async (req) => {\n            const list = await sessions.list();\n            return new Response(JSON.stringify(list), { status: 200 });\n        });\n        // PATCH /api/sessions/{session} - This can be used to rename a session\n        app.router.patch('/api/sessions(.*)', async (req, id) => {\n            const options = req.body;\n            const session = await sessions.patch(options);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // DELETE /api/sessions/{session} - Delete a session\n        app.router.delete('/api/sessions/(.+)', async (req, id) => {\n            await sessions.shutdown(id);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/sessions - Create a new session or return an existing session if a session of the same name already exists\n        app.router.post('/api/sessions', async (req) => {\n            const options = req.body;\n            const session = await sessions.startNew(options);\n            return new Response(JSON.stringify(session), { status: 201 });\n        });\n    },\n};\n/**\n * The settings service plugin.\n */\nconst settingsPlugin = {\n    id: '@jupyterlite/server-extension:settings',\n    autoStart: true,\n    requires: [ILocalForage],\n    provides: ISettings,\n    activate: (app, forage) => {\n        const storageName = PageConfig.getOption('settingsStorageName');\n        const storageDrivers = JSON.parse(PageConfig.getOption('settingsStorageDrivers') || 'null');\n        const { localforage } = forage;\n        const settings = new Settings({ storageName, storageDrivers, localforage });\n        app.started.then(() => settings.initialize().catch(console.warn));\n        return settings;\n    },\n};\n/**\n * A plugin providing the routes for the settings service.\n */\nconst settingsRoutesPlugin = {\n    id: '@jupyterlite/server-extension:settings-routes',\n    autoStart: true,\n    requires: [ISettings],\n    activate: (app, settings) => {\n        // TODO: improve the regex\n        // const pluginPattern = new RegExp(/(?:@([^/]+?)[/])?([^/]+?):(\\w+)/);\n        const pluginPattern = '/api/settings/((?:@([^/]+?)[/])?([^/]+?):([^:]+))$';\n        app.router.get(pluginPattern, async (req, pluginId) => {\n            const setting = await settings.get(pluginId);\n            return new Response(JSON.stringify(setting));\n        });\n        app.router.put(pluginPattern, async (req, pluginId) => {\n            const body = req.body;\n            const { raw } = body;\n            await settings.save(pluginId, raw);\n            return new Response(null, { status: 204 });\n        });\n        app.router.get('/api/settings', async (req) => {\n            const plugins = await settings.getAll();\n            return new Response(JSON.stringify(plugins));\n        });\n    },\n};\n/**\n * The translation service plugin.\n */\nconst translationPlugin = {\n    id: '@jupyterlite/server-extension:translation',\n    autoStart: true,\n    provides: ITranslation,\n    activate: (app) => {\n        const translation = new Translation();\n        app.router.get('/api/translations/?(.*)', async (req, locale) => {\n            const data = await translation.get(locale || 'all');\n            return new Response(JSON.stringify(data));\n        });\n        return translation;\n    },\n};\n/**\n * A plugin providing the routes for the translation service.\n */\nconst translationRoutesPlugin = {\n    id: '@jupyterlite/server-extension:translation-routes',\n    autoStart: true,\n    requires: [ITranslation],\n    activate: (app, translation) => {\n        app.router.get('/api/translations/?(.*)', async (req, locale) => {\n            const data = await translation.get(locale || 'all');\n            return new Response(JSON.stringify(data));\n        });\n    },\n};\nconst plugins = [\n    contentsPlugin,\n    contentsRoutesPlugin,\n    kernelsPlugin,\n    kernelsRoutesPlugin,\n    kernelSpecPlugin,\n    kernelSpecRoutesPlugin,\n    licensesPlugin,\n    licensesRoutesPlugin,\n    localforageMemoryPlugin,\n    localforagePlugin,\n    nbconvertRoutesPlugin,\n    sessionsPlugin,\n    sessionsRoutesPlugin,\n    settingsPlugin,\n    settingsRoutesPlugin,\n    translationPlugin,\n    translationRoutesPlugin,\n];\nexport default plugins;\n"],"names":["IContents","Token","MIME","JS","JSON","MANIFEST_JSON","PLAIN_TEXT","PYTHON","SVG","XML","KNOWN_TEXT_TYPES","Set","OCTET_STREAM","DEFAULT_STORAGE_NAME","Contents","constructor","options","this","reduceBytesToString","data","byte","String","fromCharCode","_serverContents","Map","_storageName","_storageDrivers","_localforage","localforage","storageName","storageDrivers","_ready","PromiseDelegate","async","initStorage","resolve","_storage","createDefaultStorage","_counters","createDefaultCounters","_checkpoints","createDefaultCheckpoints","ready","promise","storage","then","counters","checkpoints","defaultStorageOptions","driver","length","version","name","createInstance","description","storeName","_a","_b","_c","path","type","created","Date","toISOString","dirname","PathExt","basename","extname","item","get","file","_incrementCounter","last_modified","format","mimetype","content","size","undefined","writable","ext","counter","Private","EMPTY_NB","stringify","key","setItem","toDir","slice","base","replace","toPath","Error","decodeURIComponent","_getFolder","getItem","serverItem","_getServerContents","model","contentMap","iterate","set","serverContents","Array","from","_getServerDirectory","values","has","oldLocalPath","newLocalPath","modified","newFile","removeItem","child","rename","URLExt","newUntitled","parse","unescapeContent","escape","atob","slashed","toDelete","keys","filter","startsWith","Promise","all","map","forgetPath","copies","Boolean","push","splice","id","normalizeCheckpoint","toString","checkpointID","parseInt","includes","fileUrl","PageConfig","response","fetch","ok","headers","indexOf","match","json","text","btoa","Uint8Array","arrayBuffer","reduce","apiURL","err","console","warn","metadata","orig_nbformat","nbformat_minor","nbformat","cells","localforagePlugin","autoStart","provides","ILocalForage","activate","app","localforageMemoryPlugin","requires","forage","ensureMemoryStorage","contentsPlugin","contents","started","initialize","catch","contentsRoutesPlugin","router","req","filename","res","listCheckpoints","Response","post","checkpoint","restoreCheckpoint","status","createCheckpoint","delete","deleteCheckpoint","query","nb","body","copyFrom","copy_from","copy","patch","newPath","put","save","kernelsPlugin","IKernels","IKernelSpecs","kernelspecs","Kernels","kernelsRoutesPlugin","kernels","kernelId","restart","shutdown","kernelSpecPlugin","KernelSpecs","kernelSpecRoutesPlugin","specs","licensesPlugin","ILicenses","Licenses","licensesRoutesPlugin","licenses","nbconvertRoutesPlugin","sessionsPlugin","ISessions","Sessions","sessionsRoutesPlugin","sessions","session","list","startNew","settingsPlugin","ISettings","settings","Settings","pluginPattern","pluginId","setting","raw","plugins","getAll","ITranslation","translation","Translation","locale"],"sourceRoot":""}