{"version":3,"file":"170.62841c3.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablemap.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablestring.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/undoablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/modeldb.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservableMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableString]]\n */\nexport class ObservableString {\n    /**\n     * Construct a new observable string.\n     */\n    constructor(initialText = '') {\n        this._text = '';\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._text = initialText;\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'String';\n    }\n    /**\n     * A signal emitted when the string has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Set the value of the string.\n     */\n    set text(value) {\n        if (value.length === this._text.length && value === this._text) {\n            return;\n        }\n        this._text = value;\n        this._changed.emit({\n            type: 'set',\n            start: 0,\n            end: value.length,\n            value: value\n        });\n    }\n    /**\n     * Get the value of the string.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Insert a substring.\n     *\n     * @param index - The starting index.\n     *\n     * @param text - The substring to insert.\n     */\n    insert(index, text) {\n        this._text = this._text.slice(0, index) + text + this._text.slice(index);\n        this._changed.emit({\n            type: 'insert',\n            start: index,\n            end: index + text.length,\n            value: text\n        });\n    }\n    /**\n     * Remove a substring.\n     *\n     * @param start - The starting index.\n     *\n     * @param end - The ending index.\n     */\n    remove(start, end) {\n        const oldValue = this._text.slice(start, end);\n        this._text = this._text.slice(0, start) + this._text.slice(end);\n        this._changed.emit({\n            type: 'remove',\n            start: start,\n            end: end,\n            value: oldValue\n        });\n    }\n    /**\n     * Set the ObservableString to an empty string.\n     */\n    clear() {\n        this.text = '';\n    }\n    /**\n     * Test whether the string has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the string.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n}\n//# sourceMappingURL=observablestring.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * The value -2 as oldIndex can be used to distinguish from the push\n     * method which will use a value -1.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        if (index === this._array.length) {\n            this._array.push(value);\n        }\n        else {\n            ArrayExt.insert(this._array, index, value);\n        }\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Notes\n     * By convention, the oldIndex is set to -1 to indicate\n     * an push operation.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     * By convention, the oldIndex is set to -2 to indicate\n     * an insert operation.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -2,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each } from '@lumino/algorithm';\nimport { ObservableList } from './observablelist';\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList extends ObservableList {\n    /**\n     * Construct a new undoable observable list.\n     */\n    constructor(serializer) {\n        super();\n        this._inCompound = false;\n        this._isUndoable = true;\n        this._madeCompoundChange = false;\n        this._index = -1;\n        this._stack = [];\n        this._serializer = serializer;\n        this.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this._index < this._stack.length - 1;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this._index >= 0;\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._inCompound = true;\n        this._isUndoable = isUndoAble !== false;\n        this._madeCompoundChange = false;\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._inCompound = false;\n        this._isUndoable = true;\n        if (this._madeCompoundChange) {\n            this._index++;\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        if (!this.canUndo) {\n            return;\n        }\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes.reverse()) {\n            this._undoChange(change);\n        }\n        this._isUndoable = true;\n        this._index--;\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        if (!this.canRedo) {\n            return;\n        }\n        this._index++;\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes) {\n            this._redoChange(change);\n        }\n        this._isUndoable = true;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this._index = -1;\n        this._stack = [];\n    }\n    /**\n     * Handle a change in the list.\n     */\n    _onListChanged(list, change) {\n        if (this.isDisposed || !this._isUndoable) {\n            return;\n        }\n        // Clear everything after this position if necessary.\n        if (!this._inCompound || !this._madeCompoundChange) {\n            this._stack = this._stack.slice(0, this._index + 1);\n        }\n        // Copy the change.\n        const evt = this._copyChange(change);\n        // Put the change in the stack.\n        if (this._stack[this._index + 1]) {\n            this._stack[this._index + 1].push(evt);\n        }\n        else {\n            this._stack.push([evt]);\n        }\n        // If not in a compound operation, increase index.\n        if (!this._inCompound) {\n            this._index++;\n        }\n        else {\n            this._madeCompoundChange = true;\n        }\n    }\n    /**\n     * Undo a change event.\n     */\n    _undoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                each(change.newValues, () => {\n                    this.remove(change.newIndex);\n                });\n                break;\n            case 'set':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.set(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'move':\n                this.move(change.newIndex, change.oldIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Redo a change event.\n     */\n    _redoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'set':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.set(change.newIndex++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                each(change.oldValues, () => {\n                    this.remove(change.oldIndex);\n                });\n                break;\n            case 'move':\n                this.move(change.oldIndex, change.newIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Copy a change as JSON.\n     */\n    _copyChange(change) {\n        const oldValues = [];\n        each(change.oldValues, value => {\n            oldValues.push(this._serializer.toJSON(value));\n        });\n        const newValues = [];\n        each(change.newValues, value => {\n            newValues.push(this._serializer.toJSON(value));\n        });\n        return {\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        };\n    }\n}\n/**\n * Namespace for ObservableUndoableList utilities.\n */\n(function (ObservableUndoableList) {\n    /**\n     * A default, identity serializer.\n     */\n    class IdentitySerializer {\n        /**\n         * Identity serialize.\n         */\n        toJSON(value) {\n            return value;\n        }\n        /**\n         * Identity deserialize.\n         */\n        fromJSON(value) {\n            return value;\n        }\n    }\n    ObservableUndoableList.IdentitySerializer = IdentitySerializer;\n})(ObservableUndoableList || (ObservableUndoableList = {}));\n//# sourceMappingURL=undoablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { ObservableJSON } from './observablejson';\nimport { ObservableMap } from './observablemap';\nimport { ObservableString } from './observablestring';\nimport { ObservableUndoableList } from './undoablelist';\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue {\n    /**\n     * Constructor for the value.\n     *\n     * @param initialValue: the starting value for the `ObservableValue`.\n     */\n    constructor(initialValue = null) {\n        this._value = null;\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._value = initialValue;\n    }\n    /**\n     * The observable type.\n     */\n    get type() {\n        return 'Value';\n    }\n    /**\n     * Whether the value has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the current value, or `undefined` if it has not been set.\n     */\n    get() {\n        return this._value;\n    }\n    /**\n     * Set the current value.\n     */\n    set(value) {\n        const oldValue = this._value;\n        if (JSONExt.deepEqual(oldValue, value)) {\n            return;\n        }\n        this._value = value;\n        this._changed.emit({\n            oldValue: oldValue,\n            newValue: value\n        });\n    }\n    /**\n     * Dispose of the resources held by the value.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._value = null;\n    }\n}\n/**\n * The namespace for the `ObservableValue` class statics.\n */\n(function (ObservableValue) {\n    /**\n     * The changed args object emitted by the `IObservableValue`.\n     */\n    class IChangedArgs {\n    }\n    ObservableValue.IChangedArgs = IChangedArgs;\n})(ObservableValue || (ObservableValue = {}));\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB {\n    /**\n     * Constructor for the `ModelDB`.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the model has been populated with\n         * any model values.\n         */\n        this.isPrepopulated = false;\n        /**\n         * Whether the model is collaborative.\n         */\n        this.isCollaborative = false;\n        /**\n         * A promise resolved when the model is connected\n         * to its backend. For the in-memory ModelDB it\n         * is immediately resolved.\n         */\n        this.connected = Promise.resolve(void 0);\n        this._toDispose = false;\n        this._isDisposed = false;\n        this._disposables = new DisposableSet();\n        this._basePath = options.basePath || '';\n        if (options.baseDB) {\n            this._db = options.baseDB;\n        }\n        else {\n            this._db = new ObservableMap();\n            this._toDispose = true;\n        }\n    }\n    /**\n     * The base path for the `ModelDB`. This is prepended\n     * to all the paths that are passed in to the member\n     * functions of the object.\n     */\n    get basePath() {\n        return this._basePath;\n    }\n    /**\n     * Whether the database is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Get a value for a path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns an `IObservable`.\n     */\n    get(path) {\n        return this._db.get(this._resolvePath(path));\n    }\n    /**\n     * Whether the `IModelDB` has an object at this path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns a boolean for whether an object is at `path`.\n     */\n    has(path) {\n        return this._db.has(this._resolvePath(path));\n    }\n    /**\n     * Create a string and insert it in the database.\n     *\n     * @param path: the path for the string.\n     *\n     * @returns the string that was created.\n     */\n    createString(path) {\n        const str = new ObservableString();\n        this._disposables.add(str);\n        this.set(path, str);\n        return str;\n    }\n    /**\n     * Create an undoable list and insert it in the database.\n     *\n     * @param path: the path for the list.\n     *\n     * @returns the list that was created.\n     *\n     * #### Notes\n     * The list can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createList(path) {\n        const vec = new ObservableUndoableList(new ObservableUndoableList.IdentitySerializer());\n        this._disposables.add(vec);\n        this.set(path, vec);\n        return vec;\n    }\n    /**\n     * Create a map and insert it in the database.\n     *\n     * @param path: the path for the map.\n     *\n     * @returns the map that was created.\n     *\n     * #### Notes\n     * The map can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createMap(path) {\n        const map = new ObservableJSON();\n        this._disposables.add(map);\n        this.set(path, map);\n        return map;\n    }\n    /**\n     * Create an opaque value and insert it in the database.\n     *\n     * @param path: the path for the value.\n     *\n     * @returns the value that was created.\n     */\n    createValue(path) {\n        const val = new ObservableValue();\n        this._disposables.add(val);\n        this.set(path, val);\n        return val;\n    }\n    /**\n     * Get a value at a path, or `undefined if it has not been set\n     * That value must already have been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     */\n    getValue(path) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call getValue for an ObservableValue');\n        }\n        return val.get();\n    }\n    /**\n     * Set a value at a path. That value must already have\n     * been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     *\n     * @param value: the new value.\n     */\n    setValue(path, value) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call setValue on an ObservableValue');\n        }\n        val.set(value);\n    }\n    /**\n     * Create a view onto a subtree of the model database.\n     *\n     * @param basePath: the path for the root of the subtree.\n     *\n     * @returns an `IModelDB` with a view onto the original\n     *   `IModelDB`, with `basePath` prepended to all paths.\n     */\n    view(basePath) {\n        const view = new ModelDB({ basePath, baseDB: this });\n        this._disposables.add(view);\n        return view;\n    }\n    /**\n     * Set a value at a path. Not intended to\n     * be called by user code, instead use the\n     * `create*` factory methods.\n     *\n     * @param path: the path to set the value at.\n     *\n     * @param value: the value to set at the path.\n     */\n    set(path, value) {\n        this._db.set(this._resolvePath(path), value);\n    }\n    /**\n     * Dispose of the resources held by the database.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        if (this._toDispose) {\n            this._db.dispose();\n        }\n        this._disposables.dispose();\n    }\n    /**\n     * Compute the fully resolved path for a path argument.\n     */\n    _resolvePath(path) {\n        if (this._basePath) {\n            path = this._basePath + '.' + path;\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=modeldb.js.map"],"names":["Private","ObservableMap","constructor","options","this","_map","Map","_changed","Signal","_isDisposed","_itemCmp","itemCmp","values","key","set","type","changed","isDisposed","size","value","oldVal","get","undefined","Error","emit","oldValue","newValue","has","keys","keyList","forEach","v","k","push","valList","delete","clear","i","length","dispose","first","second","ObservableJSON","super","JSONExt","toJSON","out","Object","create","ChangeMessage","Message","args","ObservableString","initialText","_text","text","start","end","insert","index","slice","remove","ObservableList","_array","each","iter","ArrayIterator","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","removeValue","item","copy","move","fromIndex","toIndex","pushAll","toArray","insertAll","removeRange","startIndex","endIndex","ObservableUndoableList","serializer","_inCompound","_isUndoable","_madeCompoundChange","_index","_stack","_serializer","connect","_onListChanged","canRedo","canUndo","beginCompoundOperation","isUndoAble","endCompoundOperation","undo","changes","change","reverse","_undoChange","redo","_redoChange","clearUndo","list","evt","_copyChange","fromJSON","IdentitySerializer","ObservableValue","initialValue","_value","IChangedArgs","ModelDB","isPrepopulated","isCollaborative","connected","Promise","resolve","_toDispose","_disposables","DisposableSet","_basePath","basePath","baseDB","_db","path","_resolvePath","createString","str","add","createList","vec","createMap","map","createValue","val","getValue","setValue","view"],"sourceRoot":""}