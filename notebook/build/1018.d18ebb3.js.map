{"version":3,"file":"1018.d18ebb3.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/imageviewer-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module imageviewer-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { IImageTracker, ImageViewerFactory } from '@jupyterlab/imageviewer';\nimport { ITranslator } from '@jupyterlab/translation';\n/**\n * The command IDs used by the image widget plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.resetImage = 'imageviewer:reset-image';\n    CommandIDs.zoomIn = 'imageviewer:zoom-in';\n    CommandIDs.zoomOut = 'imageviewer:zoom-out';\n    CommandIDs.flipHorizontal = 'imageviewer:flip-horizontal';\n    CommandIDs.flipVertical = 'imageviewer:flip-vertical';\n    CommandIDs.rotateClockwise = 'imageviewer:rotate-clockwise';\n    CommandIDs.rotateCounterclockwise = 'imageviewer:rotate-counterclockwise';\n    CommandIDs.invertColors = 'imageviewer:invert-colors';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The list of file types for images.\n */\nconst FILE_TYPES = ['png', 'gif', 'jpeg', 'bmp', 'ico', 'tiff'];\n/**\n * The name of the factory that creates image widgets.\n */\nconst FACTORY = 'Image';\n/**\n * The name of the factory that creates image widgets.\n */\nconst TEXT_FACTORY = 'Image (Text)';\n/**\n * The list of file types for images with optional text modes.\n */\nconst TEXT_FILE_TYPES = ['svg', 'xbm'];\n/**\n * The test pattern for text file types in paths.\n */\nconst TEXT_FILE_REGEX = new RegExp(`[.](${TEXT_FILE_TYPES.join('|')})$`);\n/**\n * The image file handler extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/imageviewer-extension:plugin',\n    provides: IImageTracker,\n    requires: [ITranslator],\n    optional: [ICommandPalette, ILayoutRestorer],\n    autoStart: true\n};\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n/**\n * Activate the image widget extension.\n */\nfunction activate(app, translator, palette, restorer) {\n    const trans = translator.load('jupyterlab');\n    const namespace = 'image-widget';\n    function onWidgetCreated(sender, widget) {\n        var _a, _b;\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        void tracker.add(widget);\n        const types = app.docRegistry.getFileTypesForPath(widget.context.path);\n        if (types.length > 0) {\n            widget.title.icon = types[0].icon;\n            widget.title.iconClass = (_a = types[0].iconClass) !== null && _a !== void 0 ? _a : '';\n            widget.title.iconLabel = (_b = types[0].iconLabel) !== null && _b !== void 0 ? _b : '';\n        }\n    }\n    const factory = new ImageViewerFactory({\n        name: FACTORY,\n        modelName: 'base64',\n        fileTypes: [...FILE_TYPES, ...TEXT_FILE_TYPES],\n        defaultFor: FILE_TYPES,\n        readOnly: true\n    });\n    const textFactory = new ImageViewerFactory({\n        name: TEXT_FACTORY,\n        modelName: 'text',\n        fileTypes: TEXT_FILE_TYPES,\n        defaultFor: TEXT_FILE_TYPES,\n        readOnly: true\n    });\n    [factory, textFactory].forEach(factory => {\n        app.docRegistry.addWidgetFactory(factory);\n        factory.widgetCreated.connect(onWidgetCreated);\n    });\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    if (restorer) {\n        // Handle state restoration.\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({\n                path: widget.context.path,\n                factory: TEXT_FILE_REGEX.test(widget.context.path)\n                    ? TEXT_FACTORY\n                    : FACTORY\n            }),\n            name: widget => widget.context.path\n        });\n    }\n    addCommands(app, tracker, translator);\n    if (palette) {\n        const category = trans.__('Image Viewer');\n        [\n            CommandIDs.zoomIn,\n            CommandIDs.zoomOut,\n            CommandIDs.resetImage,\n            CommandIDs.rotateClockwise,\n            CommandIDs.rotateCounterclockwise,\n            CommandIDs.flipHorizontal,\n            CommandIDs.flipVertical,\n            CommandIDs.invertColors\n        ].forEach(command => {\n            palette.addItem({ command, category });\n        });\n    }\n    return tracker;\n}\n/**\n * Add the commands for the image widget.\n */\nexport function addCommands(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    /**\n     * Whether there is an active image viewer.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    commands.addCommand('imageviewer:zoom-in', {\n        execute: zoomIn,\n        label: trans.__('Zoom In'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:zoom-out', {\n        execute: zoomOut,\n        label: trans.__('Zoom Out'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:reset-image', {\n        execute: resetImage,\n        label: trans.__('Reset Image'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:rotate-clockwise', {\n        execute: rotateClockwise,\n        label: trans.__('Rotate Clockwise'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:rotate-counterclockwise', {\n        execute: rotateCounterclockwise,\n        label: trans.__('Rotate Counterclockwise'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:flip-horizontal', {\n        execute: flipHorizontal,\n        label: trans.__('Flip image horizontally'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:flip-vertical', {\n        execute: flipVertical,\n        label: trans.__('Flip image vertically'),\n        isEnabled\n    });\n    commands.addCommand('imageviewer:invert-colors', {\n        execute: invertColors,\n        label: trans.__('Invert Colors'),\n        isEnabled\n    });\n    function zoomIn() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.scale = widget.scale > 1 ? widget.scale + 0.5 : widget.scale * 2;\n        }\n    }\n    function zoomOut() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.scale = widget.scale > 1 ? widget.scale - 0.5 : widget.scale / 2;\n        }\n    }\n    function resetImage() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.scale = 1;\n            widget.colorinversion = 0;\n            widget.resetRotationFlip();\n        }\n    }\n    function rotateClockwise() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.rotateClockwise();\n        }\n    }\n    function rotateCounterclockwise() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.rotateCounterclockwise();\n        }\n    }\n    function flipHorizontal() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.flipHorizontal();\n        }\n    }\n    function flipVertical() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.flipVertical();\n        }\n    }\n    function invertColors() {\n        var _a;\n        const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n        if (widget) {\n            widget.colorinversion += 1;\n            widget.colorinversion %= 2;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","resetImage","zoomIn","zoomOut","flipHorizontal","flipVertical","rotateClockwise","rotateCounterclockwise","invertColors","FILE_TYPES","FACTORY","TEXT_FACTORY","TEXT_FILE_TYPES","TEXT_FILE_REGEX","RegExp","join","activate","app","translator","palette","restorer","trans","load","onWidgetCreated","sender","widget","_a","_b","context","pathChanged","connect","tracker","save","add","types","docRegistry","getFileTypesForPath","path","length","title","icon","iconClass","iconLabel","ImageViewerFactory","name","modelName","fileTypes","defaultFor","readOnly","forEach","factory","addWidgetFactory","widgetCreated","WidgetTracker","namespace","restore","command","args","test","addCommands","category","__","addItem","id","provides","IImageTracker","requires","ITranslator","optional","ICommandPalette","ILayoutRestorer","autoStart","commands","shell","isEnabled","currentWidget","addCommand","execute","content","scale","label","colorinversion","resetRotationFlip"],"sourceRoot":""}