{"version":3,"file":"9341.ae2ac99.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, folderIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_HOME_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, localPath);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_HOME_CLASS)) {\n                const index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                this._model\n                    .cd(BREAD_CRUMB_PATHS[index])\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, path) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the home node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        node.appendChild(separators[0]);\n        const parts = path.split('/');\n        if (parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (path) {\n            if (parts.length >= 2) {\n                breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                node.appendChild(breadcrumbs[Crumb.Parent]);\n                const parent = parts.slice(0, parts.length - 1).join('/');\n                breadcrumbs[Crumb.Parent].title = parent;\n                node.appendChild(separators[2]);\n            }\n            breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n            node.appendChild(breadcrumbs[Crumb.Current]);\n            breadcrumbs[Crumb.Current].title = path;\n            node.appendChild(separators[3]);\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = folderIcon.element({\n            className: BREADCRUMB_HOME_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        return [home, ellipsis, parent, current];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, ArrayIterator, each, filter, find, StringExt, toArray } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the narrow column header cell.\n */\nconst NARROW_ID_CLASS = 'jp-id-narrow';\n/**\n * The class name added to the modified column header cell and modified item cell when hidden.\n */\nconst MODIFIED_COLUMN_HIDDEN = 'jp-LastModified-hidden';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added for a descending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this.selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this._hiddenColumns = new Set();\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        this._renderer.populateHeaderNode(headerNode, this.translator, this._hiddenColumns);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this.selection[item.path]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return new ArrayIterator(this._sortedItems);\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        each(this._clipboard, path => {\n            if (this._isCut) {\n                const parts = path.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        });\n        // Remove any cut modifiers.\n        each(this._items, item => {\n            item.classList.remove(CUT_CLASS);\n        });\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this.selection[item.path]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ],\n            // By default focus on \"Cancel\" to protect from accidental deletion\n            // (\"delete\" and \"Enter\" are next to each other on many keyboards).\n            defaultButton: 0\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        each(this.selectedItems(), item => {\n            if (item.type !== 'directory') {\n                promises.push(this._model.manager.copy(item.path, basePath));\n            }\n        });\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(toArray(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = toArray(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this.selection[items[index].path];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        const items = this._sortedItems;\n        return (toArray(filter(items, item => item.name === name && this.selection[item.path])).length !== 0);\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this.selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus the selected item.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name, focus = false) {\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false, focus);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this.evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this.evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this.evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this.evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this.evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this.evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this.evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode(this._hiddenColumns);\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        // Remove extra classes from the nodes.\n        nodes.forEach(item => {\n            item.classList.remove(SELECTED_CLASS);\n            item.classList.remove(RUNNING_CLASS);\n            item.classList.remove(CUT_CLASS);\n        });\n        // Add extra classes to item nodes based on widget state.\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            renderer.updateItemNode(node, item, ft, this.translator, this._hiddenColumns);\n            if (this.selection[item.path]) {\n                node.classList.add(SELECTED_CLASS);\n                if (this._isCut && this._model.path === this._prevPath) {\n                    node.classList.add(CUT_CLASS);\n                }\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this.selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        each(this._model.sessions(), session => {\n            var _a;\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : 'unknown'; // FIXME-TRANS: Is this localizable?\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        });\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this.toggleClass('jp-DirListing-narrow', width < 250);\n    }\n    setColumnVisibility(name, visible) {\n        if (visible) {\n            this._hiddenColumns.delete(name);\n        }\n        else {\n            this._hiddenColumns.add(name);\n        }\n        this.headerNode.innerHTML = '';\n        this._renderer.populateHeaderNode(this.headerNode, this.translator, this._hiddenColumns);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        if (header.contains(target)) {\n            const state = this.renderer.handleHeaderClick(header, event);\n            if (state) {\n                this.sort(state);\n            }\n            return;\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            return;\n        }\n        this.handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this.selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Re-focus the selected file. This is needed because nodes corresponding\n        // to files selected in mousedown handler will not retain the focus\n        // as mousedown event is always followed by a blur/focus event.\n        if (event.button === 0) {\n            this._focusSelectedFile();\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    evtKeydown(event) {\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                const selected = Object.keys(this.selection);\n                const path = selected[0];\n                const items = this._sortedItems;\n                const i = ArrayExt.findFirstIndex(items, value => value.path === path);\n                if (i === -1) {\n                    return;\n                }\n                const item = this._sortedItems[i];\n                this.handleOpen(item);\n                break;\n            }\n            case 38: // Up arrow\n                this.selectPrevious(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 40: // Down arrow\n                this.selectNext(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (!this._inRename && event.key !== undefined && event.key.length === 1) {\n            if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                return;\n            }\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this.handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    evtNativeDrop(event) {\n        var _a, _b, _c;\n        const files = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n        const length = (_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items.length;\n        if (!length) {\n            return;\n        }\n        for (let i = 0; i < length; i++) {\n            let entry = (_c = event.dataTransfer) === null || _c === void 0 ? void 0 : _c.items[i].webkitGetAsEntry();\n            if (entry.isDirectory) {\n                console.log('currently not supporting drag + drop for folders');\n                void showDialog({\n                    title: this._trans.__('Error Uploading Folder'),\n                    body: this._trans.__('Drag and Drop is currently not supported for folders'),\n                    buttons: [Dialog.cancelButton({ label: this._trans.__('Close') })]\n                });\n            }\n        }\n        event.preventDefault();\n        for (let i = 0; i < files.length; i++) {\n            void this._model.upload(files[i]);\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this.selection[item.path]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedPaths = Object.keys(this.selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedPaths = [item.path];\n            selectedItems = [item];\n        }\n        else {\n            const path = selectedPaths[0];\n            item = find(items, value => value.path === path);\n            selectedItems = toArray(this.selectedItems());\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedPaths.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        this._drag.mimeData.setData(CONTENTS_MIME, selectedPaths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = selectedPaths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const path = items[index].path;\n        const selected = Object.keys(this.selection);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) || (!IS_MAC && event.ctrlKey)) {\n            if (this.selection[path]) {\n                delete this.selection[path];\n            }\n            else {\n                this.selection[path] = true;\n            }\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(selected, index);\n            // Handle a 'soft' selection\n        }\n        else if (path in this.selection && selected.length > 1) {\n            this._softSelection = path;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            return this._selectItem(index, false);\n        }\n        this.update();\n    }\n    /**\n     * (Re-)focus on the selected file.\n     *\n     * If index is not given, it will be inferred from the current selection;\n     * providing index saves on the iteration time.\n     */\n    _focusSelectedFile(index) {\n        if (typeof index === 'undefined') {\n            const selected = Object.keys(this.selection);\n            if (selected.length > 1) {\n                // Multiselect - do not focus on any single file\n                return;\n            }\n            index = ArrayExt.findFirstIndex(this._sortedItems, value => value.path === selected[0]);\n        }\n        if (index === -1) {\n            return;\n        }\n        // Focus on text to make shortcuts works\n        const node = this._items[index];\n        const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        if (text) {\n            text.focus();\n        }\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(selected, index) {\n        // Find the \"nearest selected\".\n        const items = this._sortedItems;\n        let nearestIndex = -1;\n        for (let i = 0; i < this._items.length; i++) {\n            if (i === index) {\n                continue;\n            }\n            const path = items[i].path;\n            if (selected.indexOf(path) !== -1) {\n                if (nearestIndex === -1) {\n                    nearestIndex = i;\n                }\n                else {\n                    if (Math.abs(index - i) < Math.abs(nearestIndex - i)) {\n                        nearestIndex = i;\n                    }\n                }\n            }\n        }\n        // Default to the first element (and fill down).\n        if (nearestIndex === -1) {\n            nearestIndex = 0;\n        }\n        // Select the rows between the current and the nearest selected.\n        for (let i = 0; i < this._items.length; i++) {\n            if ((nearestIndex >= i && index <= i) ||\n                (nearestIndex <= i && index >= i)) {\n                this.selection[items[i].path] = true;\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        each(this.selectedItems(), item => {\n            this._clipboard.push(item.path);\n        });\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    _doRename() {\n        this._inRename = true;\n        const items = this._sortedItems;\n        const path = Object.keys(this.selection)[0];\n        const index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        this._editNode.value = original;\n        this._selectItem(index, false);\n        return Private.doRename(nameNode, this._editNode, original).then(newName => {\n            this.node.focus();\n            if (!newName || newName === original) {\n                this._inRename = false;\n                return original;\n            }\n            if (!isValidFileName(newName)) {\n                void showErrorMessage(this._trans.__('Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n                this._inRename = false;\n                return original;\n            }\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            const promise = renameFile(manager, oldPath, newPath);\n            return promise\n                .catch(error => {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                this._inRename = false;\n                return original;\n            })\n                .then(() => {\n                if (this.isDisposed) {\n                    this._inRename = false;\n                    throw new Error('File browser is disposed.');\n                }\n                if (this._inRename) {\n                    // No need to catch because `newName` will always exit.\n                    void this.selectItemByName(newName);\n                }\n                this._inRename = false;\n                return newName;\n            });\n        });\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting, focus = true) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const path = items[index].path;\n        this.selection[path] = true;\n        if (!keepExisting && focus) {\n            this._focusSelectedFile(index);\n        }\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this.selection);\n        this.clearSelectedItems();\n        each(this._model.items(), item => {\n            const path = item.path;\n            if (existing.indexOf(path) !== -1) {\n                this.selection[path] = true;\n            }\n        });\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            node.tabIndex = 0;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const name = this.createHeaderItemNode(trans.__('Name'));\n            const narrow = document.createElement('div');\n            const modified = this.createHeaderItemNode(trans.__('Last Modified'));\n            name.classList.add(NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            modified.classList.add(MODIFIED_ID_CLASS);\n            narrow.classList.add(NARROW_ID_CLASS);\n            narrow.textContent = '...';\n            node.appendChild(name);\n            node.appendChild(narrow);\n            node.appendChild(modified);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            if (name.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                if (name.classList.contains(SELECTED_CLASS)) {\n                    if (!name.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        name.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'down');\n                    }\n                    else {\n                        name.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'up');\n                    }\n                }\n                else {\n                    name.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(nameIcon, 'right', 'up');\n                }\n                name.classList.add(SELECTED_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(modifiedIcon, 'left');\n                return state;\n            }\n            if (modified.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                state.key = 'last_modified';\n                if (modified.classList.contains(SELECTED_CLASS)) {\n                    if (!modified.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        modified.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'down');\n                    }\n                    else {\n                        modified.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    modified.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(modifiedIcon, 'left', 'up');\n                }\n                modified.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                return state;\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode(hiddenColumns) {\n            var _a;\n            const node = document.createElement('li');\n            const icon = document.createElement('span');\n            const text = document.createElement('span');\n            const modified = document.createElement('span');\n            icon.className = ITEM_ICON_CLASS;\n            text.className = ITEM_TEXT_CLASS;\n            modified.className = ITEM_MODIFIED_CLASS;\n            node.appendChild(icon);\n            node.appendChild(text);\n            node.appendChild(modified);\n            // Make the text note focusable so that it receives keyboard events;\n            // text node was specifically chosen to receive shortcuts because\n            // text element gets substituted with input area during file name edits\n            // which conveniently deactivate irrelevant shortcuts.\n            text.tabIndex = 0;\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            return node;\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            if (text) {\n                const indices = !model.indices ? [] : model.indices;\n                let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            let modText = '';\n            let modTitle = '';\n            if (model.last_modified) {\n                modText = Time.formatHuman(new Date(model.last_modified));\n                modTitle = Time.format(new Date(model.last_modified), 'lll');\n            }\n            modified.textContent = modText;\n            modified.title = modTitle;\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const modified = DOMUtils.findElement(dragImage, ITEM_MODIFIED_CLASS);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            dragImage.removeChild(modified);\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function doRename(text, edit, original) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise((resolve, reject) => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.value = original;\n                        edit.blur();\n                        break;\n                    case 38: // Up arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = 0;\n                        }\n                        break;\n                    case 40: // Down arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = edit.value.length;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.doRename = doRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state) {\n        const copy = toArray(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        if (state.key === 'last_modified') {\n            // Sort by last modified (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                const valA = new Date(a.last_modified).getTime();\n                const valB = new Date(b.last_modified).getTime();\n                return t1 - t2 || (valA - valB) * reverse;\n            });\n        }\n        else {\n            // Sort by name (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                return t1 - t2 || b.name.localeCompare(a.name) * reverse;\n            });\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 Bytes';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem',\n                float\n            });\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage, ToolbarButton } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { FilenameSearcher, showErrorMessage, Toolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\nimport { Uploader } from './upload';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends Widget {\n    /**\n     * Construct a new file browser.\n     *\n     * @param options - The file browser options.\n     */\n    constructor(options) {\n        super();\n        this._showLastModifiedColumn = true;\n        this._useFuzzyFilter = true;\n        this._showHiddenFiles = false;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.id = options.id;\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        const translator = this.translator;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this.translator = options.translator || nullTranslator;\n        this._manager = model.manager;\n        this._trans = this.translator.load('jupyterlab');\n        this.crumbs = new BreadCrumbs({ model, translator });\n        this.toolbar = new Toolbar();\n        // a11y\n        this.toolbar.node.setAttribute('role', 'navigation');\n        this.toolbar.node.setAttribute('aria-label', this._trans.__('file browser'));\n        this._directoryPending = false;\n        const newFolder = new ToolbarButton({\n            icon: newFolderIcon,\n            onClick: () => {\n                this.createNewDirectory();\n            },\n            tooltip: this._trans.__('New Folder')\n        });\n        const uploader = new Uploader({ model, translator: this.translator });\n        const refresher = new ToolbarButton({\n            icon: refreshIcon,\n            onClick: () => {\n                void model.refresh();\n            },\n            tooltip: this._trans.__('Refresh File List')\n        });\n        this.toolbar.addItem('newFolder', newFolder);\n        this.toolbar.addItem('upload', uploader);\n        this.toolbar.addItem('refresher', refresher);\n        this.listing = this.createDirListing({\n            model,\n            renderer,\n            translator: this.translator\n        });\n        this._filenameSearcher = FilenameSearcher({\n            updateFilter: (filterFn) => {\n                this.listing.model.setFilter(value => {\n                    return filterFn(value.name.toLowerCase());\n                });\n            },\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name')\n        });\n        this.crumbs.addClass(CRUMBS_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.listing.addClass(LISTING_CLASS);\n        this.layout = new PanelLayout();\n        this.layout.addWidget(this.toolbar);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to show the last modified column\n     */\n    get showLastModifiedColumn() {\n        return this._showLastModifiedColumn;\n    }\n    set showLastModifiedColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('last_modified', value);\n            this._showLastModifiedColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to use fuzzy filtering on file names.\n     */\n    set useFuzzyFilter(value) {\n        this._useFuzzyFilter = value;\n        this._filenameSearcher = FilenameSearcher({\n            updateFilter: (filterFn) => {\n                this.listing.model.setFilter(value => {\n                    return filterFn(value.name.toLowerCase());\n                });\n            },\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name'),\n            forceRefresh: true\n        });\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.layout.removeWidget(this._filenameSearcher);\n        this.layout.removeWidget(this.crumbs);\n        this.layout.removeWidget(this.listing);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n    }\n    /**\n     * Whether to show hidden files\n     */\n    get showHiddenFiles() {\n        return this._showHiddenFiles;\n    }\n    set showHiddenFiles(value) {\n        this.model.showHiddenFiles(value);\n        this._showHiddenFiles = value;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this.listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this.listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this.listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this.listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this.listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this.listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this.listing.paste();\n    }\n    /**\n     * Create a new directory\n     */\n    createNewDirectory() {\n        if (this._directoryPending === true) {\n            return;\n        }\n        this._directoryPending = true;\n        // TODO: We should provide a hook into when the\n        // directory is done being created. This probably\n        // means storing a pendingDirectory promise and\n        // returning that if there is already a directory\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'directory'\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._directoryPending = false;\n        })\n            .catch(err => {\n            void showErrorMessage(this._trans.__('Error'), err);\n            this._directoryPending = false;\n        });\n    }\n    /**\n     * Create a new file\n     */\n    createNewFile(options) {\n        if (this._filePending === true) {\n            return;\n        }\n        this._filePending = true;\n        // TODO: We should provide a hook into when the\n        // file is done being created. This probably\n        // means storing a pendingFile promise and\n        // returning that if there is already a file\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'file',\n            ext: options.ext\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._filePending = false;\n        })\n            .catch(err => {\n            void showErrorMessage(this._trans.__('Error'), err);\n            this._filePending = false;\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this.listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this.listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this.listing.download();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this.listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this.listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this.listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this.listing.modelForClick(event);\n    }\n    /**\n     * Create the underlying DirListing instance.\n     *\n     * @param options - The DirListing constructor options.\n     *\n     * @returns The created DirListing instance.\n     */\n    createDirListing(options) {\n        return new DirListing(options);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, ArrayIterator, each, filter, find } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        this._model = {\n            path: this.rootPath,\n            name: PathExt.basename(this.rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this.onFileChanged, this);\n        services.sessions.runningChanged.connect(this.onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * Get the root path\n     */\n    get rootPath() {\n        return this._driveName ? this._driveName + ':' : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return new ArrayIterator(this._uploads);\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return new ArrayIterator(this._items);\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return new ArrayIterator(this._sessions);\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path - The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(newValue = '.') {\n        if (newValue !== '.') {\n            newValue = this.manager.services.contents.resolvePath(this._model.path, newValue);\n        }\n        else {\n            newValue = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (newValue === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = newValue;\n        if (oldValue !== newValue) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(newValue, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== newValue) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path: newValue });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue\n                });\n            }\n            this.onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response &&\n                error.response.status === 404 &&\n                newValue !== '/') {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (find(this._items, i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked) {\n        // Gather the file model parameters.\n        let path = this._model.path;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const value = oldValue && oldValue.path && PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue && newValue.path && PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        each(models, model => {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        });\n    }\n}\n/**\n * File browser model where hidden files inclusion can be toggled on/off.\n */\nexport class TogglableHiddenFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._includeHiddenFiles = options.includeHiddenFiles || false;\n    }\n    /**\n     * Create an iterator over the model's items filtering hidden files out if necessary.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._includeHiddenFiles\n            ? super.items()\n            : filter(super.items(), value => !value.name.startsWith('.'));\n    }\n    /**\n     * Set the inclusion of hidden files. Triggers a model refresh.\n     */\n    showHiddenFiles(value) {\n        this._includeHiddenFiles = value;\n        void this.refresh();\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends TogglableHiddenFileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._filter = options.filter ? options.filter : model => true;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), (value, index) => {\n            if (value.type === 'directory') {\n                return true;\n            }\n            else {\n                return this._filter(value);\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { toArray } from '@lumino/algorithm';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: new OpenDialog(options.manager, options.filter, translator)\n        };\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles(Object.assign(Object.assign({}, options), { filter: model => false }));\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator) {\n        super();\n        translator = translator || nullTranslator;\n        this.addClass(OPEN_DIALOG_CLASS);\n        this._browser = Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator);\n        // Build the sub widgets\n        const layout = new PanelLayout();\n        layout.addWidget(this._browser);\n        // Set Widget content\n        this.layout = layout;\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = toArray(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = (id, manager, filter, options = {}, translator) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The path tracker token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeAt(this._items, idx);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"names":["BREADCRUMB_HOME_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","constructor","options","super","this","translator","nullTranslator","_trans","load","_model","model","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","node","appendChild","Crumb","Home","refreshed","connect","update","handleEvent","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","onUpdateRequest","localPath","manager","services","contents","path","updateCrumbs","button","target","classList","contains","index","ArrayExt","value","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","parentElement","mimeData","hasData","ElementExt","clientX","clientY","Current","add","dropTarget","DOMUtils","remove","dropAction","proposedAction","PathExt","promises","oldPaths","getData","oldPath","localOldPath","name","newPath","push","renameFile","Promise","all","err","breadcrumbs","separators","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","join","title","Parent","textContent","parent","home","folderIcon","className","tag","PageConfig","stylesheet","ellipsis","ellipsesIcon","document","createElement","current","items","i","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","MODIFIED_COLUMN_HIDDEN","SELECTED_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","_hiddenColumns","Set","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","contentNode","sortState","onItemOpened","selectedItems","filter","sortedItems","ArrayIterator","sort","state","rename","_doRename","cut","_copy","copy","paste","resolve","undefined","basePath","each","removeClass","then","_p","async","message","_n","result","showDialog","body","buttons","Dialog","label","defaultButton","isDisposed","accept","_delete","map","duplicate","toArray","download","shutdownKernels","paths","sessions","session","shutdown","id","selectNext","keepExisting","selected","keys","_selectItem","selectPrevious","selectByPrefix","prefix","toLowerCase","substr","isSelected","modelForClick","hitTestNodes","clearSelectedItems","focus","refresh","Error","MessageLoop","_evtMousedown","_evtMouseup","_evtMousemove","evtKeydown","evtDblClick","evtNativeDrop","_evtScroll","evtDragEnter","evtDragLeave","evtDragOver","evtDrop","content","onAfterShow","nodes","pop","createItemNode","forEach","ft","registry","getFileTypeForModel","updateItemNode","setAttribute","_a","kernel","specs","spec","kernelspecs","display_name","onResize","width","getBoundingClientRect","toggleClass","setColumnVisibility","visible","delete","innerHTML","header","handleHeaderClick","scrollLeft","blur","clearTimeout","handleFileSelect","ctrlKey","pressX","pressY","metaKey","shiftKey","_focusSelectedFile","data","dx","Math","abs","dy","_startDrag","handleOpen","emit","openOrReveal","keyCode","altKey","window","setTimeout","_b","_c","files","dataTransfer","webkitGetAsEntry","isDirectory","console","log","upload","selectedPaths","source","find","dragImage","createDragImage","Drag","MimeData","supportedActions","setData","withContent","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","promise","prevWidget","ref","mode","start","action","_handleMultiSelect","text","nearestIndex","indexOf","deleteFile","row","nameNode","getNameNode","original","doRename","newName","isValidFileName","selectItemByName","existing","isVisible","sender","args","newValue","basename","Renderer","tabIndex","hiddenColumns","trans","createHeaderItemNode","narrow","modified","has","call","updateCaret","modifiedIcon","nameIcon","icon","fileType","DocumentRegistry","iconClass","iconContainer","LabIcon","classes","container","hoverText","size","formatFileSize","dirname","created","Time","Date","last_modified","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","h","VirtualDOM","modText","modTitle","count","cloneNode","iconLabel","edit","replaceChild","lastIndexOf","setSelectionRange","reject","onblur","onkeydown","selectionStart","selectionEnd","a","b","t1","t2","valA","getTime","valB","localeCompare","bytes","decimalPoint","k","dm","sizes","floor","parseFloat","pow","toFixed","String","float","caretDownIcon","caretUpIcon","element","Uploader","ToolbarButton","fileUploadIcon","onClick","_input","click","tooltip","translateToolTip","_onInputChanged","pending","Array","prototype","file","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FILTERBOX_CLASS","FileBrowser","_showLastModifiedColumn","_useFuzzyFilter","_showHiddenFiles","connectionFailure","_onConnectionFailure","crumbs","toolbar","Toolbar","_directoryPending","newFolder","newFolderIcon","createNewDirectory","uploader","refresher","refreshIcon","addItem","listing","createDirListing","_filenameSearcher","FilenameSearcher","updateFilter","filterFn","setFilter","useFuzzyFilter","placeholder","layout","PanelLayout","addWidget","restore","navigateToCurrentDirectory","_navigateToCurrentDirectory","showLastModifiedColumn","warn","forceRefresh","removeWidget","showHiddenFiles","newUntitled","createNewFile","_filePending","ext","ServerConnection","response","status","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","_pending","_pendingPath","_refreshed","_sessions","_state","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","driveName","rootPath","mimetype","format","refreshInterval","onFileChanged","runningChanged","onRunningChanged","_unloadEventListener","e","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","max","standby","restored","uploadChanged","uploads","tick","resolvePath","oldValue","handleContents","save","running","url","getDownloadUrl","href","populate","ready","fetch","serverVersion","supportsChunked","largeFile","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadInner","blob","chunk","reader","FileReader","readAsDataURL","onload","onerror","uploadIndex","finalModel","progress","end","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","TogglableHiddenFileBrowserModel","_includeHiddenFiles","includeHiddenFiles","FilterFileBrowserModel","_filter","FileDialog","getOpenFiles","dialogOptions","focusNodeSelector","host","OpenDialog","launch","getExistingDirectory","assign","_browser","createFilteredFileBrowser","getValue","IFileBrowserFactory","Token","FileUploadComponent","props","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browser","browserModel","_tracker","currentChanged","render","complete","disconnect","VDomModel","browse","idx","val","stateChanged","_browserModel","oldBrowserModel"],"sourceRoot":""}