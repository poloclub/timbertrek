{"version":3,"file":"8695.7f3578a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/codemirror/keymap/vim.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          disableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"\";\n        }\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          enableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"transparent\";\n        }\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    function updateFatCursorMark(cm) {\n      if (!cm.state.fatCursorMarks) return;\n      clearFatCursorMark(cm);\n      var ranges = cm.listSelections(), result = []\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) {\n          var lineLength = cm.getLine(range.anchor.line).length;\n          if (range.anchor.ch < lineLength) {\n            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          } else {\n            result.push(cm.markText(Pos(range.anchor.line, lineLength - 1),\n                                    Pos(range.anchor.line, lineLength),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          }\n        }\n      }\n      cm.state.fatCursorMarks = result;\n    }\n\n    function clearFatCursorMark(cm) {\n      var marks = cm.state.fatCursorMarks;\n      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n\n    function enableFatCursorMark(cm) {\n      cm.state.fatCursorMarks = [];\n      updateFatCursorMark(cm)\n      cm.on(\"cursorActivity\", updateFatCursorMark)\n    }\n\n    function disableFatCursorMark(cm) {\n      clearFatCursorMark(cm);\n      cm.off(\"cursorActivity\", updateFatCursorMark);\n      // explicitly set fatCursorMarks to null because event listener above\n      // can be invoke after removing it, if off is called from operation\n      cm.state.fatCursorMarks = null;\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '_', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyway.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        // The black hole register, \"_, means delete/yank to nowhere.\n        if (registerName === '_') return;\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: '(JavaScript regexp)',\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      /**\n       * Find and select the next occurrence of the search query. If the cursor is currently\n       * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n       * appropriate direction.\n       *\n       * This differs from `findNext` in the following ways:\n       *\n       * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n       * 2. If the cursor is currently inside a search match, this selects the current match\n       *    instead of the next match.\n       * 3. If there is no associated operator, this will turn on visual mode.\n       */\n      findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward;\n        prev = (state.isReversed()) ? !prev : prev;\n\n        // next: [from, to] | null\n        var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n        // No matches.\n        if (!next) {\n          return;\n        }\n\n        // If there's an operator that will be executed, return the selection.\n        if (prevInputState.operator) {\n          return next;\n        }\n\n        // At this point, we know that there is no accompanying operator -- let's\n        // deal with visual mode in order to select an appropriate match.\n\n        var from = next[0];\n        // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n        // the resulting selection is extended by 1 char. Let's shrink it so that only the\n        // match is selected.\n        var to = Pos(next[1].line, next[1].ch - 1);\n\n        if (vim.visualMode) {\n          // If we were in visualLine or visualBlock mode, get out of it.\n          if (vim.visualLine || vim.visualBlock) {\n            vim.visualLine = false;\n            vim.visualBlock = false;\n            CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n          }\n\n          // If we're currently in visual mode, we should extend the selection to include\n          // the search result.\n          var anchor = vim.sel.anchor;\n          if (anchor) {\n            if (state.isReversed()) {\n              if (motionArgs.forward) {\n                return [anchor, from];\n              }\n\n              return [anchor, to];\n            } else {\n              if (motionArgs.forward) {\n                return [anchor, to];\n              }\n\n              return [anchor, from];\n            }\n          }\n        } else {\n          // Let's turn visual mode on.\n          vim.visualMode = true;\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        return prev ? [to, from] : [from, to];\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last){\n            return moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        return moveToEol(cm, head, motionArgs, vim, false);\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      clearFakeCursor(vim);\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/^#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n      var cur = head;\n      var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      var end=cm.clipPos(retval);\n      end.ch--;\n      if (!keepHPos) {\n        vim.lastHPos = Infinity;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n      }\n      return retval;\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n\n    /**\n     * dom - Document Object Manipulator\n     * Usage:\n     *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n     * Examples:\n     *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n     *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n     * Not supported:\n     *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n     */\n    function dom(n) {\n      if (typeof n === 'string') n = document.createElement(n);\n      for (var a, i = 1; i < arguments.length; i++) {\n        if (!(a = arguments[i])) continue;\n        if (typeof a !== 'object') a = document.createTextNode(a);\n        if (a.nodeType) n.appendChild(a);\n        else for (var key in a) {\n          if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n          if (key[0] === '$') n.style[key.slice(1)] = a[key];\n          else n.setAttribute(key, a[key]);\n        }\n      }\n      return n;\n    }\n\n    function showConfirm(cm, template) {\n      var pre = dom('pre', {$color: 'red'}, template);\n      if (cm.openNotification) {\n        cm.openNotification(pre, {bottom: true, duration: 5000});\n      } else {\n        alert(pre.innerText);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      return dom(document.createDocumentFragment(),\n               dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre'},\n                 prefix,\n                 dom('input', {type: 'text', autocorrect: 'off',\n                               autocapitalize: 'off', spellcheck: 'false'})),\n               desc && dom('span', {$color: '#888'}, desc));\n    }\n\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var template = makePrompt(options.prefix, options.desc);\n      if (cm.openDialog) {\n        cm.openDialog(template, options.onClose, {\n          onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n          bottom: true, selectValueOnOpen: false, value: options.value\n        });\n      }\n      else {\n        options.onClose(prompt(shortText, ''));\n      }\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    /**\n     * Pretty much the same as `findNext`, except for the following differences:\n     *\n     * 1. Before starting the search, move to the previous search. This way if our cursor is\n     * already inside a match, we should return the current match.\n     * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n     */\n    function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        // Go back one result to ensure that if the cursor is currently a match, we keep it.\n        var found = cursor.find(!prev);\n\n        // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n        if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n          cursor.find(!prev);\n        }\n\n        for (var i = 0; i < repeat; i++) {\n          found = cursor.find(prev);\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return [cursor.from(), cursor.to()];\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (typeof end == 'number') {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------\\n\\n';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '\\n'\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '\\n'\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      vglobal: function(cm, params) {\n        // global inspects params.commandName\n        this.global(cm, params);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        var inverted = params.commandName[0] === 'v';\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [];\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var line = cm.getLineHandle(i);\n          var matched = query.test(line.text);\n          if (matched !== inverted) {\n            matchedLines.push(cmd ? line : line.text);\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, matchedLines.join('\\n'));\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var line = matchedLines[index++];\n            var lineNum = cm.getLineNumber(line);\n            if (lineNum == null) {\n              nextCommand();\n              return;\n            }\n            var command = (lineNum + 1) + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          // If the pattern ends with $ (line boundary assertion), change $ to \\n.\n          // Caveat: this workaround cannot match on the last line of the document.\n          if (/(^|[^\\\\])(\\\\\\\\)*\\$$/.test(regexPart)) {\n            regexPart = regexPart.slice(0, -1) + '\\\\n';\n            replacePart = (replacePart || '') + '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using JavaScript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos, modifiedLineNumber, joined;\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        var unmodifiedLineNumber = searchCursor.to().line;\n        searchCursor.replace(newText);\n        modifiedLineNumber = searchCursor.to().line;\n        lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n        joined = modifiedLineNumber < unmodifiedLineNumber;\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    /**\n     * Keeps track of a fake cursor to support visual mode cursor behavior.\n     */\n    function updateFakeCursor(cm) {\n      var className = 'cm-animate-fat-cursor';\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      clearFakeCursor(vim);\n      // In visual mode, the cursor may be positioned over EOL.\n      if (from.ch == cm.getLine(from.line).length) {\n        var widget = dom('span', { 'class': className }, '\\u00a0');\n        vim.fakeCursorBookmark = cm.setBookmark(from, {widget: widget});\n      } else {\n        vim.fakeCursor = cm.markText(from, to, {className: className});\n      }\n    }\n    function clearFakeCursor(vim) {\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n        vim.fakeCursor = null;\n      }\n      if (vim.fakeCursorBookmark) {\n        vim.fakeCursorBookmark.clear();\n        vim.fakeCursorBookmark = null;\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"],"names":["CodeMirror","defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","keepSpaces","replace","fullLine","exitVisualBlock","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultKeymapLength","length","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","detachVimMap","cm","next","this","keyMap","vim","rmClass","getWrapperElement","getOption","document","body","style","caretColor","clearFatCursorMark","off","updateFatCursorMark","state","fatCursorMarks","disableFatCursorMark","getInputField","attach","attachVimMap","setOption","onCursorActivity","getOnPasteFn","leaveVimMode","prev","addClass","on","enableFatCursorMark","signal","mode","maybeInitVimState","enterVimMode","ranges","listSelections","result","i","range","empty","lineLength","getLine","anchor","line","ch","push","markText","className","marks","clear","cmKey","key","vimKey","charAt","pieces","split","lastPiece","hasCharacter","piece","modifiers","specialKeys","isUpperCase","toLowerCase","join","cmKeyToVimKey","cmd","findKey","defineOption","val","Init","test","Shift","Ctrl","Alt","Cmd","Mod","CapsLock","Enter","Backspace","Delete","Insert","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","bigWordCharTest","makeKeyRange","start","size","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","firstLine","lastLine","isLowerCase","k","isWhiteSpaceString","isEndOfSentenceSymbol","indexOf","inArray","arr","options","defaultValue","aliases","callback","undefined","Error","value","cfg","option","scope","local","vimGlobalState","lastInsertModeKeyTimer","createCircularJumpList","pointer","head","tail","buffer","Array","move","offset","mark","find","newCur","inc","oldCur","cursorEqual","cachedCursor","add","curMark","useNextSlot","cursor","trashMark","setBookmark","markPos","oldPointer","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","optionName","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","macroModeState","lastCharacterSearch","increment","selectedCharacter","registerController","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","prototype","exitMacroRecordMode","enterMacroRecordMode","registerName","register","getRegister","openDialog","bottom","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","noremap","toCtxArray","ctxsToMap","actualLength","mapping","substr","newMapping","_mapCommand","mappedCtxs","filter","el","mapclear","origLength","userKeymap","slice","contexts","j","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","pushText","logKey","handleEsc","exitVisualMode","exitInsertMode","keyBuffer","keysAreChars","match","commandDispatcher","matchCommand","thisMatch","window","clearTimeout","setTimeout","selections","here","replaceRange","pop","handleKeyInsertMode","keysMatcher","exec","pushRepeatDigit","handleKeyNonInsertMode","operation","curOp","isVimOp","substring","index","doKeyToKey","processCommand","e","console","handleEx","input","defineMotion","fn","motions","defineAction","defineOperator","operators","mapCommand","args","extra","defineRegister","registers","prefixRepeat","motionRepeat","reason","Register","text","insertModeChanges","searchQueries","unnamedRegister","historyBuffer","iterator","initialPrefix","n","getRepeat","repeat","parseInt","setText","pushInsertModeChanges","pushSearchQuery","query","toString","isValidRegister","shiftNumericRegisters_","nextMatch","up","dir","element","pushInput","splice","reset","bestMatch","matches","partial","full","commandMatch","commandMatches","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","updateCmSelection","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","shift","showPrompt","onClose","scrollTo","left","top","logSearchQuery","desc","onKeyUp","close","parsedQuery","keyName","target","selectionEnd","selectionStart","Math","min","updateSearchQuery","scrollIntoView","findNext","clearSearchHighlight","onKeyDown","e_stop","focus","word","expandWordUnderCursor","isKeyword","end","ignoreCase","smartCase","showConfirm","onPromptClose","onPromptKeyDown","exArgs","selectValueOnOpen","newHead","newAnchor","origHead","copyCursor","clipCursorToContent","origAnchor","oldHead","oldAnchor","noRepeat","motionResult","recordJumpPosition","Infinity","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","tmp","_cm","expandSelectionToLine","selection","getRange","lines","clipToLine","setSelections","primary","operatorMoveTo","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","floor","moveToBottomLine","expandToLine","isReversed","highlightSearchMatches","findAndSelectNextInclusive","prevInputState","pos","found","from","to","findNextFromAndToInclusive","subMode","goToMark","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","equal","between","cursorIsBetween","moveByCharacters","cur","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","posV","findPosV","moveToStartOfLine","charCoords","res","hitSide","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","moveBySentence","nextChar","idx","ln","stop","curr","last_valid","skip_empty_lines","reverse","curr_index","findSentence","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","words","emptyLineIsWord","findWord","eodCh","shortCircuit","firstWord","lastWord","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","symb","endLine","lineCount","curCh","lineText","nextCh","lastCh","reverseSymb","depth","curMoveThrough","symbolToMode","init","findSymbolModes","isComplete","lineLen","findSymbol","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","symbol","getTokenTypeAt","re","findMatchingBracket","bracketRegex","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","bracketRegexp","openSym","scanForBracket","selectCompanionObject","len","chars","firstIndex","findBeginningAndEnd","findMatchingTag","findEnclosingTag","tags","open","expandTagUnderCursor","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fillArray","times","change","finalHead","Number","MAX_VALUE","setSelection","getSelection","replaceSelection","replacement","replaceSelections","lastState","prevLineEnd","wasLastLine","commands","newlineAndIndent","indent","startLine","indentLine","indentAuto","_args","execCommand","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","max","getLastEditPos","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","lastSelectionCurEnd","selectedArea","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","replaceTo","replaceWith","replaceWithStr","incrementNumberToken","numberStr","lineStr","baseStr","digits","base","zeroPadding","repeatLastEdit","includeLineBreak","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","clipPos","isClipped","primIndex","atAnchor","atHead","getIndex","wasClipped","baseCh","headCh","newDir","lineHead","updateFakeCursor","exclusive","headOffset","anchorOffset","right","moveHead","clearFakeCursor","firstNonWS","search","_forward","noSymbol","getHead","wordStart","bracket","section","comment","method","preprocess","token","charTests","foundWord","keepHPos","retval","charIdxInLine","markName","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","SearchState","searchState_","splitBySeparator","argString","separator","slashes","findUnescapedSeparators","tokens","escapeNextChar","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","charUnescapes","unescapes","parseQuery","RegExp","regexPart","forceIgnoreCase","out","specialComesNext","translateRegex","dom","createElement","a","createTextNode","nodeType","appendChild","Object","setAttribute","template","pre","$color","openNotification","duration","alert","innerText","shortText","createDocumentFragment","$fontFamily","$whiteSpace","autocorrect","autocapitalize","spellcheck","prompt","rawQuery","r1","r2","props","regexEqual","highlightTimeout","searchState","removeOverlay","source","matchSol","stream","sol","backUp","eol","skipToEnd","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","bottomY","done","doc","history","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","StringStream","commandName","params","parseInput_","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","unique","number","pattern","err","eatSpace","opts","decimal","hex","octal","parseArgs","lineStart","radix","numPart","textPart","matchPart","b","compareFn","textOld","anum","bnum","vglobal","global","inverted","splitBySlash","matchedLines","getLineHandle","nextCommand","getLineNumber","substitute","trailing","flagsPart","count","replacePart","confirm","output","peek","matched","matcher","unescapeRegexReplace","translateRegexReplace","startPos","searchCursor","exMode","lastPos","modifiedLineNumber","joined","replaceAll","newText","unmodifiedLineNumber","_value","savedCallback","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","insertModeChangeRegister","lastChange","logInsertModeChange","imc","repeatInsertModeChanges","changeObj","ignoreCount","selectionCount","maybeReset","somethingSelected","handleExternalSelection","widget","fakeCursorBookmark","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding","detach","fallthrough","mod"],"sourceRoot":""}