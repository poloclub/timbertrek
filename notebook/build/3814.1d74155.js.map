{"version":3,"file":"3814.1d74155.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ModelDB } from '@jupyterlab/observables';\nimport * as models from '@jupyterlab/shared-models';\nimport { Signal } from '@lumino/signaling';\nconst globalModelDBMutex = models.createMutex();\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            this._sharedModelSwitched = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            this.sharedModel = models.createStandaloneCell(this.type, options.id);\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            const value = this.modelDB.createString('value');\n            value.changed.connect(this._onModelDBValueChanged, this);\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.changed.connect(this._onModelDBMimeTypeChanged, this);\n            mimeType.set(options.mimeType || 'text/plain');\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * When we initialize a cell model, we create a standalone model that cannot be shared in a YNotebook.\n         * Call this function to re-initialize the local representation based on a fresh shared model (e.g. models.YFile or models.YCodeCell).\n         *\n         * @param sharedModel\n         * @param reinitialize Whether to reinitialize the shared model.\n         */\n        switchSharedModel(sharedModel, reinitialize) {\n            if (reinitialize) {\n                // update local modeldb\n                // @todo also change metadata\n                this.value.text = sharedModel.getSource();\n            }\n            this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n            // clone model retrieve a shared (not standalone) model\n            this.sharedModel = sharedModel;\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            this._sharedModelSwitched.emit(true);\n        }\n        /**\n         * We update the modeldb store when the shared model changes.\n         * To ensure that we don't run into infinite loops, we wrap this call in a \"mutex\".\n         * The \"mutex\" ensures that the wrapped code can only be executed by either the sharedModelChanged handler\n         * or the modelDB change handler.\n         */\n        _onSharedModelChanged(sender, change) {\n            globalModelDBMutex(() => {\n                if (change.sourceChange) {\n                    const value = this.modelDB.get('value');\n                    let currpos = 0;\n                    change.sourceChange.forEach(delta => {\n                        if (delta.insert != null) {\n                            value.insert(currpos, delta.insert);\n                            currpos += delta.insert.length;\n                        }\n                        else if (delta.delete != null) {\n                            value.remove(currpos, currpos + delta.delete);\n                        }\n                        else if (delta.retain != null) {\n                            currpos += delta.retain;\n                        }\n                    });\n                }\n            });\n        }\n        /**\n         * Handle a change to the modelDB value.\n         */\n        _onModelDBValueChanged(value, event) {\n            globalModelDBMutex(() => {\n                this.sharedModel.transact(() => {\n                    switch (event.type) {\n                        case 'insert':\n                            this.sharedModel.updateSource(event.start, event.start, event.value);\n                            break;\n                        case 'remove':\n                            this.sharedModel.updateSource(event.start, event.end);\n                            break;\n                        default:\n                            this.sharedModel.setSource(value.text);\n                            break;\n                    }\n                });\n            });\n        }\n        get type() {\n            return 'code';\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * A signal emitted when the shared model was switched.\n         */\n        get sharedModelSwitched() {\n            return this._sharedModelSwitched;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            Signal.clearData(this);\n        }\n        _onModelDBMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        autoClosingBrackets: false,\n        codeFolding: false,\n        cursorBlinkRate: 530,\n        fontFamily: null,\n        fontSize: null,\n        handlePaste: true,\n        insertSpaces: true,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        matchBrackets: true,\n        readOnly: false,\n        tabSize: 4,\n        rulers: [],\n        showTrailingSpace: false,\n        wordWrapColumn: 80\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = this._trans.__('No data!');\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = this._trans.__('No data!');\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map"],"names":["globalModelDBMutex","CodeEditor","defaultSelectionStyle","className","displayName","color","Model","constructor","options","this","_isDisposed","_mimeTypeChanged","Signal","_sharedModelSwitched","modelDB","ModelDB","sharedModel","type","id","changed","connect","_onSharedModelChanged","value","createString","_onModelDBValueChanged","text","mimeType","createValue","_onModelDBMimeTypeChanged","set","createMap","switchSharedModel","reinitialize","getSource","disconnect","emit","sender","change","sourceChange","get","currpos","forEach","delta","insert","length","delete","remove","retain","event","transact","updateSource","start","end","setSource","mimeTypeChanged","sharedModelSwitched","selections","getValue","newValue","setValue","isDisposed","dispose","args","name","oldValue","defaultConfig","autoClosingBrackets","codeFolding","cursorBlinkRate","fontFamily","fontSize","handlePaste","insertSpaces","lineHeight","lineNumbers","lineWrap","matchBrackets","readOnly","tabSize","rulers","showTrailingSpace","wordWrapColumn","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","source","_onSourceChanged","_setValue","isDirty","handleEvent","_evtBlur","_evtClick","onAfterAttach","msg","addEventListener","hidden","isVisible","update","onAfterShow","onUpdateRequest","refresh","onBeforeDetach","removeEventListener","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","key","content","toJSON","stringify","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","_onSelectionsChanged","_updateOnShow","updateOnShow","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onActivateRequest","onResize","width","height","setSize","resizeToFit","getSelection","getLine","slice","match","getOption","undefined","Private","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token"],"sourceRoot":""}